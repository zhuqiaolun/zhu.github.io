<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhuqiaolun - 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuqiaolun.com/"/>
  <updated>2020-09-09T08:13:34.886Z</updated>
  <id>https://www.zhuqiaolun.com/</id>
  
  <author>
    <name>zhuqiaolun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat配置https访问</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599632929241/1599632929241/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599632929241/1599632929241/</id>
    <published>2020-09-09T06:28:49.000Z</published>
    <updated>2020-09-09T08:13:34.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成安全证书"><a href="#生成安全证书" class="headerlink" title="生成安全证书"></a>生成安全证书</h3><p>因为SUN公司提供了制作证书的工具keytool。<br>在JDK 1.4以后的版本中都包含了这一工具，它的位置为<java_home>\bin\keytool.exe。</java_home></p><h3 id="创建证书的命令"><a href="#创建证书的命令" class="headerlink" title="创建证书的命令"></a>创建证书的命令</h3><pre><code>keytool -genkeypair -alias "tomcat" -keyalg "RSA" -keystore "e:\tomcat.keystore"  </code></pre><p>这里密码我输的是123456，名字与姓氏为域名，其它的根据具体情况输入<br>以上命令将生产一对非对称密钥和自我签名的证书 e:\tomcat.keystore.<br>将证书保存到<tomcat_home>\conf 的目录下，<br>注意：“名字与姓氏”应该是域名，输成了姓名，和真正运行的时候域名不符，会出问题<br><img src="/2020/09/1599632929241/1599632929241/20200909144433.png" alt="20200909144433"></tomcat_home></p><h3 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h3><p>找到conf下的server.xml文件，添加以下内容，</p><pre><code>&lt;Connector port="8451" protocol="HTTP/1.1" SSLEnabled="true"                maxThreads="150" scheme="https" secure="true"                clientAuth="false" sslProtocol="TLS"          keystoreFile="conf/tomcat.keystore"         keystorePass="123456"  /&gt; </code></pre><p>端口port可自定义，keystorePass为密匙库密码</p><p>启动tomcat<br><img src="/2020/09/1599632929241/1599632929241/20200909161043.png" alt="20200909161043"><br>如换成apr模式 将protocol=”HTTP/1.1”替换为protocol=”org.apache.coyote.http11.Http11Protocol”即可</p><h3 id="访问结果"><a href="#访问结果" class="headerlink" title="访问结果"></a>访问结果</h3><p>http访问 - 8080 ：<a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a><br><img src="/2020/09/1599632929241/1599632929241/20200909160048.png" alt="20200909160048"></p><p>https访问 - 8451 ：<a href="https://localhost:8451/" target="_blank" rel="noopener">https://localhost:8451/</a><br><img src="/2020/09/1599632929241/1599632929241/20200909160135.png" alt="20200909160135"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      tomcat配置https访问
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://www.zhuqiaolun.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat开启APR运行模式，优化并发性能 - Windows</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599628352134/1599628352134/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599628352134/1599628352134/</id>
    <published>2020-09-09T05:12:32.000Z</published>
    <updated>2020-09-09T06:29:46.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>下载tcnative-1.dll文件<br>官网地址：<a href="https://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-native.cgi</a><br>软件下载地址：<a href="https://mirror.bit.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/binaries/tomcat-native-1.2.25-openssl-1.1.1g-win32-bin.zip" target="_blank" rel="noopener">点击下载</a><br><img src="/2020/09/1599628352134/1599628352134/20200909131752.png" alt="20200909131752"></p><p>文件解压后，将 x64/tcnative-1.dll 文件复制到C:\Windows\System32目录下<br><img src="/2020/09/1599628352134/1599628352134/20200909132118.png" alt="20200909132118"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>找到下面代码</p><pre><code>&lt;Connector connectionTimeout="20000" port="8086" protocol="HTTP/1.1" redirectPort="8443"/&gt;</code></pre><p>修改为</p><pre><code>&lt;Connector connectionTimeout="20000" port="8086" protocol="org.apache.coyote.http11.Http11AprProtocol" redirectPort="8443"/&gt;</code></pre><p>结果<br><img src="/2020/09/1599628352134/1599628352134/20200909133359.png" alt="20200909133359"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Windows环境中的tomcat开启APR运行模式
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://www.zhuqiaolun.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat开启APR运行模式，优化并发性能 - Linux</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599545396773/1599545396773/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599545396773/1599545396773/</id>
    <published>2020-09-08T06:09:56.000Z</published>
    <updated>2020-09-09T05:15:25.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Tomcat支持三种接收请求的处理方式：BIO、NIO、APR </p><p>BIO模式：阻塞式I/O操作，表示Tomcat使用的是传统Java I/O操作(即java.io包及其子包)。<br>Tomcat7以下版本默认情况下是以bio模式运行的，由于每个请求都要创建一个线程来处理，线程开销较大，不能处理高并发的场景，在三种模式中性能也最低。</p><p>NIO模式：是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。<br>是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，它拥有比传统I/O操作(bio)更好的并发运行性能。<br>Tomcat8以上版本，默认使用的就是NIO模式，不需要额外修改。</p><p>APR模式：简单理解，就是从操作系统级别解决异步IO问题，大幅度的提高服务器的处理和响应性能， 也是Tomcat运行高并发应用的首选模式。 </p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code>yum install -y apr-devel openssl-devel gcc make expat-devel libtool</code></pre><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>所需软件的下载地址：<br><a href="https://mirrors.cnnic.cn/apache/apr/" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/</a><br><a href="https://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-native.cgi</a></p><p>点击下载：<br><a href="https://mirrors.cnnic.cn/apache/apr/apr-1.7.0.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-1.7.0.tar.gz</a><br><a href="https://mirrors.cnnic.cn/apache/apr/apr-iconv-1.2.2.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-iconv-1.2.2.tar.gz</a><br><a href="https://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.gz</a><br><a href="https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/source/tomcat-native-1.2.25-src.tar.gz" target="_blank" rel="noopener">https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/source/tomcat-native-1.2.25-src.tar.gz</a></p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p><img src="/2020/09/1599545396773/1599545396773/20200908153142.png" alt="20200908153142"></p><p>apr</p><pre><code>cd /usr/local/tomcat/src/apr-1.7.0./configure --prefix=/usr/local/tomcat/src/aprmake &amp;&amp; make install</code></pre><p>apr-iconv</p><pre><code>cd /usr/local/tomcat/src/apr-iconv-1.2.2./configure --with-apr=/usr/local/tomcat/src/apr --prefix=/usr/local/tomcat/src/apr-iconvmake &amp;&amp; make install</code></pre><p>apr-util</p><pre><code>cd apr-util-1.6.1/./configure --with-apr=/usr/local/tomcat/src/apr --with-apr-iconv=/usr/local/tomcat/src/apr-iconv/bin/apriconv --prefix=/usr/local/tomcat/src/apr-utilmake &amp;&amp; make install</code></pre><p>tomcat-native</p><pre><code>cd /usr/local/tomcat/src/tomcat-native-1.2.25-src/native./configure --with-apr=/usr/local/tomcat/src/apr --with-java-home=/usr/local/java/jdk1.8.0_231make &amp;&amp; make install</code></pre><p>profile</p><pre><code>echo -e 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/tomcat/src/apr/lib\nexport LD_RUN_PATH=$LD_RUN_PATH:/usr/local/tomcat/src/apr/lib' &gt;&gt; /etc/profilesource /etc/profile</code></pre><h3 id="配置APR"><a href="#配置APR" class="headerlink" title="配置APR"></a>配置APR</h3><p>打开 server.xml</p><pre><code>vim /usr/local/tomcat/apache-tomcat-9.0.27/conf/server.xml</code></pre><p>修改内容如下：</p><pre><code>&lt;Executor name="tomcatThreadPool"          namePrefix="catalina-exec-"         maxThreads="300"          minSpareThreads="30"/&gt;​&lt;Connector executor="tomcatThreadPool"               port="8080"               protocol="org.apache.coyote.http11.Http11AprProtocol"              connectionTimeout="20000"              redirectPort="8443"              acceptCount="900"              disableUploadTimeout="true"              URIEncoding="UTF-8"              enableLookups="false"              compression="on"              compressionMinSize="1024"              /&gt;​&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; ##注释掉下面那行，如果不用apache&lt;!-- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt; --&gt;</code></pre><p>结果：<br><img src="/2020/09/1599545396773/1599545396773/20200908160528.png" alt="20200908160528"><br>注：如果非root用户启动失败，把apr环境变量在当前用户的.bash_profile中写一份</p><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>Executor参数说明</p><pre><code>name：共享线程池的名字。这是Connector为了共享线程池要引用的名字，该名字必须唯一。默认值：None；namePrefix:在JVM上，每个运行线程都可以有一个name 字符串。这一属性为线程池中每个线程的name字符串设置了一个前缀，            Tomcat将把线程号追加到这一前缀的后面。默认值：catalina-exec-；maxThreads：该线程池可以容纳的最大线程数。默认值：150；maxIdleTime：在Tomcat关闭一个空闲线程之前，允许空闲线程持续的时间(以毫秒为单位)。            只有当前活跃的线程数大于minSpareThread的值，才会关闭空闲线程。默认值：60000(一分钟)。minSpareThreads：Tomcat应该始终打开的最小不活跃线程数。默认值：4。threadPriority：线程的等级。默认是Thread.NORM_PRIORITY</code></pre><p>Connector参数说明</p><pre><code>maxThreads :Tomcat 使用线程来处理接收的每个请求，这个值表示 Tomcat 可创建的最大的线程数，默认值是 200minSpareThreads：最小空闲线程数，Tomcat 启动时的初始化的线程数，表示即使没有人使用也开这么多空线程等待，默认值是 10。maxSpareThreads：最大备用线程数，一旦创建的线程超过这个值，Tomcat 就会关闭不再需要的 socket 线程。​上边配置的参数，最大线程 500（一般服务器足以），要根据自己的实际情况合理设置，设置越大会耗费内存和 CPU，因为 CPU 疲于线程上下文切换，没有精力提供请求服务了，最小空闲线程数 20，线程最大空闲时间 60 秒，当然允许的最大线程连接数还受制于操作系统的内核参数设置，设置多大要根据自己的需求与环境。当然线程可以配置在“tomcatThreadPool”中，也可以直接配置在“Connector”中，但不可以重复配置。​URIEncoding：指定 Tomcat 容器的 URL 编码格式，语言编码格式这块倒不如其它 WEB 服务器软件配置方便，需要分别指定。connnectionTimeout： 网络连接超时，单位：毫秒，设置为 0 表示永不超时，这样设置有隐患的。通常可设置为 30000 毫秒，可根据检测实际情况，适当修改。enableLookups： 是否反查域名，以返回远程主机的主机名，取值为：true 或 false，如果设置为false，则直接返回IP地址，为了提高处理能力，应设置为 false。disableUploadTimeout：上传时是否使用超时机制。connectionUploadTimeout：上传超时时间，毕竟文件上传可能需要消耗更多的时间，这个根据你自己的业务需要自己调，            以使Servlet有较长的时间来完成它的执行，需要与上一个参数一起配合使用才会生效。acceptCount：指定当所有可以使用的处理请求的线程数都被使用时，可传入连接请求的最大队列长度，超过这个数的请求将不予处理，默认为100个。keepAliveTimeout：长连接最大保持时间（毫秒），表示在下次请求过来之前，Tomcat 保持该连接多久，默认是使用 connectionTimeout 时间，-1 为不限制超时。maxKeepAliveRequests：表示在服务器关闭之前，该连接最大支持的请求数。            超过该请求数的连接也将被关闭，1表示禁用，-1表示不限制个数，默认100个，一般设置在100~200之间。compression：是否对响应的数据进行 GZIP 压缩，off：表示禁止压缩；on：表示允许压缩（文本将被压缩）、force：表示所有情况下都进行压缩，默认值为off，            压缩数据后可以有效的减少页面的大小，一般可以减小1/3左右，节省带宽。compressionMinSize：表示压缩响应的最小值，只有当响应报文大小大于这个值的时候才会对报文进行压缩，如果开启了压缩功能，默认值就是2048。compressableMimeType：压缩类型，指定对哪些类型的文件进行数据压缩。noCompressionUserAgents="gozilla, traviata"： 对于以下的浏览器，不启用压缩。如果已经对代码进行了动静分离，静态页面和图片等数据就不需要 Tomcat 处理了，那么也就不需要配置在 Tomcat 中配置压缩了。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Linux环境中的tomcat开启APR运行模式
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://www.zhuqiaolun.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat配置conf下的文件</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599535661189/1599535661189/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599535661189/1599535661189/</id>
    <published>2020-09-08T03:27:41.000Z</published>
    <updated>2020-09-08T06:00:27.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启用manager"><a href="#启用manager" class="headerlink" title="启用manager"></a>启用manager</h3><p>1.打开conf目录下的文件 tomcat-users.xml，在尾部添加一下内容:</p><pre><code>&lt;role rolename="tomcat"/&gt;&lt;role rolename="role1"/&gt;&lt;role rolename="manager-script"/&gt;&lt;role rolename="manager-gui"/&gt;&lt;role rolename="manager-status"/&gt; &lt;role rolename="admin-gui"/&gt;&lt;role rolename="admin-script"/&gt; &lt;user username="tomcat" password="tomcat" roles="manager-gui,manager-script,tomcat,admin-gui,admin-script"/&gt;</code></pre><p>2.修改webapps文件夹manager和host-mananger两个项目下META-INF中的context.xml文件：</p><pre><code>vim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/host-manager/META-INFvim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/manager/META-INF/context.xml</code></pre><p>修改为（或者注释掉）： </p><pre><code>&lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" /&gt;</code></pre><p>无须重启tomcat即可生效</p><h3 id="配置日志打印"><a href="#配置日志打印" class="headerlink" title="配置日志打印"></a>配置日志打印</h3><p>打开conf目录下的文件 logging.properties；修改以下内容</p><pre><code>1catalina.org.apache.juli.AsyncFileHandler.level = FINE1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.1catalina.org.apache.juli.AsyncFileHandler.maxDays = 71catalina.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter2localhost.org.apache.juli.AsyncFileHandler.level = FINE2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost.2localhost.org.apache.juli.AsyncFileHandler.maxDays = 72localhost.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter3manager.org.apache.juli.AsyncFileHandler.level = FINE3manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs3manager.org.apache.juli.AsyncFileHandler.prefix = manager.3manager.org.apache.juli.AsyncFileHandler.maxDays = 73manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter4host-manager.org.apache.juli.AsyncFileHandler.level = FINE4host-manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager.4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 74host-manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatterjava.util.logging.ConsoleHandler.level = FINEjava.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatterjava.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL [%4$s] [%3$s] %2$s %5$s %6$s%n</code></pre><h3 id="配置日志存储"><a href="#配置日志存储" class="headerlink" title="配置日志存储"></a>配置日志存储</h3><pre><code>&lt;Host name="localhost"  appBase="webapps"  unpackWARs="true" autoDeploy="true"&gt;       &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;       &lt;Valve className="org.apache.catalina.valves.AccessLogValve"            directory="logs/localhost_access_log" prefix="localhost_access_log" suffix=".txt"            pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt; &lt;/Host&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      配置tomcat的文件
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://www.zhuqiaolun.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装tomcat环境</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599532777229/1599532777229/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599532777229/1599532777229/</id>
    <published>2020-09-08T02:39:37.000Z</published>
    <updated>2020-09-08T08:29:35.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>tomcat 官网地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a><br>tomcat 官网版本文件地址：<a href="https://archive.apache.org/dist/tomcat/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/</a><br>tomcat 指定版本下载地址：<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/</a><br>Linux在线下载：</p><pre><code>wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</code></pre><p><img src="/2020/09/1599532777229/1599532777229/20200908111621.png" alt="20200908111621"></p><p>下载离线版本：<br>点击红框区域,即可下载文件（免安装版本）<br><img src="/2020/09/1599532777229/1599532777229/20200908110142.png" alt="20200908110142"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>创建安装目录，并进入安装目录</p><pre><code>mkdir /usr/local/tomcatcd /usr/local/tomcat/rz apache-tomcat-9.0.27.tar.gz # 上传文件（如采用在线下载，则无需此步骤）tar -zxvf apache-tomcat-9.0.27.tar.gz # 解压文件cd /usr/local/tomcat/apache-tomcat-9.0.27 # 进入目录</code></pre><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>启动：</p><pre><code>/usr/local/tomcat/apache-tomcat-9.0.27/bin/startup.sh</code></pre><p>停止：</p><pre><code>/usr/local/tomcat/apache-tomcat-9.0.27/bin/shutdown.sh</code></pre><p>实时日志</p><pre><code>cd /usr/local/tomcat/apache-tomcat-9.0.27/logstail -f catalina.out</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><pre><code>curl -I http://127.0.0.1:8080</code></pre><p>返回以下内容则表示启动成功</p><pre><code>HTTP/1.1 200 Content-Type: text/html;charset=UTF-8Transfer-Encoding: chunkedDate: Tue, 08 Sep 2020 03:22:06 GMT</code></pre><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><pre><code>cd /usr/local/tomcat/apache-tomcat-9.0.27/webapps</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Linux中安装tomcat环境
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://www.zhuqiaolun.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 服务器证书SSL安装</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1599456487885/1599456487885/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1599456487885/1599456487885/</id>
    <published>2020-09-07T05:28:07.000Z</published>
    <updated>2020-09-07T06:07:10.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>初始安装nginx的时候没有开启ssl功能 </p><p>查看是否开启ssl模块</p><pre><code>/usr/local/nginx/sbin/nginx -V</code></pre><p><img src="/2020/09/1599456487885/1599456487885/20200907133809.png" alt="20200907133809"><br>当未出现红框内的内部分，则表示没有开启ssl功能 </p><h3 id="开启ssl模块"><a href="#开启ssl模块" class="headerlink" title="开启ssl模块"></a>开启ssl模块</h3><p>找到安装的源码包(带有版本号的位置)</p><pre><code>cd /usr/local/software/nginx-1.18.0./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_modulemake    # 这里不要进行make install，否则就是覆盖安装cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak       # 备份/usr/local/nginx/sbin/nginx -s stop # 停止服务cp ./objs/nginx /usr/local/nginx/sbin/  # 将刚刚编译好的nginx覆盖掉原有的nginx</code></pre><p><img src="/2020/09/1599456487885/1599456487885/20200907135626.png" alt="20200907135626"><br>当在此查看 /usr/local/nginx/sbin/nginx -V ，则表示开启成功</p><h3 id="下载SSL证书"><a href="#下载SSL证书" class="headerlink" title="下载SSL证书"></a>下载SSL证书</h3><p>将已获取到的 1.证书文件和 2.私钥文件从本地目录拷贝到 Nginx 服务器的 /usr/local/nginx/conf 目录下<br>此处为 Nginx 默认安装目录，请根据实际情况操作</p><h3 id="配置Https"><a href="#配置Https" class="headerlink" title="配置Https"></a>配置Https</h3><pre><code>user  root;worker_processes  1;error_log /usr/local/nginx/logs/nginx_error.log crit; events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    # 开启gzip压缩    gzip  on;    gzip_comp_level  5;    gzip_min_length  1024;    gzip_types   text/plain application/x-javascript text/css application/xml text/javascript  image/jpeg image/gif image/png;    # 隐藏nginx版本信息    server_tokens off;    server {        listen       80;        server_name  www.zhuqiaolun.com;        if ($scheme = http ) {            return  301 https://www.zhuqiaolun.com$request_uri;        }        location / {            root   html;            index  index.html index.htm;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }    # HTTPS server    server {        listen 443 ssl;        server_name    www.zhuqiaolun.com;        root html;         index index.html index.htm;           ssl_certificate www.zhuqiaolun.com.crt;        ssl_certificate_key www.zhuqiaolun.com.key;        ssl_session_timeout    10m;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        ssl_session_cache shared:SSL:10m;        ssl_prefer_server_ciphers  on;        location / {            root   html;            index  index.html index.htm;        }    }}</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Nginx SSL性能调优</p><pre><code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:10m;ssl_session_timeout 10m;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Nginx 服务器证书SSL安装,配置Https访问
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://www.zhuqiaolun.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.3.x 整合 freemarker</title>
    <link href="https://www.zhuqiaolun.com/2020/08/1597309130215/1597309130215/"/>
    <id>https://www.zhuqiaolun.com/2020/08/1597309130215/1597309130215/</id>
    <published>2020-08-13T08:58:50.000Z</published>
    <updated>2020-08-13T10:18:19.098Z</updated>
    
    <content type="html"><![CDATA[<p>Freemarker<br>FreeMarker Template Language（FTL）  文件一般保存为 xxx.ftl<br>严格依赖MVC模式，不依赖Servlet容器（不占用JVM内存）<br>内建函数</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 将freemarker的html内容写入生成的文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>yml内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-freemarker</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br><span class="line">  # 配置模版引擎</span><br><span class="line">  freemarker:</span><br><span class="line">    cache: false #是否启用模板缓存</span><br><span class="line">    enabled: true #是否启用freemarker</span><br><span class="line">    template-loader-path: classpath:/templates/ #设定模板的加载路径，多个以逗号分隔</span><br><span class="line">    suffix: .ftl #设定模板的后缀</span><br><span class="line">    content-type: text/html</span><br><span class="line">    check-template-location: true #是否检查模板位置是否存在</span><br><span class="line">    charset: UTF-8 #模板编码</span><br><span class="line">    #一些常用配置</span><br><span class="line">    allow-request-override: false #是否允许HttpServletRequest属性覆盖(隐藏)控制器生成的同名模型属性</span><br><span class="line">    allow-session-override: false #是否允许HttpSession属性覆盖(隐藏)控制器生成的同名模型属性</span><br><span class="line">    expose-request-attributes: false #设定所有request的属性在merge到模板的时候，是否要都添加到model中</span><br><span class="line">    expose-session-attributes: false #是否在merge模板的时候，将HttpSession属性都添加到model中</span><br><span class="line">    expose-spring-macro-helpers: true #设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用</span><br><span class="line">    prefer-file-system-access: true #是否优先从文件系统加载template，以支持热加载，默认为true</span><br></pre></td></tr></tbody></table></figure><p>文件路径：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/main/java/com/demon/freemarker/controller</span><br><span class="line">    IndexController.java</span><br><span class="line">src/main/resources/templates</span><br><span class="line">    index1.ftl</span><br></pre></td></tr></tbody></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>IndexController.java</p><pre><code>@Controllerpublic class IndexController {    /**     * 路由 /index1     * 返回 index1 这里默认配置自动映射到目录(templages/)下的index1.ftl     */    @GetMapping("/index1")    public String index(Model model){        model.addAttribute("content","hello freemarker");        return "index1";    }}</code></pre><p>index.ftl</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;freemarker&lt;/title&gt;&lt;/head&gt;&lt;body&gt;this is welcome ${content}&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p><img src="/2020/08/1597309130215/1597309130215/20200813175553.png" alt="20200813175553"></p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用freemarker模板引擎生成静态的html文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import freemarker.template.Configuration;</span><br><span class="line">import freemarker.template.Template;</span><br><span class="line">import freemarker.template.TemplateException;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class StaticServiceImpl implements StaticService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Configuration configuration;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void createIndexHtml(String ftlName,Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params,File outFile) {</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        FileOutputStream fileOutputStream = null;</span><br><span class="line">        try {</span><br><span class="line">            //获取模板</span><br><span class="line">            Template template = configuration.getTemplate(ftlName+".ftl");</span><br><span class="line">            // 静态化页面内容</span><br><span class="line">            String content = FreeMarkerTemplateUtils.processTemplateIntoString(template, params);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">            inputStream = IOUtils.toInputStream(content, "UTF-8");</span><br><span class="line">            // 输出文件</span><br><span class="line">            FileUtils.forceMkdirParent(outFile);</span><br><span class="line">            fileOutputStream = new FileOutputStream(outFile);</span><br><span class="line">            IOUtils.copy(inputStream, fileOutputStream);</span><br><span class="line">        } catch (IOException | TemplateException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } finally {</span><br><span class="line">            // 关闭流</span><br><span class="line">            if(inputStream != null){</span><br><span class="line">                try {</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                } finally {</span><br><span class="line">                    if(fileOutputStream != null){</span><br><span class="line">                        try {</span><br><span class="line">                            fileOutputStream.close();</span><br><span class="line">                        } catch (IOException e) {</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class FreemarkerApplicationTests {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private StaticService staticService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        String ftlName = "index1";</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        params.put("content", "这是一个freemarker生成的html文件");</span><br><span class="line">        File outFile = new File("d:/test/page/freemarker.html");</span><br><span class="line">        staticService.createIndexHtml(ftlName,params,outFile);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制台的打印输出：<br><img src="/2020/08/1597309130215/1597309130215/20200813180652.png" alt="20200813180652"></p><p>生成本地文件输出：<br><img src="/2020/08/1597309130215/1597309130215/20200813181255.png" alt="20200813181255"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SpringBoot，freemarker
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.3.x 整合 thymeleaf</title>
    <link href="https://www.zhuqiaolun.com/2020/08/1597306338000/1597306338000/"/>
    <id>https://www.zhuqiaolun.com/2020/08/1597306338000/1597306338000/</id>
    <published>2020-08-13T08:12:17.000Z</published>
    <updated>2020-08-13T09:59:58.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Thymeleaf (主推)<br>轻量级的模板引擎（负责逻辑业务的不推荐，解析DOM或者XML会占用多的内存）<br>可以直接在浏览器中打开且正确显示模板页面<br>直接是html结尾，直接编辑</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-thymeleaf</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br><span class="line">  # 配置模版引擎, 是否开启thymeleaf缓存,本地为false，生产建议为true</span><br><span class="line">  thymeleaf: </span><br><span class="line">    # 是否启用模板缓存,开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">    cache: false</span><br><span class="line">    # 是否检查模板位置是否存在。</span><br><span class="line">    check-template: true</span><br><span class="line">    # 是否为Web框架启用Thymeleaf视图分辨率。</span><br><span class="line">    enabled: true</span><br><span class="line">    # 编码格式, 默认UTF-8</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    # 应用于模板的模板模式。另请参阅Thymeleaf的TemplateMode枚举。</span><br><span class="line">    mode: HTML</span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">    # 后缀 默认 .html</span><br><span class="line">    suffix: .html</span><br><span class="line">    # 模板文件存放位置  , 默认 classpath:/templates/</span><br><span class="line">    prefix: classpath:/templates/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/main/java/com/demon/freemarker/controller</span><br><span class="line">    IndexController.java</span><br><span class="line">src/main/resources/templates</span><br><span class="line">    index2.html</span><br></pre></td></tr></tbody></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>IndexController.java</p><pre><code>@Controllerpublic class IndexController {    /**     * 路由 /index2     * 返回 index2 这里默认配置自动映射到目录(templages/)下的index2.html     */    @GetMapping("/index2")    public String index(Model model){        model.addAttribute("content","hello thymeleaf");        return "index2";    }}</code></pre><p>index.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Thymeleaf&lt;/title&gt;&lt;/head&gt;&lt;body&gt;this is welcome &lt;span th:text="${content}"&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p><img src="/2020/08/1597306338000/1597306338000/20200813175610.png" alt="20200813175610"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SpringBoot，thymeleaf
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyCat配置 一</title>
    <link href="https://www.zhuqiaolun.com/2020/08/1596694227482/1596694227482/"/>
    <id>https://www.zhuqiaolun.com/2020/08/1596694227482/1596694227482/</id>
    <published>2020-08-06T06:10:27.000Z</published>
    <updated>2020-08-06T07:58:11.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>分别创建三个数据库：testdb_0，testdb_1，testdb_2</p><h3 id="MyCat配置"><a href="#MyCat配置" class="headerlink" title="MyCat配置"></a>MyCat配置</h3><p>server.xml配置不变，</p><pre><code>&lt;user name="root" defaultAccount="true"&gt;    &lt;property name="password"&gt;123456&lt;/property&gt;    &lt;property name="schemas"&gt;TESTDB&lt;/property&gt;&lt;/user&gt;</code></pre><p>schema.xml配置如下：</p><pre><code>&lt;!-- 设置表的存储方式.schema name="TESTDB" 与 server.xml中的 TESTDB 设置一致  --&gt;  &lt;schema name="TESTDB" checkSQLschema="true" sqlMaxLimit="100"&gt;      &lt;!-- 分片规则：sharding-by-intfile  --&gt;      &lt;table name="t_users" dataNode="node_db00,node_db01,node_db02" rule="sharding-by-intfile"&gt;&lt;/table&gt;&lt;/schema&gt;  &lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt;  &lt;dataNode name="node_db00" dataHost="dataHost01" database="testdb_0" /&gt;  &lt;dataNode name="node_db01" dataHost="dataHost01" database="testdb_1" /&gt;  &lt;dataNode name="node_db02" dataHost="dataHost01" database="testdb_2" /&gt; &lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt;  &lt;dataHost name="dataHost01" maxCon="1000" minCon="10" balance="1" writeType="0" dbType="mysql" dbDriver="native"&gt;          &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;          &lt;writeHost host="hostM1" url="127.0.0.1:3306" user="root" password="root"/&gt;&lt;/dataHost&gt;  </code></pre><p>rule.xml配置如下：</p><pre><code>&lt;tableRule name="sharding-by-intfile"&gt;    &lt;rule&gt;        &lt;!-- columns:对应需要进行匹配规则的字段  --&gt;          &lt;columns&gt;sex&lt;/columns&gt;        &lt;algorithm&gt;hash-int&lt;/algorithm&gt;    &lt;/rule&gt;&lt;/tableRule&gt;&lt;function name="hash-int" class="io.mycat.route.function.PartitionByFileMap"&gt;    &lt;property name="mapFile"&gt;partition-hash-int.txt&lt;/property&gt;    &lt;property name="type"&gt;1&lt;/property&gt;     &lt;property name="defaultNode"&gt;0&lt;/property&gt;&lt;/function&gt;</code></pre><p>说明：函数配置中，type默认值为0，0表示Integer，非零表示String， 所有的节点配置都是从defaultNode=0开始，及0代表第一个节点。<br>defaultNode 默认节点:小于0表示不设置默认节点，大于等于0表示设置默认节点,默认节点的作用;<br>枚举分片时,如果碰到不识别的枚举值，就让它路由到默认节点;<br>如果不配置默认节点（defaultNode值小于0表示不配置默认节点），碰到不识别的枚举值就会报错;</p><p>partition-hash-int.txt</p><pre><code>#10000=0#10010=1m=1w=2</code></pre><p>说明：[sex=m]的数据放入node_db01，[sex=w]的数据放入node_db02，其它的数据[mw]放入node_db00，<br>0：表示第一个dataNode[name=node_db00]节点，以下标选择<br>1：表示第二个dataNode[name=node_db01]节点，以下标选择<br>2：表示第三个dataNode[name=node_db02]节点，以下标选择<br>注意以中文的分片规则，后续，</p><p>修改配置完成后，重启mycat服务，通过mycat插入数据即可看到结果</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><pre><code>mysql -uroot -p123456 -P8066 -h 127.0.0.1</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151330.png" alt="20200806151330"></p><pre><code>mysql&gt; show databases;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151352.png" alt="20200806151352"></p><pre><code>mysql&gt;  use TESTDB;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151541.png" alt="20200806151541"></p><pre><code>mysql&gt; DROP TABLE IF EXISTS `t_users`;mysql&gt; CREATE TABLE `t_users` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `name` varchar(50) DEFAULT NULL,   `sex` varchar(10) DEFAULT NULL,   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151603.png" alt="20200806151603">   </p><pre><code>mysql&gt; set names gbk;mysql&gt; insert into t_users(`name`,sex)values('张三','m');mysql&gt; insert into t_users(`name`,sex)values('李四','w');mysql&gt; insert into t_users(`name`,sex)values('王五','mw');</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151636.png" alt="20200806151636">  </p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>分片实现<br><img src="/2020/08/1596694227482/1596694227482/20200806155344.png" alt="20200806155344"></p><p>数据结果<br><img src="/2020/08/1596694227482/1596694227482/20200806154946.png" alt="20200806154946"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      MyCat分库
    
    </summary>
    
    
      <category term="MyCat配置" scheme="https://www.zhuqiaolun.com/categories/MyCat%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="MyCat" scheme="https://www.zhuqiaolun.com/tags/MyCat/"/>
    
  </entry>
  
  <entry>
    <title>在Windows10中安装MyCat环境</title>
    <link href="https://www.zhuqiaolun.com/2020/08/1596610285582/1596610285582/"/>
    <id>https://www.zhuqiaolun.com/2020/08/1596610285582/1596610285582/</id>
    <published>2020-08-05T06:51:25.000Z</published>
    <updated>2020-08-06T06:04:58.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="http://www.mycat.org.cn/" target="_blank" rel="noopener">Mycat数据库分库分表中间件</a>，点击下载1.6.7.3 的Windows稳定版本<br>链接：<a href="http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-win.tar.gz" target="_blank" rel="noopener">http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-win.tar.gz</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>目录如下：<br><img src="/2020/08/1596610285582/1596610285582/20200806110425.png" alt="20200806110425"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于软件本身就是绿色版本，只需放在指定目录下即可，</p><pre><code>mycat：    bin：命令文件    catlet：空的,扩展    conf：配置文件(server.xml,schema.xml,rule.xml等)    lib：依赖的jar包    logs：启动日志</code></pre><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在DB中创建数据库（test_mycat），创建表（t_user）<br><img src="/2020/08/1596610285582/1596610285582/20200806113753.png" alt="20200806113753"></p><h4 id="修改xml配置"><a href="#修改xml配置" class="headerlink" title="修改xml配置"></a>修改xml配置</h4><p>server.xml，rule.xml 不改变，<br>schema.xml改动如下：</p><pre><code>&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;    &lt;!-- 设置表的存储方式.schema name="TESTDB" 与 server.xml中的 TESTDB 设置一致  --&gt;      &lt;schema name="TESTDB" checkSQLschema="true" sqlMaxLimit="100"&gt;        &lt;!-- auto sharding by id (long) --&gt;        &lt;table name="t_user" dataNode="dn1"/&gt;    &lt;/schema&gt;    &lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt;      &lt;dataNode name="dn1" dataHost="localhost1" database="test_mycat" /&gt;    &lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt;      &lt;dataHost name="localhost1" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100"&gt;        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;        &lt;!-- can have multi write hosts --&gt;        &lt;writeHost host="hostM1" url="127.0.0.1:3306" user="root"  password="root"&gt;        &lt;/writeHost&gt;    &lt;/dataHost&gt;&lt;/mycat:schema&gt;</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h4><p>双击bin目录下的startup_nowrap.bat文件<br><img src="/2020/08/1596610285582/1596610285582/20200806112437.png" alt="20200806112437"></p><p>出现以下界面提示则启动成功：<br><img src="/2020/08/1596610285582/1596610285582/20200806112633.png" alt="20200806112633"></p><h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><p>以管理员的模式打开CMD命令,进入根目录下<br><img src="/2020/08/1596610285582/1596610285582/20200806130746.png" alt="20200806130746"></p><h5 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h5><p><img src="/2020/08/1596610285582/1596610285582/20200806130757.png" alt="20200806130757"></p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p><img src="/2020/08/1596610285582/1596610285582/20200806135609.png" alt="20200806135609"></p><p>当出现此启动错误：<br><img src="/2020/08/1596610285582/1596610285582/20200806135125.png" alt="20200806135125"><br>则需要将 -XX:MaxPermSize=512M 移除，该参数在jdk1.8版本中已放弃使用，<br><img src="/2020/08/1596610285582/1596610285582/20200806135305.png" alt="20200806135305"></p><h5 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h5><pre><code>mycat.bat {     console :       Wrapper控制台    start :         服务启动    pause :         服务暂停    resume :        服务恢复    stop :          服务停止    restart :       服务重启    install :       服务安装    remove :        服务移除    status :        服务状态}</code></pre><h3 id="Navicat连接"><a href="#Navicat连接" class="headerlink" title="Navicat连接"></a>Navicat连接</h3><p>默认端口：8066<br>用户名：root<br>密码：server.xml的user配置，本次为 123456<br><img src="/2020/08/1596610285582/1596610285582/20200806114232.png" alt="20200806114232"></p><p>查看连接：<br><img src="/2020/08/1596610285582/1596610285582/20200806114126.png" alt="20200806114126"></p><p>查看数据：<br><img src="/2020/08/1596610285582/1596610285582/20200806130103.png" alt="20200806130103"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Windows10中安装MyCat环境
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装MyCat环境</title>
    <link href="https://www.zhuqiaolun.com/2020/08/1596536908607/1596536908607/"/>
    <id>https://www.zhuqiaolun.com/2020/08/1596536908607/1596536908607/</id>
    <published>2020-08-04T10:28:28.000Z</published>
    <updated>2020-08-06T03:03:12.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="http://www.mycat.org.cn/" target="_blank" rel="noopener">Mycat数据库分库分表中间件</a>，点击下载1.6.7.3 的Linux稳定版本<br>链接：<a href="http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz" target="_blank" rel="noopener">http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Linux中安装MyCat环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zhuqiaolun.com/categories/Linux/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 四 （SpringBoot调用）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/1595654393778/1595654393778/"/>
    <id>https://www.zhuqiaolun.com/2020/07/1595654393778/1595654393778/</id>
    <published>2020-07-25T05:19:53.000Z</published>
    <updated>2020-08-05T06:22:19.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka end --&gt;</span>      </span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  #  基本配置</span><br><span class="line"> kafka:</span><br><span class="line">   # 以逗号分隔的地址列表，用于建立与 Kafka 集群的初始连接 (kafka 默认的端口号为 9092)</span><br><span class="line">   bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">   # 定义生产者</span><br><span class="line">   producer:</span><br><span class="line">     client-id: kafka.client.id</span><br><span class="line">     # 发生错误后，消息重发的次数。</span><br><span class="line">     retries: 0</span><br><span class="line">     #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。</span><br><span class="line">     batch-size: 16384</span><br><span class="line">     # 设置生产者内存缓冲区的大小。</span><br><span class="line">     buffer-memory: 33554432</span><br><span class="line">     # 键的序列化方式</span><br><span class="line">     key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # 值的序列化方式</span><br><span class="line">     value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。</span><br><span class="line">     # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。</span><br><span class="line">     # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。</span><br><span class="line">     acks: 1</span><br><span class="line">   # 定义消费者</span><br><span class="line">   consumer:</span><br><span class="line">     # 自动提交的时间间隔 在 spring boot 2.X 版本中这里采用的是值的类型为 Duration 需要符合特定的格式，如 1S,1M,2H,5D</span><br><span class="line">     auto-commit-interval: 3S</span><br><span class="line">     # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span><br><span class="line">     # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span><br><span class="line">     # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录</span><br><span class="line">     auto-offset-reset: earliest</span><br><span class="line">     # 是否自动提交偏移量，默认值是 true,为了避免出现重复数据和数据丢失，可以把它设置为 false,然后手动提交偏移量</span><br><span class="line">     enable-auto-commit: true</span><br><span class="line">     # 键的反序列化方式</span><br><span class="line">     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">     # 值的反序列化方式</span><br><span class="line">     value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">   listener:</span><br><span class="line">     # 在侦听器容器中运行的线程数(消费者个数即可)</span><br><span class="line">     concurrency: 5</span><br><span class="line">     </span><br><span class="line">demon:</span><br><span class="line">  #消费者配置</span><br><span class="line">  mqConfig: </span><br><span class="line">    # 监听的主题topic</span><br><span class="line">    topics: test,first,second,third   </span><br><span class="line">    topic:</span><br><span class="line">      # 监听的主题first的消息执行类</span><br><span class="line">      first: com.demon.springbootkafka.listener.consumer.message.FirstMessage</span><br><span class="line">      # 监听的主题second的消息执行类</span><br><span class="line">      second: com.demon.springbootkafka.listener.consumer.message.SecondMessage</span><br></pre></td></tr></tbody></table></figure><h3 id="类配置"><a href="#类配置" class="headerlink" title="类配置"></a>类配置</h3><p>mq的消费者配置类：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @className: MqProperties.java</span><br><span class="line"> * @description:  mq的消费者配置类，映射 配置文件里面的值</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2020/6/16 18:00</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = "demon.mqConfig")</span><br><span class="line">@Data</span><br><span class="line">public class MqConsumerTopicConfig {</span><br><span class="line">    Map&lt;String,Class&lt;?&gt;&gt; topic;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>KafKaProducerService</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.service;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerService</span><br><span class="line"> * @Description: 生产者service</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">public interface KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息没有回执</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessage(String topic, String key, String data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息同步有阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws InterruptedException 异常</span><br><span class="line">     * @throws ExecutionException 异常</span><br><span class="line">     * @throws TimeoutException 异常</span><br><span class="line">     */</span><br><span class="line">    Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息异步无阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessageAsync(String topic, String key, String data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>KafKaProducerServiceImpl:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.service.impl;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.kafka.support.SendResult;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerServiceImpl</span><br><span class="line"> * @Description: 生产者service的实现，负责执行消息发送</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class KafKaProducerServiceImpl implements com.demon.springbootkafka.service.KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  构建待发送的消息</span><br><span class="line">     * @param topic topic</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data data</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    private ProducerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> getRecord(String topic, String key, String data){</span><br><span class="line">        if(key == null){</span><br><span class="line">            return  new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,data);</span><br><span class="line">        }else{</span><br><span class="line">            return new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,key,data);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessage(String topic, String key, String data){</span><br><span class="line">        kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException {</span><br><span class="line">        SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> stringStringSendResult = kafkaTemplate.send(getRecord(topic, key, data)).get(1, TimeUnit.SECONDS);</span><br><span class="line">        System.out.println(stringStringSendResult.getProducerRecord().timestamp());</span><br><span class="line">        return stringStringSendResult.getProducerRecord().timestamp();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessageAsync(String topic, String key, String data) {</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; sendResultListenableFuture = kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">        // 发送消息回调</span><br><span class="line">        //noinspection NullableProblems</span><br><span class="line">        sendResultListenableFuture.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() {</span><br><span class="line">            /** 发送成功回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> sendResultMap) {</span><br><span class="line">                log.debug("发送消息成功：" + sendResultMap);</span><br><span class="line">            }</span><br><span class="line">            /** 发送失败回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Throwable throwable) {</span><br><span class="line">                log.debug("发送消息失败："+ throwable.getMessage());</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者监听"><a href="#生产者监听" class="headerlink" title="生产者监听"></a>生产者监听</h3><p>KafkaSendResultHandler：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.producer;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line">import org.springframework.kafka.support.ProducerListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaSendResultHandler</span><br><span class="line"> * @Description: 发送消息结果回调</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:55</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaSendResultHandler implements ProducerListener {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSuccess(ProducerRecord producerRecord, RecordMetadata recordMetadata) {</span><br><span class="line">        log.info("发送消息监听成功 : " + producerRecord.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(ProducerRecord producerRecord, Exception exception) {</span><br><span class="line">        log.info("发送消息监听失败 : " + exception);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>KafkaConsumerService：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.config.MqConsumerTopicConfig;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConsumerService</span><br><span class="line"> * @Description: 消费者监听消息,通过类的反射执行topic消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 14:44</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaConsumerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private MqConsumerTopicConfig mqConsumerTopicConfig;</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = "#{'${demon.mqConfig.topics}'.split(',')}", groupId = "test-group")</span><br><span class="line">    public void receive(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        String topic = record.topic();</span><br><span class="line">        log.info("------ " + topic + " 消费者处理消息------");</span><br><span class="line">        try {</span><br><span class="line">            if (mqConsumerTopicConfig.getTopic().containsKey(topic)) {</span><br><span class="line">                String classPath = mqConsumerTopicConfig.getTopic().get(topic).getName();</span><br><span class="line">                try {</span><br><span class="line">                    Class<span class="php"><span class="meta">&lt;?</span>&gt; c1s = <span class="class"><span class="keyword">Class</span>.<span class="title">forName</span>(<span class="title">classPath</span>);</span></span></span><br><span class="line"><span class="php">                    <span class="comment">//判断是否有实现ConsumerMessageExecute消息处理接口，否则不予执行</span></span></span><br><span class="line"><span class="php">                    <span class="keyword">if</span> (c1s.getInterfaces().length &gt; <span class="number">0</span> &amp;&amp; c1s.getInterfaces()[<span class="number">0</span>].equals(ConsumerMessageExecute<span class="class">.<span class="keyword">class</span>)) </span>{</span></span><br><span class="line"><span class="php">                        <span class="comment">//获得Class的Method对象,参数为方法名,参数列表的类型Class对象</span></span></span><br><span class="line"><span class="php">                        Method method = c1s.getMethod(<span class="string">"execute"</span>, ConsumerRecord<span class="class">.<span class="keyword">class</span>);</span></span></span><br><span class="line"><span class="php">                        <span class="comment">//invoke方法，参数为cls实例对象，和想要调用的方法参数</span></span></span><br><span class="line"><span class="php">                        Boolean value = (Boolean) method.invoke(c1s.newInstance(), record);</span></span><br><span class="line"><span class="php">                        <span class="comment">//输出invoke方法的返回值</span></span></span><br><span class="line"><span class="php">                        System.out.println(<span class="string">"execute方法的返回值："</span> + value);</span></span><br><span class="line"><span class="php">                    } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                        log.error(<span class="string">"============ 调用class：{} 错误:{}"</span>, classPath, <span class="string">"此类没有实现 MessageExecute 接口！！！"</span>);</span></span><br><span class="line"><span class="php">                    }</span></span><br><span class="line"><span class="php">                } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">                    e.printStackTrace();</span></span><br><span class="line"><span class="php">                    log.error(<span class="string">"============ 调用class：{} 异常：{}"</span>, classPath, e);</span></span><br><span class="line"><span class="php">                }</span></span><br><span class="line"><span class="php">            } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                log.error(<span class="string">"============ {}不存在"</span>, topic);</span></span><br><span class="line"><span class="php">            }</span></span><br><span class="line"><span class="php">        } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">            e.printStackTrace();</span></span><br><span class="line"><span class="php">        }</span></span><br><span class="line"><span class="php">    }</span></span><br><span class="line"><span class="php">}</span></span><br></pre></td></tr></tbody></table></figure><p>ConsumerMessageExecute：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息执行统一接口</span><br><span class="line"> * @ClassName: MessageExecute</span><br><span class="line"> * @Description: 消息实现接口，必须实现此接口，否则无法执行消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/5/24 12:55</span><br><span class="line"> */</span><br><span class="line">public interface ConsumerMessageExecute {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消费者 消息执行方法</span><br><span class="line">     * @param record 消息体</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>FirstMessage:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: FirstMessage</span><br><span class="line"> * @Description: 监听topic【first】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:14</span><br><span class="line"> */</span><br><span class="line">public class FirstMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SecondMessage:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: MessageUrgent</span><br><span class="line"> * @Description: 监听topic【second】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:15</span><br><span class="line"> */</span><br><span class="line">public class SecondMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>SpringBootKafkaApplicationTests：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.demon.springbootkafka.service.KafKaProducerService;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootKafkaApplicationTests {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafKaProducerService kafKaProducerService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessage() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessage(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageAsync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessageAsync(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageSync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        JSONObject jsonObject = new JSONObject(true);</span><br><span class="line">        jsonObject.put("time",System.currentTimeMillis());</span><br><span class="line">        String data = jsonObject.toJSONString();</span><br><span class="line">        try {</span><br><span class="line">            kafKaProducerService.sendStandardMessageSync(topic, key, data);</span><br><span class="line">        } catch (InterruptedException | TimeoutException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>KafkaConfig:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.config;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClientConfig;</span><br><span class="line">import org.springframework.boot.autoconfigure.kafka.KafkaProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.core.KafkaAdmin;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConfig</span><br><span class="line"> * @Description: KafkaConfig 配置,操作topic</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 18:28</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaConfig {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaProperties kafkaProperties;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     创建一个kafka管理类，相当于rabbitMQ的管理类rabbitAdmin,</span><br><span class="line">     *     没有此bean无法自定义的使用adminClient创建topic</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public KafkaAdmin kafkaAdmin() {</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> props = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        //配置Kafka实例的连接地址</span><br><span class="line">        //kafka的地址，不是zookeeper</span><br><span class="line">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers().get(0));</span><br><span class="line">        return new KafkaAdmin(props);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     kafka客户端，在spring中创建这个bean之后可以注入并且创建topic,</span><br><span class="line">     *     用于集群环境，创建对个副本</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public AdminClient adminClient() {</span><br><span class="line">        return AdminClient.create(kafkaAdmin().getConfig());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SpringBootKafkaApplicationTests_topic:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.apache.kafka.clients.admin.*;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">class SpringBootKafkaApplicationTests_topic {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AdminClient adminClient;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void listTopics(){</span><br><span class="line">        try {</span><br><span class="line">            ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">            Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">            for (String topic : topics) {</span><br><span class="line">                System.out.println(topic);</span><br><span class="line">            }</span><br><span class="line">        } catch (InterruptedException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void createTopic() {</span><br><span class="line">        ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        NewTopic newTopic = new NewTopic("test1", 2, (short) 1);</span><br><span class="line">        topics.add(newTopic);</span><br><span class="line">        CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">        System.out.println( JSON.toJSONString(result));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void deleteTopics() {</span><br><span class="line">        DeleteTopicsResult deleteTopicsResult = adminClient.deleteTopics(Collections.singletonList("test1"));</span><br><span class="line">        System.out.println( JSON.toJSONString(deleteTopicsResult));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SpringBoot调用kafka服务
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 三 （Java普通调用）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/1595649722982/1595649722982/"/>
    <id>https://www.zhuqiaolun.com/2020/07/1595649722982/1595649722982/</id>
    <published>2020-07-25T04:02:02.000Z</published>
    <updated>2020-08-05T06:22:20.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Topic操作"><a href="#Topic操作" class="headerlink" title="Topic操作"></a>Topic操作</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.CommonClientConfigs;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.CreateTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.DeleteTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.ListTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.NewTopic;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Topic操作</span><br><span class="line"> */</span><br><span class="line">public class CreateTopics {</span><br><span class="line">private static AdminClient adminClient = null;</span><br><span class="line">/**</span><br><span class="line"> * 初始化adminClient</span><br><span class="line"> */</span><br><span class="line">@Before</span><br><span class="line">public  void getAdminClient() {</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");</span><br><span class="line">adminClient = AdminClient.create(props);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取所有Topic</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void getTopicList() {</span><br><span class="line">try {</span><br><span class="line">ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">for (String topic : topics) {</span><br><span class="line">System.out.println(topic);</span><br><span class="line">}</span><br><span class="line">} catch (InterruptedException | ExecutionException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Topic 创建了3个名为"first", "second","third"，分区数为1，复制因子为1的Topic.</span><br><span class="line"> * 创建完成，返回null</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public  void getCreateTopic() {</span><br><span class="line">ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span>();</span><br><span class="line">topics.add(new NewTopic("test", 4, (short) 1));</span><br><span class="line">        topics.add(new NewTopic("first", 4, (short) 1));</span><br><span class="line">topics.add(new NewTopic("second", 4, (short) 1));</span><br><span class="line">topics.add(new NewTopic("third", 4, (short) 1));</span><br><span class="line">CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">try {</span><br><span class="line">System.out.println(result.all().get());</span><br><span class="line">} catch (InterruptedException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} catch (ExecutionException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除Topic</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public  void getDeleteTopic() {</span><br><span class="line">DeleteTopicsResult deleteTopicsResult =adminClient.deleteTopics(Collections.singleton("test"));</span><br><span class="line">System.out.println(JSONObject.toJSONString(deleteTopicsResult));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 关闭连接</span><br><span class="line"> */</span><br><span class="line">@After</span><br><span class="line">public  void afterClass() {</span><br><span class="line">adminClient.close();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="普通生产者"><a href="#普通生产者" class="headerlink" title="普通生产者"></a>普通生产者</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void testProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("retries", 0);</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span>(props);</span><br><span class="line">    for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">        producer.send(new ProducerRecord&lt;String, String&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">    }</span><br><span class="line">    producer.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="事务生产者"><a href="#事务生产者" class="headerlink" title="事务生产者"></a>事务生产者</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void testTransactionProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("transactional.id", "my-transactional-id");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;&gt;</span>(props, new StringSerializer(),new StringSerializer());</span><br><span class="line">    producer.initTransactions();</span><br><span class="line">    try {</span><br><span class="line">        producer.beginTransaction();</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">3</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">            producer.send(new ProducerRecord&lt;&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        }</span><br><span class="line">        producer.commitTransaction();</span><br><span class="line">    } catch (ProducerFencedException | OutOfOrderSequenceException | AuthorizationException e) {</span><br><span class="line">        // We can't recover from these exceptions, so our only option is to close the</span><br><span class="line">        // producer and exit.</span><br><span class="line">        producer.close();</span><br><span class="line">    } catch (KafkaException e) {</span><br><span class="line">        // For all other exceptions, just abort the transaction and try again.</span><br><span class="line">        producer.abortTransaction();</span><br><span class="line">    } finally {</span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer {</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">// 定义kakfa 服务的地址，不需要将所有broker指定上 </span><br><span class="line">props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">// 制定consumer group </span><br><span class="line">props.put("group.id", "custom_group_id");</span><br><span class="line">// 是否自动确认offset </span><br><span class="line">props.put("enable.auto.commit", "true");</span><br><span class="line">// 自动确认offset的时间间隔 </span><br><span class="line">props.put("auto.commit.interval.ms", "1000");</span><br><span class="line">// key的序列化类</span><br><span class="line">props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">// value的序列化类 </span><br><span class="line">props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">// 定义consumer </span><br><span class="line">KafkaConsumer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> consumer = new KafkaConsumer<span class="tag">&lt;&gt;</span>(props);</span><br><span class="line">// 消费者订阅的topic, 可同时订阅多个 </span><br><span class="line">consumer.subscribe(Arrays.asList("test","first", "second","third"));</span><br><span class="line">while (true) {</span><br><span class="line">// 读取数据，读取超时时间为100ms </span><br><span class="line">ConsumerRecords<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> records = consumer.poll(Duration.ofMillis(100));</span><br><span class="line">for (ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> record : records)</span><br><span class="line">System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="集群使用"><a href="#集群使用" class="headerlink" title="集群使用"></a>集群使用</h3><p>在配置中将bootstrap.servers，修改以下方式即可，需要将所有broker指定写上<br> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props.put("bootstrap.servers", "127.0.0.1:9092,127.0.0.2:9092,127.0.0.3:9092");</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Java调用kafka服务
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 二 （集群）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/1595582052033/1595582052033/"/>
    <id>https://www.zhuqiaolun.com/2020/07/1595582052033/1595582052033/</id>
    <published>2020-07-24T09:14:12.000Z</published>
    <updated>2020-08-05T06:22:19.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br>下载完成后复制一式三份，完成集群部署至少需要三台以及三台以上的服务。</p><p>kafka版本:kafka_2.12-2.5.0<br>三台主机IP 127.0.0.1、127.0.0.2、127.0.0.3</p><h3 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka配置</h3><h4 id="第一台"><a href="#第一台" class="headerlink" title="第一台"></a>第一台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h4 id="第二台"><a href="#第二台" class="headerlink" title="第二台"></a>第二台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://127.0.0.2:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h4 id="第三台"><a href="#第三台" class="headerlink" title="第三台"></a>第三台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://127.0.0.3:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h3 id="zookeeper配置"><a href="#zookeeper配置" class="headerlink" title="zookeeper配置"></a>zookeeper配置</h3><p>zookeeper可统一配置，zookeeper.properties：<br> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line"># maxClientCnxns = 0 # 注释掉该配置</span><br><span class="line">admin.enableServer=false</span><br><span class="line">#设置连接参数，添加如下配置</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">#设置broker Id的服务地址</span><br><span class="line">server.1=127.0.0.1:2888:3888</span><br><span class="line">server.2=127.0.0.2:2888:3888</span><br><span class="line">server.3=127.0.0.3:2888:3888</span><br></pre></td></tr></tbody></table></figure><br>同时在zookeeper数据目录dataDir下添加id配置，在各台服务的zookeeper数据目录添加myid文件且无后缀名，写入各自服务broker.id属性值，<br><img src="/2020/07/1595582052033/1595582052033/20200725114405.png" alt="20200725114405"><br><img src="/2020/07/1595582052033/1595582052033/20200725114520.png" alt="20200725114520"><br><img src="/2020/07/1595582052033/1595582052033/20200725114552.png" alt="20200725114552"><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      kafka集群搭建 - 使用内置Zookeeper
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 一 （单机）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/1595581721604/1595581721604/"/>
    <id>https://www.zhuqiaolun.com/2020/07/1595581721604/1595581721604/</id>
    <published>2020-07-24T09:08:41.000Z</published>
    <updated>2020-08-05T06:22:19.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在刚开始学习Kafka的时候，安装Kafka时说Kafka依赖ZooKeeper，所以想要安装Kafka必须先安装ZooKeeper。<br>但是在下载Kafka的时候，官网上说，Kafka 0.5.x版本以上已经自带ZooKeeper，不需要自己安装ZooKeeper。<br>但在使用自带ZooKeeper也没有啥缺陷，反倒针对特定版本人家 Kafka 已经验证过其稳定性了。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br><img src="/2020/07/1595581721604/1595581721604/20200724172452.png" alt="20200724172452"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压文件<br>打开 kafka_2.12-2.5.0\config<br>从文本编辑器里打开 server.properties,添加或者修改内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listeners=PLAINTEXT://10.200.47.142:9092</span><br><span class="line">log.dirs=D:\\kafka_2.12-2.5.0\\logs\\kafka</span><br><span class="line">num.partitions=4</span><br><span class="line">zookeeper.connect=127.0.0.1:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><p>端口号可以被任意修改。如果端口号设置为小于1024，那么kafka需要以root身份启动，不指定的话，按照默认9092<br>【service.properties】port = 19092<br>【connect-distributed.properties 】bootstrap.servers=localhost:19092<br>【producer.properties 】bootstrap.servers=localhost:19092<br>【connect-standalone.properties 】bootstrap.servers=localhost:19092<br>【consumer.properties 】bootstrap.servers=localhost:19092</p><p>从文本编辑器里打开 zookeeper.properties,添加或者修改内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br></pre></td></tr></tbody></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在根目录下编写bat文件启动：</p><p>1.start-zookeeper.bat内容如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title zookeeper-21810 &amp;&amp; .\bin\windows\zookeeper-server-start .\config\zookeeper.properties"</span><br></pre></td></tr></tbody></table></figure><p>2.start-kafka.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title kafka_2.11-2.4.1-9092 &amp;&amp; .\bin\windows\kafka-server-start.bat .\config\server.properties"</span><br></pre></td></tr></tbody></table></figure><p>按照顺序启动，即可执行，</p><p><img src="/2020/07/1595581721604/1595581721604/20200724175212.png" alt="20200724175212"><br><img src="/2020/07/1595581721604/1595581721604/20200724175232.png" alt="20200724175232"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      kafka搭建 - 使用内置Zookeeper
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 三</title>
    <link href="https://www.zhuqiaolun.com/2020/06/1592899073321/1592899073321/"/>
    <id>https://www.zhuqiaolun.com/2020/06/1592899073321/1592899073321/</id>
    <published>2020-06-23T07:57:53.000Z</published>
    <updated>2020-08-05T06:22:19.862Z</updated>
    
    <content type="html"><![CDATA[<p>前面是使用的配置会导致JVM不断重启，需要加JVM参数以及设置，同时设置服务开机启动；</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新增配置参数如下：</p><pre><code>wrapper.jmx=falsewrapper.on_exit.0=SHUTDOWNwrapper.on_exit.default=RESTARTwrapper.ntservice.interactive = true# 服务开机启动wrapper.ntservice.starttype=AUTO_STARTwrapper.tray = true# 监测JVM死锁wrapper.java.monitor.deadlock = truewrapper.java.monitor.heap = truewrapper.java.monitor.gc.restart = true# Java Heap 初始化大小(单位：MB)wrapper.java.initmemory=128# Java Heap 最大值(单位：MB)wrapper.java.maxmemory=128# 32/64位选择，true为自动选择wrapper.java.additional.auto_bits=TRUE</code></pre><h3 id="检测JVM参数"><a href="#检测JVM参数" class="headerlink" title="检测JVM参数"></a>检测JVM参数</h3><p>可以用jps+jmap监测即可<br>jps:<br><img src="/2020/06/1592899073321/1592899073321/20200623161416.png" alt="20200623161416"><br>jmap -heap xxxxx<br><img src="/2020/06/1592899073321/1592899073321/20200623161506.png" alt="20200623161506"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 二</title>
    <link href="https://www.zhuqiaolun.com/2020/06/1592898236483/1592898236483/"/>
    <id>https://www.zhuqiaolun.com/2020/06/1592898236483/1592898236483/</id>
    <published>2020-06-23T07:43:56.000Z</published>
    <updated>2020-08-05T06:22:19.830Z</updated>
    
    <content type="html"><![CDATA[<p>前面在有Java环境的情况下的设置，现在假设我们不存在Java运行环境，也就是没有JRE与JDK，<br>所以需要拷贝java安装目录下的JRE（包含bin目录和相关lib）目录到需要的服务目录下</p><h3 id="拷贝JRE"><a href="#拷贝JRE" class="headerlink" title="拷贝JRE"></a>拷贝JRE</h3><p>JRE目录<br><img src="/2020/06/1592898236483/1592898236483/20200623154737.png" alt="20200623154737"><br>拷贝JRE目录到服务目录<br><img src="/2020/06/1592898236483/1592898236483/20200623154926.png" alt="20200623154926"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>利用拷贝过去的jre目录下的jar包和bin\java.exe，修改wrapper.java.command的值</p><pre><code>wrapper.java.command=../jre1.8.0_45/bin/java.exe</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 一</title>
    <link href="https://www.zhuqiaolun.com/2020/06/1592889892770/1592889892770/"/>
    <id>https://www.zhuqiaolun.com/2020/06/1592889892770/1592889892770/</id>
    <published>2020-06-23T05:24:52.000Z</published>
    <updated>2020-08-05T06:22:19.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>有时候我们希望我们java写的程序作为服务注册到系统中，Java Service Wrapper 是目前较为流行的将Java程序部署成Windows服务的解决方案</p><h3 id="下载serviceWrapper包"><a href="#下载serviceWrapper包" class="headerlink" title="下载serviceWrapper包"></a>下载serviceWrapper包</h3><p>网址：<a href="https://www.krenger.ch/blog/category/windows/" target="_blank" rel="noopener">https://www.krenger.ch/blog/category/windows/</a><br><img src="/2020/06/1592889892770/1592889892770/20200623133038.png" alt="20200623133038"></p><p>下载zip压缩文件<br><img src="/2020/06/1592889892770/1592889892770/20200623133123.png" alt="20200623133123"></p><h3 id="解压serviceWrapper包"><a href="#解压serviceWrapper包" class="headerlink" title="解压serviceWrapper包"></a>解压serviceWrapper包</h3><p>解压wrapper-windows-x86-64-3.5.43.zip<br><img src="/2020/06/1592889892770/1592889892770/20200623133832.png" alt="20200623133832"><br>解压出来的文件多，但有些不是必须要的</p><h3 id="注册一个简单的服务"><a href="#注册一个简单的服务" class="headerlink" title="注册一个简单的服务"></a>注册一个简单的服务</h3><p>准备一个目录 建议在非中文且不含有空格的目录下<br>目录结构如下：<br><img src="/2020/06/1592889892770/1592889892770/20200623134921.png" alt="20200623134921"><br>lang目录是存放支持其他语言的语言包，一般用不到<br>mylib目录是存放我们的程序包</p><p>然后将下载的wrapper目录下的文件拷贝到我们上面建的目录:</p><pre><code>···\bin\InstallTestWrapper-NT.bat           -&gt; D:\test\java-service-hello\bin\InstallTestWrapper-NT.bat···\bin\StartTestWrapper-NT.bat             -&gt; D:\test\java-service-hello\bin\StartTestWrapper-NT.bat···\bin\StopTestWrapper-NT.bat              -&gt; D:\test\java-service-hello\bin\StopTestWrapper-NT.bat···\bin\TestWrapper.bat                     -&gt; D:\test\java-service-hello\bin\TestWrapper.bat···\bin\UninstallTestWrapper-NT.bat         -&gt; D:\test\java-service-hello\bin\UninstallTestWrapper-NT.bat···\bin\wrapper.exe                         -&gt; D:\test\java-service-hello\bin\wrapper.exe···\conf\wrapper.conf                       -&gt; D:\test\java-service-hello\conf\wrapper.conf···\lib\wrapper.jar                         -&gt; D:\test\java-service-hello\lib\wrapper.jar···\lib\wrapper.dll                         -&gt; D:\test\java-service-hello\lib\wrapper.dll</code></pre><h3 id="java程序"><a href="#java程序" class="headerlink" title="java程序"></a>java程序</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.io.file.FileAppender;</span><br><span class="line">import cn.hutool.core.lang.UUID;</span><br><span class="line">public class JarHelloApp {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">while (true) {</span><br><span class="line">try {</span><br><span class="line">System.out.println("Hello World!");</span><br><span class="line">String str = UUID.fastUUID().toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line">//每隔3秒创建文件并写入内容</span><br><span class="line">FileAppender appender = new FileAppender(new File("D:\\test\\jar\\"+str+".txt"), 16, true);</span><br><span class="line">TimeUnit.SECONDS.sleep(3);</span><br><span class="line">appender.append(DateUtil.now());</span><br><span class="line">appender.flush();</span><br><span class="line">appender.toString();</span><br><span class="line">} catch (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>引入的依赖</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="java程序打包"><a href="#java程序打包" class="headerlink" title="java程序打包"></a>java程序打包</h3><p>由于采用eclipse所有打包流程：项目邮件 -&gt; Export -&gt; Java/Runnable JAR file -&gt; Next<br><img src="/2020/06/1592889892770/1592889892770/20200623142924.png" alt="20200623142924"></p><p>导出项目设置<br><img src="/2020/06/1592889892770/1592889892770/20200623143420.png" alt="20200623143420"></p><p>导出项目文件<br><img src="/2020/06/1592889892770/1592889892770/20200623144319.png" alt="20200623144319"></p><p>将程序打成的包以及自己程序依赖的包放到mylib<br><img src="/2020/06/1592889892770/1592889892770/20200623144449.png" alt="20200623144449"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>文件路径：D:\test\java-service-hello\conf\wrapper.conf<br>内容如下：</p><pre><code># jdk或者jre的java.exe路径，可通过环境变量获取wrapper.java.command=%JAVA_HOME%/bin/java.exe# wrapper.java.command=C:\Java\jre1.8.0_45\bin\java# 日志级别wrapper.java.command.loglevel=INFOwrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp# 执行的程序的main方法的类的路径wrapper.app.parameter.1=com.yetech.jar_hello.JarHelloApp# 依赖的包，第一个是wrapper包，第二个是自己打的包以及程序依赖包wrapper.java.classpath.1=../lib/wrapper.jarwrapper.java.classpath.2=../mylib/*.jar# 固定写法，依赖的wrapper的包wrapper.java.library.path.1=../lib# 日志配置 按照日期每天创建文件wrapper.logfile=../logs/wrapper.YYYYMMDD.logwrapper.logfile.rollmode=DATE# 服务名称以及描述信息wrapper.console.title=jar hello Serverwrapper.name=jarhelloserverwrapper.displayname=jar hello Serverwrapper.description=jar hello Server# 更多配置可对 jvm 配置</code></pre><h3 id="测试注册服务"><a href="#测试注册服务" class="headerlink" title="测试注册服务"></a>测试注册服务</h3><p>在服务目录下的bin目录下双击 TestWrapper.bat 文件，当程序执行正确时则表示可以注册服务<br>控制台测试<br><img src="/2020/06/1592889892770/1592889892770/20200623150257.png" alt="20200623150257"></p><h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><p>在服务目录下执行（管理员模式）</p><pre><code>注册服务命令bin\wrapper.exe -i ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151136.png" alt="20200623151136"><br>服务结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151201.png" alt="20200623151201"></p><pre><code>启动服务命令net start jarhelloserver或者bin\wrapper.exe -t ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151449.png" alt="20200623151449"><br>服务结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151518.png" alt="20200623151518"></p><pre><code>停止服务命令net stop jarhelloserver或者bin\wrapper.exe -p ..\conf\wrapper.conf</code></pre><p> cmd结果<br> <img src="/2020/06/1592889892770/1592889892770/20200623151717.png" alt="20200623151717"><br> 服务结果<br> <img src="/2020/06/1592889892770/1592889892770/20200623151743.png" alt="20200623151743">  </p><pre><code>删除服务命令sc delete jarhelloserver或者bin\wrapper.exe -r ..\conf\wrapper.conf</code></pre><p>  cmd结果<br>  <img src="/2020/06/1592889892770/1592889892770/20200623151956.png" alt="20200623151956"></p><h3 id="扩展-一"><a href="#扩展-一" class="headerlink" title="扩展 一"></a>扩展 一</h3><p>由于使用命名操作复杂，故在服务目录创建bat文件</p><p>install-service.bat</p><pre><code>@echo offstart cmd /c "title install-service &amp;&amp; bin\wrapper.exe -i ..\conf\wrapper.conf"</code></pre><p>uninstall-service.bat</p><pre><code>@echo offstart cmd /c "title uninstall-service &amp;&amp; bin\wrapper.exe -r ..\conf\wrapper.conf"</code></pre><p>start-service.bat</p><pre><code>@echo offstart cmd /c "title start-service &amp;&amp; bin\wrapper.exe -t ..\conf\wrapper.conf"</code></pre><p>stop-service.bat</p><pre><code>@echo offstart cmd /c "title stop-service &amp;&amp; bin\wrapper.exe -p ..\conf\wrapper.conf"</code></pre><h3 id="扩展-二"><a href="#扩展-二" class="headerlink" title="扩展 二"></a>扩展 二</h3><p>我们可以用上面的service wrapper的bin包中的bat文件进行服务操作<br>将下载解压后的wrapper-windows\bin中的部分文件复制到我们的服务\bin目录下<br><img src="/2020/06/1592889892770/1592889892770/20200623161942.png" alt="20200623161942"><br>我们只需要点击上面的bat文件即可实现上面的操作：</p><pre><code>安装服务：InstallTestWrapper-NT.bat查询服务：QueryTestWrapper-NT.bat开启服务：StartTestWrapper-NT.bat停止服务：StopTestWrapper-NT.bat测试服务：TestWrapper.bat卸载服务：UninstallTestWrapper-NT.bat</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置restTemplate访问https</title>
    <link href="https://www.zhuqiaolun.com/2020/06/1592881660483/1592881660483/"/>
    <id>https://www.zhuqiaolun.com/2020/06/1592881660483/1592881660483/</id>
    <published>2020-06-23T03:07:40.000Z</published>
    <updated>2020-08-05T06:22:19.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  不需要版本号  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.security.KeyManagementException;</span><br><span class="line">import java.security.KeyStoreException;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">/**</span><br><span class="line"> * @ClassName: RestConfig</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/1 19:12</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">class RestTemplateConfig {</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {</span><br><span class="line">        TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true;</span><br><span class="line">        SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();</span><br><span class="line">        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();</span><br><span class="line">        //使用httpclient的factory</span><br><span class="line">        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setHttpClient(httpClient);</span><br><span class="line">        return new RestTemplate(requestFactory);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootApiApplicationTests {</span><br><span class="line">    @Resource</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads(){</span><br><span class="line">        String url = "https://www.baidu.com/";</span><br><span class="line">        String resp = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2020/06/1592881660483/1592881660483/20200623115758.png" alt="20200623115758"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用restTemplate来访问https
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq学习三</title>
    <link href="https://www.zhuqiaolun.com/2020/06/1591944668470/1591944668470/"/>
    <id>https://www.zhuqiaolun.com/2020/06/1591944668470/1591944668470/</id>
    <published>2020-06-12T06:51:08.000Z</published>
    <updated>2020-08-05T06:22:20.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入的maven依赖"><a href="#引入的maven依赖" class="headerlink" title="引入的maven依赖"></a>引入的maven依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    addresses: 127.0.0.1:5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    connection-timeout: 15000</span><br><span class="line">    virtual-host: /</span><br><span class="line">    # 开启消息发送到交换器（Exchange）后触发回调</span><br><span class="line">    publisher-confirm-type: simple</span><br><span class="line">    # 开启消息发送到队列（Queue）后触发回调</span><br><span class="line">    publisher-returns: true</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        acknowledge-mode: manual  # 开启手动 ，否则confirm自动确认</span><br><span class="line">      simple:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        # 消息接收确认，可选模式：NONE（不确认）、AUTO（自动确认）、MANUAL（手动确认）</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">        # 最小线程数量</span><br><span class="line">        concurrency: 10</span><br><span class="line">        # 最大线程数量</span><br><span class="line">        max-concurrency: 10</span><br><span class="line">        # 每个消费者可能未完成的最大未确认消息数量</span><br><span class="line">        prefetch: 1</span><br><span class="line">    template:</span><br><span class="line">      # 交换机找不到QUEUE时，会调用Basic.Return 命令将消息返回给生产者</span><br><span class="line">      mandatory: true</span><br></pre></td></tr></tbody></table></figure><h3 id="声明绑定关系"><a href="#声明绑定关系" class="headerlink" title="声明绑定关系"></a>声明绑定关系</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 初始化项目 就会创建 交换器，路由，队列，如果在服务中存在交换器的属性或者队列的属性不同，则会出现异常</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig {</span><br><span class="line"></span><br><span class="line">    private static final String PRIORITY_QUEUE_NAME = "priority.topic_demo";</span><br><span class="line">    private static final String PRIORITY_TOPIC_ROUTING_KEY = "priority.topic.routingKey";</span><br><span class="line">    private static final String PRIORITY_EXCHANGE_NAME = "priority.topic.exchange.name";</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明消息队列</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_QUEUE_NAME)</span><br><span class="line">    public Queue priorityTopicDemo(){</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> arguments = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        arguments.put("x-max-priority", 255);</span><br><span class="line">        return new Queue(PRIORITY_QUEUE_NAME,true, false, false,arguments);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明了一个Topic类型的交换机，durable是持久化（重启rabbitmq这个交换机不会被自动删除）</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_EXCHANGE_NAME)</span><br><span class="line">    public Exchange priorityTopicExchangeName(){</span><br><span class="line">        return ExchangeBuilder.topicExchange(PRIORITY_EXCHANGE_NAME).durable(true).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明队列和交换机绑定关系，并且指定RoutingKey</span><br><span class="line">     * @param queue 队列</span><br><span class="line">     * @param exchange 交换机</span><br><span class="line">     * @return  返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding queueBindingTopic(@Qualifier(PRIORITY_QUEUE_NAME) Queue queue,@Qualifier(PRIORITY_EXCHANGE_NAME) Exchange exchange){</span><br><span class="line">        return BindingBuilder.bind(queue).to(exchange).with(PRIORITY_TOPIC_ROUTING_KEY).noargs();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloSender {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过exchange和routingKey的方式</span><br><span class="line">     * rabbitTemplate.sendAndReceive(String exchange, String routingKey, Message message)</span><br><span class="line">     * @param messageId  消息ID</span><br><span class="line">     * @param exchange  交换机</span><br><span class="line">     * @param routingKey 路由</span><br><span class="line">     * @param priority 优先级</span><br><span class="line">     * @param content 内容</span><br><span class="line">     */</span><br><span class="line">    public void sendAndReceive(String messageId, String exchange, String routingKey, Integer priority, String content) {</span><br><span class="line">        Message message = MessageBuilder.withBody(content.getBytes(Charset.forName("UTF-8")))</span><br><span class="line">              .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class="line">              .setMessageId(messageId)</span><br><span class="line">              .setPriority(priority)</span><br><span class="line">              .build();</span><br><span class="line">        CorrelationData correlationData = new CorrelationData();</span><br><span class="line">        correlationData.setId(messageId);</span><br><span class="line">        this.rabbitTemplate.convertAndSend(exchange, routingKey, message,correlationData);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloReceiver {</span><br><span class="line">      /**</span><br><span class="line">        * @param message 队列消息对象</span><br><span class="line">        */</span><br><span class="line">       @RabbitListener(queues = TopicData.PRIORITY_QUEUE_NAME)</span><br><span class="line">       public void queueNameTest1(Channel channel, Message message) {</span><br><span class="line">           try {</span><br><span class="line">               String stringBuilder = "消息ID: " + message.getMessageProperties().getMessageId() + "；" +</span><br><span class="line">                       "优先级: " + message.getMessageProperties().getPriority() + "；" +</span><br><span class="line">                       "消息内容: " + new String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">               //告诉服务器收到这条消息 已经被我消费了 可以在队列删掉 这样以后就不会再发了 否则消息服务器以为这条消息没处理掉 后续还会在发</span><br><span class="line">               channel.basicAck(message.getMessageProperties().getDeliveryTag(),true);</span><br><span class="line">               log.info(stringBuilder);</span><br><span class="line">           } catch (IOException e) {</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               try {</span><br><span class="line">                   //当发生异常时丢弃这条消息，或者 另行处理</span><br><span class="line">                   channel.basicNack(message.getMessageProperties().getDeliveryTag(), false,false);</span><br><span class="line">                   System.out.println("receiver fail");</span><br><span class="line">               } catch (IOException e1) {</span><br><span class="line">                   e1.printStackTrace();</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>自定义 RabbitTemplate.ConfirmCallback 实现类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitConfirmCallBack implements RabbitTemplate.ConfirmCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void confirm(CorrelationData correlationData, boolean ack, String cause) {</span><br><span class="line">        log.info("收到回调，成功发送到broker");</span><br><span class="line">        log.info("消息唯一标识: {}", correlationData.getId());</span><br><span class="line">        log.info("确认状态: {}", ack);</span><br><span class="line">        log.info("造成原因: {}", cause);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自定义 RabbitTemplate.ConfirmCallback 实现类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitReturnCallback  implements RabbitTemplate.ReturnCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {</span><br><span class="line">        log.info("收到回调，交换机找不到队列");</span><br><span class="line">        log.info("消息主体: {}", message);</span><br><span class="line">        log.info("回复编码: {}", replyCode);</span><br><span class="line">        log.info("回复内容: {}", replyText);</span><br><span class="line">        log.info("交换器: {}", exchange);</span><br><span class="line">        log.info("路由键: {}", routingKey);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加回调，配置 rabbitTemplate</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class RabbitTemplateInitializingBean implements InitializingBean {</span><br><span class="line"></span><br><span class="line">    private final RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet(){</span><br><span class="line">        rabbitTemplate.setConfirmCallback(new RabbitConfirmCallBack());</span><br><span class="line">        rabbitTemplate.setReturnCallback(new RabbitReturnCallback());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootRabbitmqExampleApplicationTest {</span><br><span class="line">    @Resource</span><br><span class="line">    private HelloSender helloSender;</span><br><span class="line">    @Test</span><br><span class="line">    void content(){</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        int number = 1;</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">number</span> ; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">messageId</span> = <span class="string">UUID.randomUUID().toString().replace(</span>"<span class="attr">-</span>","");</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">exchange</span> = <span class="string">"priority.topic.exchange.name"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">routingKey</span> = <span class="string">"priority.topic.routingKey"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">Integer</span> <span class="attr">priority</span> = <span class="string">r.nextInt(255);</span></span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">content</span> = <span class="string">"这是第["</span>+<span class="attr">i</span>+"]个消息";</span></span><br><span class="line"><span class="tag">            <span class="attr">helloSender.sendAndReceive</span>(<span class="attr">messageId</span>, <span class="attr">exchange</span>, <span class="attr">routingKey</span>, <span class="attr">priority</span>, <span class="attr">content</span>);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure><p>结果：<br><img src="/2020/06/1591944668470/1591944668470/20200612180958.png" alt="20200612180958"></p><p>当删除交换机时的执行错误<br><img src="/2020/06/1591944668470/1591944668470/20200615110247.png" alt="20200615110247"></p><p>当删除队列时的执行错误<br><img src="/2020/06/1591944668470/1591944668470/20200615111036.png" alt="20200615111036"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用交换机topic+routingKey的模式
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMq" scheme="https://www.zhuqiaolun.com/tags/RabbitMq/"/>
    
  </entry>
  
</feed>
