<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demon - 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhuqiaolun.com/"/>
  <updated>2020-05-25T07:48:51.670Z</updated>
  <id>https://zhuqiaolun.com/</id>
  
  <author>
    <name>ZhuQiaoLun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Linux中安装nginx环境</title>
    <link href="https://zhuqiaolun.com/2020/05/25/hello10/"/>
    <id>https://zhuqiaolun.com/2020/05/25/hello10/</id>
    <published>2020-05-25T03:19:31.000Z</published>
    <updated>2020-05-25T07:48:51.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><p>nginx 官网下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a><br>nginx 文件下载地址：<a href="https://nginx.org/download/" target="_blank" rel="noopener">https://nginx.org/download/</a></p><div><left>    <p>下载稳定版本</p>    <img title="" alt="20200525112627" src="/images/hello10/20200525112627.png" /></left><div><h3 id="上传nginx"><a href="#上传nginx" class="headerlink" title="上传nginx"></a>上传nginx</h3><pre><code>mkdir /usr/local/software           # 创建软件安装目录cd /usr/local/software              # 进入软件安装目录rz                                  # 上传nginx文件，需要安装 yum install lrzszll                                  # 查看上传文件tar -zxvf nginx-1.18.0.tar.gz       # 解压文件到当前目录</code></pre><div><left>    <img title="" alt="20200525130653" src="/images/hello10/20200525130653.png" /></left><div><h3 id="检测nginx环境"><a href="#检测nginx环境" class="headerlink" title="检测nginx环境"></a>检测nginx环境</h3><p>在安装nginx前首先要确认系统中安装了gcc、zlib 、zlib-devel、pcre、pcre-devel、openssl、openssl-devel<br>Linux下检查是否安装过某软件包：</p><pre><code>yum list installed | grep gcc                     # 查看是否安装了gccyum list installed | grep pcreyum list installed | grep pcre-develyum list installed | grep zlibyum list installed | grep zlib-develyum list installed | grep opensslyum list installed | grep openssl-devel      </code></pre><div><left>    <img title="" alt="20200525132249" src="/images/hello10/20200525132249.png" /></left><div>在此发现只安装了gcc和openssl，其他都没有安装，所以需要安装前置环境，输入以下命令：<pre><code>yum -y install zlib zlib-devel pcre pcre-devel openssl openssl-devel   # 一键安装</code></pre><div><left>    <img title="" alt="20200525133307" src="/images/hello10/20200525133307.png" /></left><div>至此前置软件安装结束，下面进入正式安装nginx<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>cd /usr/local/software/nginx-1.18.0             # 进入nginx的安装根目录</code></pre><div><left><img title="" alt="20200525133513" src="/images/hello10/20200525133513.png" /></left><div><h4 id="配置nginx安装目录"><a href="#配置nginx安装目录" class="headerlink" title="配置nginx安装目录"></a>配置nginx安装目录</h4><pre><code>./configure --prefix=/usr/local/nginx           # 配置nginx安装目录，执行完成后不会产生nginx目录</code></pre><div><left><p>执行完成后会出现一个 Makefile 的文件</p><img title="" alt="20200525134359" src="/images/hello10/20200525134359.png" /></left><div>   <h4 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h4><pre><code>make &amp;&amp; make install                             # 编译、安装，执行完成后会产生nginx目录cd /usr/local/nginx/                             # 进入nginx目录</code></pre><div><left><p>nginx目录内容</p><img title="" alt="20200525143235" src="/images/hello10/20200525143235.png" /></left><div>  <h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><pre><code>./sbin/nginx -t</code></pre><div><left><p>出现 test is successful 表示安装成功，同时会生成一些文件</p><img title="" alt="20200525144949" src="/images/hello10/20200525144949.png" /></left><div> <h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre><code>cd /usr/local/nginx/sbin                        # 进入启动目录./nginx                                         # 启动nginx，默认读取 /usr/local/nginx/conf 目录下的 nginx.conf 配置文件ps -ef | grep nginx                             # 查看nginx是否启动</code></pre><div><left><p>当出现 worker process 则表示运行成功</p><img title="" alt="20200525145522" src="/images/hello10/20200525145522.png" /></left><div> 另 执行命令： ps -A | grep nginx ，如果返回结果的话，也说明有nginx在运行，服务已经启动<div><left><img title="" alt="20200525150655" src="/images/hello10/20200525150655.png" /></left><div> <h3 id="访问nginx"><a href="#访问nginx" class="headerlink" title="访问nginx"></a>访问nginx</h3><pre><code>curl http://localhost                           # 默认端口为：80</code></pre><div><left><p>当出现 Welcome to nginx! 则表示访问成功</p><img title="" alt="20200525150656" src="/images/hello10/20200525150656.png" /></left><div> <h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><pre><code>cd /usr/local/nginx/conf/                       # 进入nginx配置文件目录vim nginx.conf                                  # 进入编辑文件模式</code></pre><div><left><img title="" alt="20200525152109" src="/images/hello10/20200525152109.png" /></left><div> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    autoindex on; #打开目录列表</span><br><span class="line">    autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位</span><br><span class="line">    autoindex_localtime on; #显示文件服务器时间，off显示GMT时间</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><left><p>修改完成后使用 /usr/local/nginx/sbin/nginx -t 命令检测语句是否修改正确，如出现 test is successful，则表示正确</p><img title="" alt="20200525152320" src="/images/hello10/20200525152320.png" /><p>接着使用 /usr/local/nginx/sbin/nginx 启动服务即可 </p></left><div> <h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><pre><code>/usr/local/nginx/sbin/nginx                     # 启动服务/usr/local/nginx/sbin/nginx -s stop             # 停止服务/usr/local/nginx/sbin/nginx -s reload           # 重启服务/usr/local/nginx/sbin/nginx -t                  # 检测语句</code></pre><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      在Linux中安装Nginx环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://zhuqiaolun.com/categories/Linux/"/>
    
    
      <category term="安装软件" scheme="https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使本地git与Github连接</title>
    <link href="https://zhuqiaolun.com/2020/05/24/hello9/"/>
    <id>https://zhuqiaolun.com/2020/05/24/hello9/</id>
    <published>2020-05-24T08:32:45.000Z</published>
    <updated>2020-05-24T12:57:49.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建github账号"><a href="#创建github账号" class="headerlink" title="创建github账号"></a>创建github账号</h3><p>在 <a href="https://github.com/join?source=login" target="_blank" rel="noopener">github</a> 中创建一个账号，如有账号则不需创建</p><h3 id="配置github账户"><a href="#配置github账户" class="headerlink" title="配置github账户"></a>配置github账户</h3><p>安装成功后打开Git Bash Here，执行命令 git config –global -e 操作进入全局配置文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></table></figure><p>按 i 进行编辑以下内容：</p><pre><code>[user]name = zhuqiaolun     # github的Usernameemail =zhuqlchina@163.com     # github的Email</code></pre><p>按下ESC，输入 :wq 保存退出</p><p>输入以下命令禁用自动转换，防止 Git 提交时报错warning: LF will be replaced by CRLF in</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><p>输入以下命令查看配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><h3 id="生成ssh认证"><a href="#生成ssh认证" class="headerlink" title="生成ssh认证"></a>生成ssh认证</h3><p>输入以下命令，回车会让你输入存放保存ssh key的地址，它给了一个默认地址就是括号了那里，再回车就是你选择了默认地址，<br>然后会让你输入密码并且确认密码，ok生成了，过程如下图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;zhuqlchina@163.com&quot;            # github的Email</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524170915" src="/images/hello9/20200524170915.png" /></left><left>    <p>按照你存放ssk key的地址，去复制key，比如我的在下图这个位置，打开id_rsa.pub,复制里面的key</p>    <img title="" alt="20200524182540" src="/images/hello9/20200524182540.png" /></left><div><h3 id="配置ssh认证"><a href="#配置ssh认证" class="headerlink" title="配置ssh认证"></a>配置ssh认证</h3><p>登录 <a href="https://github.com/login" target="_blank" rel="noopener">github</a>  ,setting -&gt; SSH and GPG keys -&gt; new SSH key</p><div><left>    <img title="" alt="20200524183321" src="/images/hello9/20200524183321.png" /></left><left>    <p>输入key后 点击 Add SSH key 完成</p>    <img title="" alt="20200524183322" src="/images/hello9/20200524183322.png" /></left><div><h3 id="验证ssh认证"><a href="#验证ssh认证" class="headerlink" title="验证ssh认证"></a>验证ssh认证</h3><p>在git bash 下输入命令，如在前面设置过密码则会提示输入密码，那输入设置的密码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524183707" src="/images/hello9/20200524183707.png" /></left><div><h3 id="拉去github文件到本地仓库"><a href="#拉去github文件到本地仓库" class="headerlink" title="拉去github文件到本地仓库"></a>拉去github文件到本地仓库</h3><div><p>选好本地仓库的目录，进去鼠标右键->Git Bash Here,输入以下命令拉去github上面的代码并进入拉去的代码目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zhuqiaolun&#x2F;spring-boot-code  # repositories的url</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524195556" src="/images/hello9/20200524195556.png" /></left></div><div><left>    <img title="" alt="20200524195557" src="/images/hello9/20200524195557.png" /></left></div>修改内容后则需要提交文件<h3 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h3><p>输入命令，查看修改了哪些文件，出现的红色字则为修改了内容的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524200142" src="/images/hello9/20200524200142.png" /></left></div>修改文件状态，将本地文件更新全部提交到暂缓区<p>1.全部修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .  # 更新文件状态，将文件添加到暂存区，注意后面一个点</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524203126" src="/images/hello9/20200524203126.png" /></left></div><p>2.修改只提交的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore   # 创建忽略提交的文件</span><br></pre></td></tr></table></figure><p>在里面添加 不必要提交的文件路径或者文件名，<br>过滤文件夹设置：<br>.idea 表示过滤这个文件夹<br>过滤文件设置：<br>*.iml</p><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .gitignore      # 更新单个文件状态</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524203127" src="/images/hello9/20200524203127.png" /></left></div><p></p>当前需要的文件变成绿色后，就可以提交了，先提交本地在提交远程，中间有可能要输入用户密码验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;相关注释文字&#39;        #提交到本地仓库</span><br><span class="line">git push origin master              #提交到远程仓库</span><br></pre></td></tr></table></figure><div><left>    <img title="" alt="20200524203743" src="/images/hello9/20200524203743.png" /></left></div>查看远程github<div><left>    <img title="" alt="20200524203946" src="/images/hello9/20200524203946.png" /></left></div><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>从本地上传代码到github上操作：<br>在git bash 下输入命令<br>1、仓库初始化<br>git init<br>2、连接仓库，没有则需新建<br>git remote add origin 仓库地址<br>3、查看状态<br>git status<br>4、将文件添加到暂存区<br>git add 状态里的新文件<br>5、将文件添加到仓库<br>git commit -m’相关注释文字’<br>6、将本地代码提交到远程仓库<br>git push origin master</p><p>ssh和https提交代码时其实都需要验证，ssh用的是key， https用的是登录名和密码的方式</p><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      使本地git与Github连接
    
    </summary>
    
    
      <category term="Windows10" scheme="https://zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="安装软件" scheme="https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="https://zhuqiaolun.com/2020/05/24/hello8/"/>
    <id>https://zhuqiaolun.com/2020/05/24/hello8/</id>
    <published>2020-05-24T06:01:36.000Z</published>
    <updated>2020-05-24T07:08:46.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>JAVA反射机制是在运行状态中，对于任意一个类。都能都知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称之为java语言的反射机制；</p><h3 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h3><p>反射类： java.lang.reflect<br>反编译： .class –à .java<br>通过反射机制可以访问java对象中的属性，方法，构造方法，自定义方法</p><h3 id="创建Class对象的三种方式"><a href="#创建Class对象的三种方式" class="headerlink" title="创建Class对象的三种方式"></a>创建Class对象的三种方式</h3><p>实例对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age ;</span><br><span class="line">   &#x2F;&#x2F; 构造方法（无参，有参）</span><br><span class="line">   &#x2F;&#x2F; get 方法··</span><br><span class="line">   &#x2F;&#x2F; set 方法··</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F; 自定义一个执行方法，方法名称：execute，</span><br><span class="line">   &#x2F;&#x2F; 参数1：name，类型：String.class</span><br><span class="line">   &#x2F;&#x2F; 参数2：age，类型：int.class</span><br><span class="line">   public String execute(String name, int age) &#123;</span><br><span class="line">       return &quot;姓名:&quot; + name + &quot;；年龄：&quot;+ age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Class对象的方式一"><a href="#创建Class对象的方式一" class="headerlink" title="创建Class对象的方式一"></a>创建Class对象的方式一</h4><p>对象.getClass()，获取Person类中的字节码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 &#x3D; new Person().getClass();</span><br></pre></td></tr></table></figure><h4 id="创建Class对象的方式二"><a href="#创建Class对象的方式二" class="headerlink" title="创建Class对象的方式二"></a>创建Class对象的方式二</h4><p>.class，一个明确的类，任意一个类型都有一个静态的class属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class2 &#x3D; Person.class;</span><br></pre></td></tr></table></figure><h4 id="创建Class对象的方式三-（推荐）"><a href="#创建Class对象的方式三-（推荐）" class="headerlink" title="创建Class对象的方式三 （推荐）"></a>创建Class对象的方式三 （推荐）</h4><p>必须是全路径名称，如：com.demon.hello.Person，如找不到则出现异常：ClassNotFoundException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Class&lt;?&gt; class3 &#x3D; Class.forName(classPath);</span><br><span class="line">  &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="获取类的实例"><a href="#获取类的实例" class="headerlink" title="获取类的实例"></a>获取类的实例</h3><p>获取class类型之后，可以创建该类型的对象，如：class3.newInstance()</p><h3 id="执行类的方法"><a href="#执行类的方法" class="headerlink" title="执行类的方法"></a>执行类的方法</h3><p>获得class类型的Method对象，根据方法参数定义填写参数类型<br>说明 参数类型与需要反射的类的参数类型保持一致，如int.class不要写成Integer.class<br>invoke方法，参数为cls实例对象，和想要调用的方法参数<br>输出invoke方法的返回值(返回值类型可为方法定义的返回值类型，强制转化即可)</p><pre><code>// 第一个参数为方法名,第二个参数为参数name的类型Class对象，第三个参数为参数age的类型Class对象Method method2 = class3.getMethod(&quot;execute&quot;, String.class, int.class);  Object obj = method1.invoke(c1s.newInstance(), &quot;张三&quot;, 30);System.out.println(&quot;execute方法的返回值：&quot; + value);   // 姓名:张三；年龄：30</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在获取创建类型的对象后，获取根据类的方法判断该执行类是否满足执行条件，如<br>是否有实现接口：c1s.getInterfaces()，返回是一个数组，<br>是否有注解类：c1s.getAnnotation(aCls.class)，参数为注解类.class，<br>更多查看 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener">api</a> ···</p><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      Java反射机制
    
    </summary>
    
    
      <category term="编程语言" scheme="https://zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装Java环境</title>
    <link href="https://zhuqiaolun.com/2020/05/23/hello7/"/>
    <id>https://zhuqiaolun.com/2020/05/23/hello7/</id>
    <published>2020-05-23T12:19:50.000Z</published>
    <updated>2020-05-24T09:14:37.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>由于是安装在服务器，所以只需jre即可，选择对应的系统版本点击<a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/server-jre-8u251-linux-x64.tar.gz" target="_blank" rel="noopener">下载</a>，没有登陆则跳转登陆页面，<br>此提供一位同学账号： `2028056560@qq.com/Oracle1234 方便使用 （感谢同学）</p><h3 id="上传JDK到服务器"><a href="#上传JDK到服务器" class="headerlink" title="上传JDK到服务器"></a>上传JDK到服务器</h3><p>安装命令 yum install -y lrzsz 工具，此为在Xshell下使用，rz:上传，sz:下载<br>在local下创建java目录，在弹出的窗口中选择要上传的jdk压缩文件，上传文件到Linux上java安装目录并解压，此时安装目录为：/usr/local/java/jdk1.8.0_231</p><pre><code>mkdir /use/local/java   # 创建目录cd /use/local/java  # 进入目录rz  # 上传文件tar -zxvf jdk-8u231-linux-x64.tar.gz    # 解压文件</code></pre><left>    <img title="" alt="20200523211855" src="/images/hello7/20200523211855.png" /></left><h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><p>使用 vim /etc/profile 命令进入编辑器，添加以下内容：</p><pre><code>set java environmentJAVA_HOME=/usr/local/java/jdk1.8.0_231JRE_HOME=$JAVA_HOME/jre     CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH</code></pre><left>    <img title="" alt="20200523212145" src="/images/hello7/20200523212145.png" />    <br/>使用 qw 对内容保存并退出<br/></left>使用 source /etc/profile 让内容生效 <h3 id="验证JDK环境变量"><a href="#验证JDK环境变量" class="headerlink" title="验证JDK环境变量"></a>验证JDK环境变量</h3><p>使用 java -version 查看环境是否安装完全<br><left><br>    <img title="" alt="20200523221606" src="/images/hello7/20200523221606.png" /><br></left></p><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      在Linux中安装Java环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://zhuqiaolun.com/categories/Linux/"/>
    
    
      <category term="安装软件" scheme="https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在idea中创建项目与github关联</title>
    <link href="https://zhuqiaolun.com/2020/05/22/hello6/"/>
    <id>https://zhuqiaolun.com/2020/05/22/hello6/</id>
    <published>2020-05-22T10:21:13.000Z</published>
    <updated>2020-05-24T08:56:27.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在IDEA中配置git"><a href="#在IDEA中配置git" class="headerlink" title="在IDEA中配置git"></a>在IDEA中配置git</h3><left>    在IDEA中设置Git，在File-->Setting->Version Control-->Git ，git安装环境变量成功会自动识别安装路径，点击Test，测试是否设置成功    <img title="" alt="20200522184825" src="/images/hello6/20200522184825.png"/></left><h3 id="在IDEA中连接github中心"><a href="#在IDEA中连接github中心" class="headerlink" title="在IDEA中连接github中心"></a>在IDEA中连接github中心</h3><left>    在IDEA中，File-->Setting->Version Control-->GibHub，点击右侧 " + " 按钮，建议在Server的中添加[https://]，Login为Github的账户，Password为Github的密码，点击Log In，成功则显示，    <img title="" alt="20200522190224" src="/images/hello6/20200522190224.png" /></left><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><left>    在IDEA中，VCS-->Import into Version Control-->Create Git Repository    <img title="" alt="20200522201913" src="/images/hello6/20200522201913.png" /></left><left>    在弹窗中选择项目所在的位置    <img title="" alt="20200522210238" src="/images/hello6/20200522210238.png" /></left><left>    点击OK，此时项目文件全部变成红色，同时在项目目录下生成一个隐藏的.git的文件目录    <img title="" alt="20200522211507" src="/images/hello6/20200522211507.png" /></left><h3 id="上传文件到本地仓库"><a href="#上传文件到本地仓库" class="headerlink" title="上传文件到本地仓库"></a>上传文件到本地仓库</h3><left>    在IDEA中，选择项目鼠标右键--> git --> Add，此时项目文件变成绿色，<span style="color:red">此时文件只处于本地库的暂存区，并没有同步到github版本库中</span>    <img title="" alt="20200522212221" src="/images/hello6/20200522212221.png" /></left><left>    <img title="" alt="20200522212334" src="/images/hello6/20200522212334.png" /></left><h3 id="同步到本地github版本"><a href="#同步到本地github版本" class="headerlink" title="同步到本地github版本"></a>同步到本地github版本</h3><left>    在IDEA中，选择项目鼠标右键--> git --> Commit Directory，出现提交弹窗，在弹窗勾掉.idea排除不必要的文件，在弹窗中输入Commit Message，否则不允许提交，点击commit，此时项目文件从暂存区真正进入本地github版本库中，项目文件变成白色    <img title="" alt="20200522213206" src="/images/hello6/20200522213206.png" /></left><left>    <img title="" alt="20200522214833" src="/images/hello6/20200522214833.png"/></left><left>    <img title="" alt="20200522215358" src="/images/hello6/20200522215358.png" /></left><h3 id="上传项目到GitHub中"><a href="#上传项目到GitHub中" class="headerlink" title="上传项目到GitHub中"></a>上传项目到GitHub中</h3><left>    在IDEA中，选择项目，VCS-->Import into Version Control-->Share Project on GitHub，在弹框中自动输入仓库名，输入描述，选择要Share的链接， 点击Share，即可上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示    <img title="" alt="20200522223429" src="/images/hello6/20200522223429.png" /></left><left>    <img title="" alt="20200522223534" src="/images/hello6/20200522223534.png" /></left><h3 id="同步结束"><a href="#同步结束" class="headerlink" title="同步结束"></a>同步结束</h3><left>    此至，可访问github上查看    <img title="" alt="20200522223633" src="/images/hello6/20200522223633.png" /></left><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      在idea中创建项目与github关联
    
    </summary>
    
    
      <category term="工具" scheme="https://zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://zhuqiaolun.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>在Windows上安装git-v2.26.2</title>
    <link href="https://zhuqiaolun.com/2020/05/22/hello5/"/>
    <id>https://zhuqiaolun.com/2020/05/22/hello5/</id>
    <published>2020-05-22T07:20:00.000Z</published>
    <updated>2020-05-24T09:35:54.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>下载并安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 进入自动识别系统， 点击自动弹出下载窗口<br><left><br>    <img title="" alt="20200524135151" src="/images/hello5/20200524135151.png" /><br></left></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载结束后，双击进行安装，如已安装点击运行则为修复版本<br><left><br>    <img title="" alt="20200524154530" src="/images/hello5/20200524154530.png" /><br></left><br><left><br>    <img title="" alt="20200524154634" src="/images/hello5/20200524154634.png" /><br></left><br><left><br>    是否显示桌面图，可不勾选，在安装结束后鼠标右键有选项显示<br>    <img title="" alt="20200524154845" src="/images/hello5/20200524154845.png" /><br></left><br><left><br>    <img title="" alt="20200524154934" src="/images/hello5/20200524154934.png" /><br></left><br><left><br>    <img title="" alt="20200524155123" src="/images/hello5/20200524155123.png" /><br></left><br><left><br>    此项完全不修改PATH变量值，仅在Git Bash中使用Git，绝对安全，所以cmd的git –version 无效<br>    <img title="" alt="20200524155406" src="/images/hello5/20200524155406.png" /><br></left><br><left><br>    Git命令与Linux一样，所以最好在OpenSSL中操作命令<br>    <img title="" alt="20200524155810" src="/images/hello5/20200524155810.png" /><br></left><br><left><br>    <img title="" alt="20200524155830" src="/images/hello5/20200524155830.png" /><br></left><br><left><br>    <img title="" alt="20200524155858" src="/images/hello5/20200524155858.png" /><br></left><br><left><br>    启用文件缓存<br>    <img title="" alt="20200524155947" src="/images/hello5/20200524155947.png" /><br></left><br><left><br>    <img title="" alt="20200524160043" src="/images/hello5/20200524160043.png" /><br></left><br><left><br>    在桌面或者文件目录空白处点击鼠标右键，选择 Git Bash Here 选项，即可打开命令界面<br>    <img title="" alt="20200524160313" src="/images/hello5/20200524160313.png" /><br></left></p><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      在Windows上安装git-v2.26.2
    
    </summary>
    
    
      <category term="Windows10" scheme="https://zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="安装软件" scheme="https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>(图)王者荣耀 - 武则天 - 女帝</title>
    <link href="https://zhuqiaolun.com/2020/05/21/hello4/"/>
    <id>https://zhuqiaolun.com/2020/05/21/hello4/</id>
    <published>2020-05-21T11:21:02.000Z</published>
    <updated>2020-05-24T08:12:36.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="历史上的TA"><a href="#历史上的TA" class="headerlink" title="历史上的TA"></a>历史上的TA</h3><p><a href="http://pvp.qq.com/story201904/index.html#/heroDetail/index/136" target="_blank" rel="noopener">武则天</a>，名曌(zhào)，这个字，是她自己为自己造的，取明月当空之意。中国历史上的女主不少，但称帝当皇帝的，只有她一个。武则天最初是唐太宗的才人，后与太宗的儿子李治相恋，李治登基后，封为昭仪，进一步被封为皇后。高宗多病，武则天临朝听政，宫中并称二圣。高宗死后，几经折腾，先后废掉两个儿子，武则天剪除了忠于李唐的朝中势力，改国号为周，自立为帝。武则天虽然任用酷吏，鼓励告密，杀了不少朝臣，但为政还算清明，在她当政期间，国家强盛，民众安泰。临死因传位问题无法解决，最终把天下又还给了李家。</p><h4 id="女帝"><a href="#女帝" class="headerlink" title="女帝"></a>女帝</h4><center>    <img title="武则天 - 女帝" alt="女帝" src="/images/hello4/136_2.jpg"/></center><h4 id="东方不败"><a href="#东方不败" class="headerlink" title="东方不败"></a>东方不败</h4><center>    <img title="武则天 - 东方不败" alt="东方不败" src="/images/hello4/136_3.jpg"/></center><h4 id="海洋之心"><a href="#海洋之心" class="headerlink" title="海洋之心"></a>海洋之心</h4><center>    <img title="武则天 - 海洋之心" alt="海洋之心" src="/images/hello4/136_4.jpg"/></center><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      王者荣耀,武则天,王者荣耀 - 武则天
    
    </summary>
    
    
      <category term="王者荣耀" scheme="https://zhuqiaolun.com/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="游戏" scheme="https://zhuqiaolun.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>(图)王者荣耀 - 嬴政 - 王者独尊</title>
    <link href="https://zhuqiaolun.com/2020/05/21/hello3/"/>
    <id>https://zhuqiaolun.com/2020/05/21/hello3/</id>
    <published>2020-05-21T11:13:38.000Z</published>
    <updated>2020-05-24T08:14:18.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="历史上的TA"><a href="#历史上的TA" class="headerlink" title="历史上的TA"></a>历史上的TA</h3><p><a href="https://pvp.qq.com/story201904/index.html#/heroDetail/index/110" target="_blank" rel="noopener">嬴政</a>又称秦王政，秦始皇。他是秦朝第一个皇帝，也是秦国的最后一个国王。关于他的出身，有很传奇的经历。他的父亲，本是秦国被遗弃在外的王子，因为赵国富商吕不韦的运作，才得以回国接班。所以，秦王政即位时，称吕不韦为亚父。但是，作为枭雄的嬴政，很快就运用铁腕，从吕不韦的手中夺过了大权，囚禁了信任宦官、秽乱宫廷的母后，放手任用法家信徒，把军国主义政治推向极致，终于灭了六国，一统天下。他是中国大一统帝制王朝的开创者，也是以吏为师的专制文化的倡导者。</p><h4 id="王者独尊"><a href="#王者独尊" class="headerlink" title="王者独尊"></a>王者独尊</h4><center>    <img title="嬴政 - 王者独尊" alt="王者独尊" src="/images/hello3/110_2.jpg"/></center><h4 id="摇滚巨星"><a href="#摇滚巨星" class="headerlink" title="摇滚巨星"></a>摇滚巨星</h4><center>    <img title="嬴政 - 摇滚巨星" alt="摇滚巨星" src="/images/hello3/110_3.jpg" /></center><h4 id="暗夜贵公子"><a href="#暗夜贵公子" class="headerlink" title="暗夜贵公子"></a>暗夜贵公子</h4><center>    <img title="嬴政 - 暗夜贵公子" alt="暗夜贵公子" src="/images/hello3/110_4.jpg" /></center><h4 id="优雅恋人"><a href="#优雅恋人" class="headerlink" title="优雅恋人"></a>优雅恋人</h4><center>    <img title="嬴政 - 优雅恋人" alt="优雅恋人" src="/images/hello3/110_5.jpg" /></center><h4 id="白昼王子"><a href="#白昼王子" class="headerlink" title="白昼王子"></a>白昼王子</h4><center>    <img title="嬴政 - 白昼王子" alt="白昼王子" src="/images/hello3/110_6.jpg" /></center><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      王者荣耀,嬴政,王者荣耀 - 嬴政
    
    </summary>
    
    
      <category term="王者荣耀" scheme="https://zhuqiaolun.com/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="游戏" scheme="https://zhuqiaolun.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于使用macleaya主题的修改</title>
    <link href="https://zhuqiaolun.com/2020/05/18/hello2/"/>
    <id>https://zhuqiaolun.com/2020/05/18/hello2/</id>
    <published>2020-05-18T02:50:24.000Z</published>
    <updated>2020-05-24T08:31:48.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a> 主题中选择 <a href="https://github.com/lsylovelmy/hexo-theme-macleaya" target="_blank" rel="noopener">macleaya</a> 主题并应用</p><h3 id="字段描述"><a href="#字段描述" class="headerlink" title="字段描述"></a>字段描述</h3><table style="text-align: left;">    <tr>        <th>title</th>        <th>网站标题</th>        <th>浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到</th>    </tr>    <tr>        <th>keywords</th>        <th>关键词</th>        <th>作用是告诉搜索引擎本页内容是围绕哪些词展开的</th>    </tr>    <tr>        <th>description</th>        <th>内容摘要</th>        <th>一个网页的简要内容概况，描述内容要和页面内容相关</th>    </tr>    <tr>        <th>type</th>        <th>网站内容</th>        <th>类型</th>    </tr>    <tr>        <th>date</th>        <th>网站内容</th>        <th>时间，由生成页面时自动生成，默认格式为：YYYY-MM-DD</th>    </tr        <tr>        <th>author</th>        <th>网站内容</th>        <th>作者</th>    </tr>    <tr>        <th>excerpt</th>        <th>网站内容</th>        <th>文章列表时的简介</th>    </tr>    <tr>        <th>categories</th>        <th>网站内容</th>        <th>类别</th>    </tr>    <tr>        <th>tags</th>        <th>网站内容</th>        <th>标签</th>    </tr></table><h3 id="内容修改"><a href="#内容修改" class="headerlink" title="内容修改"></a>内容修改</h3><h4 id="时间显示修改"><a href="#时间显示修改" class="headerlink" title="时间显示修改"></a>时间显示修改</h4><p>当前默认格式为：YYYY-MM-DD，想要修改为 YYYY-MM-DD HH:mm:ss，<br>则需在将date(page.date) 改为 date(page.date,’YYYY-MM-DD HH:mm:ss’)即可</p><h4 id="head-ejs修改"><a href="#head-ejs修改" class="headerlink" title="head.ejs修改"></a>head.ejs修改</h4><p>在应用过程中发现 layout/_partial/head.ejs的文件中page.content值与page.description重合，<br>当设置content字段时页面内容则变成content的内容，无法显示正常内容，<br>故 page.content 改为：page.description<br><left><br><img title="" alt="20200518131616" src="/images/hello2/20200518131616.png" /><br></left></p><h4 id="footer-ejs修改"><a href="#footer-ejs修改" class="headerlink" title="footer.ejs修改"></a>footer.ejs修改</h4><p>此部分修改一些页脚显示，显示自己需要显示的内容<br><left><br><img title="" alt="20200518181943" src="/images/hello2/20200518181943.png" /><br></left></p><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      关于使用macleaya主题的修改
    
    </summary>
    
    
      <category term="hexo" scheme="https://zhuqiaolun.com/categories/hexo/"/>
    
    
      <category term="hexo主题" scheme="https://zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhuqiaolun.com/2020/05/13/hello1/"/>
    <id>https://zhuqiaolun.com/2020/05/13/hello1/</id>
    <published>2020-05-13T04:27:02.000Z</published>
    <updated>2020-05-24T06:03:32.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="『你好-世界』"><a href="#『你好-世界』" class="headerlink" title="『你好,世界』"></a>『你好,世界』</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123; </span><br><span class="line">      System.out.println( <span class="string">"Hello, World!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><p>可以使用单引号’’，双引号”” 或三引号””” “””或’’’ ‘’’</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">"Hello, World!"</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Console.Write(<span class="string">"Hello, World!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Module MainFrm</span><br><span class="line">    Sub Main()</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello, World!"</span>)</span><br><span class="line">    End Sub</span><br><span class="line">End Module</span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert (<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></table></figure><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php    </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'Hello, world!'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名称 FROM 表名称</span><br></pre></td></tr></table></figure><h3 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;stdio.h&gt;</span></span><br><span class="line">int main(int argc,const char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>** end **</p>]]></content>
    
    <summary type="html">
    
      Hello World
    
    </summary>
    
    
      <category term="编程语言" scheme="https://zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="其他" scheme="https://zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
