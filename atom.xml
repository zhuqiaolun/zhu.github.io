<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhuqiaolun - 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuqiaolun.com/"/>
  <updated>2020-11-23T05:09:24.164Z</updated>
  <id>https://www.zhuqiaolun.com/</id>
  
  <author>
    <name>zhuqiaolun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>poi(3.17)解析excel - 2007 续.1</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1606102218582/1606102218582/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1606102218582/1606102218582/</id>
    <published>2020-11-23T03:30:18.000Z</published>
    <updated>2020-11-23T05:09:24.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析数据</span><br><span class="line">     */</span><br><span class="line">private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException {</span><br><span class="line">            List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;();</span><br><span class="line">            Workbook wb = null;</span><br><span class="line">            try {</span><br><span class="line">                wb = new XSSFWorkbook(input);</span><br><span class="line">                // 获得第一个Sheet1</span><br><span class="line">                Sheet sheet = wb.getSheetAt(0);</span><br><span class="line">                // 获得第一行表头，计算列数</span><br><span class="line">                int columnNum = sheet.getRow(0).getPhysicalNumberOfCells();</span><br><span class="line">                // 遍历数据</span><br><span class="line">                sheet.rowIterator().forEachRemaining(row -&gt;{</span><br><span class="line">                    Map<span class="tag">&lt;<span class="name">String,String</span>&gt;</span> jsonMap = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">                    for (int i = 0; i <span class="tag">&lt; <span class="attr">columnNum</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">Cell</span> <span class="attr">cell</span> = <span class="string">row.getCell(i);</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">String</span> <span class="attr">val</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">                        <span class="attr">if</span> (<span class="attr">cell</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                            // 首先强制设置成<span class="attr">string</span>类型</span></span><br><span class="line"><span class="tag">                            <span class="attr">cell.setCellType</span>(<span class="attr">CellType.STRING</span>);</span></span><br><span class="line"><span class="tag">                            // 再读取值</span></span><br><span class="line"><span class="tag">                            <span class="attr">val</span> = <span class="string">getXCellFormatValue(cell);</span></span></span><br><span class="line"><span class="tag">                        }</span></span><br><span class="line"><span class="tag">                        <span class="attr">jsonMap.put</span>(<span class="attr">String.valueOf</span>(<span class="attr">i</span>), <span class="attr">val</span>);</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                    <span class="attr">mapList.add</span>(<span class="attr">jsonMap</span>);</span></span><br><span class="line"><span class="tag">                });</span></span><br><span class="line"><span class="tag">            } <span class="attr">catch</span> (<span class="attr">FileNotFoundException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                <span class="attr">log.error</span>("找不到<span class="attr">xlsx</span>文件",<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">throw</span> <span class="attr">new</span> <span class="attr">IOException</span>(<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">            } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                <span class="attr">log.error</span>("解析<span class="attr">xlsx</span>文件错误",<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">throw</span> <span class="attr">new</span> <span class="attr">IOException</span>(<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">            } <span class="attr">finally</span> {</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span> (<span class="attr">wb</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                    <span class="attr">try</span> {</span></span><br><span class="line"><span class="tag">                        <span class="attr">wb.close</span>();</span></span><br><span class="line"><span class="tag">                    } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                }</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span> (<span class="attr">input</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                    <span class="attr">try</span> {</span></span><br><span class="line"><span class="tag">                        <span class="attr">input.close</span>();</span></span><br><span class="line"><span class="tag">                    } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                }</span></span><br><span class="line"><span class="tag">            }</span></span><br><span class="line"><span class="tag">            <span class="attr">return</span> <span class="attr">mapList</span>;</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/11/1605159781717/1605159781717/">poi(3.17)解析excel - 2007</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      excel工具
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zip4j - 压缩/解压（可设置密码）</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605683417659/1605683417659/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605683417659/1605683417659/</id>
    <published>2020-11-18T07:10:17.000Z</published>
    <updated>2020-11-18T07:33:54.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.lingala.zip4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zip4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import net.lingala.zip4j.ZipFile;</span><br><span class="line">import net.lingala.zip4j.exception.ZipException;</span><br><span class="line">import net.lingala.zip4j.model.FileHeader;</span><br><span class="line">import net.lingala.zip4j.model.ZipParameters;</span><br><span class="line">import net.lingala.zip4j.model.enums.CompressionLevel;</span><br><span class="line">import net.lingala.zip4j.model.enums.CompressionMethod;</span><br><span class="line">import net.lingala.zip4j.model.enums.EncryptionMethod;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: Zip4jUtil</span><br><span class="line"> * @Description: zip 工具</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class Zip4jUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据给定密码压缩文件(s)到指定目录</span><br><span class="line">     *</span><br><span class="line">     * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @param files 单个文件或文件数组</span><br><span class="line">     * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败.</span><br><span class="line">     */</span><br><span class="line">    public static boolean compress(String destFileName, String password, File... files) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            ZipParameters parameters = new ZipParameters();</span><br><span class="line">            // 压缩方式 8</span><br><span class="line">            parameters.setCompressionMethod(CompressionMethod.DEFLATE);</span><br><span class="line">            // 压缩级别 5</span><br><span class="line">            parameters.setCompressionLevel(CompressionLevel.NORMAL);</span><br><span class="line">            if (!(password == null || "".equals(password))) {</span><br><span class="line">                parameters.setEncryptFiles(true);</span><br><span class="line">                // 加密方式 0</span><br><span class="line">                parameters.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD);</span><br><span class="line">            }</span><br><span class="line">            ZipFile zipFile = new ZipFile(destFileName);</span><br><span class="line">            if (!(password == null || "".equals(password))) {</span><br><span class="line">                zipFile.setPassword(password.toCharArray());</span><br><span class="line">            }</span><br><span class="line">            for (File file : files) {</span><br><span class="line">                zipFile.addFile(file, parameters);</span><br><span class="line">            }</span><br><span class="line">            return true;</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据给定密码压缩文件(s)到指定位置</span><br><span class="line">     *</span><br><span class="line">     * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @param filePaths 单个文件路径或文件路径数组</span><br><span class="line">     * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败.</span><br><span class="line">     */</span><br><span class="line">    public static boolean compress(String destFileName, String password, String... filePaths) throws ZipException {</span><br><span class="line">        int size = filePaths.length;</span><br><span class="line">        File[] files = new File[size];</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">size</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">files</span>[<span class="attr">i</span>] = <span class="string">new</span> <span class="attr">File</span>(<span class="attr">filePaths</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">return</span> <span class="attr">compress</span>(<span class="attr">destFileName</span>, <span class="attr">password</span>, <span class="attr">files</span>);</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /**</span></span><br><span class="line"><span class="tag">     * 根据给定密码压缩文件(<span class="attr">s</span>)到指定位置</span></span><br><span class="line"><span class="tag">     *</span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">destFileName</span> 压缩文件存放绝对路径 <span class="attr">e.g.:D:</span>/<span class="attr">upload</span>/<span class="attr">zip</span>/<span class="attr">demo.zip</span></span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">password</span> 密码(可为<span class="attr">null</span>)</span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">folder</span> 文件夹路径</span></span><br><span class="line"><span class="tag">     * @<span class="attr">return</span> 最终的压缩文件存放的绝对路径,如果为<span class="attr">false</span>则说明压缩失败<span class="attr">.</span></span></span><br><span class="line"><span class="tag">     */</span></span><br><span class="line"><span class="tag">    <span class="attr">public</span> <span class="attr">static</span> <span class="attr">boolean</span> <span class="attr">compressFolder</span>(<span class="attr">String</span> <span class="attr">destFileName</span>, <span class="attr">String</span> <span class="attr">password</span>, <span class="attr">String</span> <span class="attr">folder</span>) <span class="attr">throws</span> <span class="attr">ZipException</span> {</span></span><br><span class="line"><span class="tag">        <span class="attr">File</span> <span class="attr">folderParam</span> = <span class="string">new</span> <span class="attr">File</span>(<span class="attr">folder</span>);</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">folderParam.isDirectory</span>()) {</span></span><br><span class="line"><span class="tag">            <span class="attr">File</span>[] <span class="attr">files</span> = <span class="string">folderParam.listFiles();</span></span></span><br><span class="line"><span class="tag">            <span class="attr">return</span> <span class="attr">compress</span>(<span class="attr">destFileName</span>, <span class="attr">password</span>, <span class="attr">files</span>);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">return</span> <span class="attr">false</span>;</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /**</span></span><br><span class="line"><span class="tag">     * 根据所给密码解压<span class="attr">zip</span>压缩包到指定目录</span></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 如果指定目录不存在,可以自动创建,不合法的路径将导致异常被抛出</span><br><span class="line">     *</span><br><span class="line">     * @param zipFile zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @return 解压后的文件数组</span><br><span class="line">     * @throws ZipException 异常</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(File zipFile, String dest, String password) throws ZipException {</span><br><span class="line">        //1.判断指定目录是否存在</span><br><span class="line">        File destDir = new File(dest);</span><br><span class="line">        if (destDir.isDirectory() &amp;&amp; !destDir.exists()) {</span><br><span class="line">            boolean mkdir = destDir.mkdir();</span><br><span class="line">            System.out.println(mkdir);</span><br><span class="line">        }</span><br><span class="line">        //2.初始化zip工具</span><br><span class="line">        ZipFile zFile = new ZipFile(zipFile);</span><br><span class="line">        zFile.setCharset(Charset.forName("UTF-8"));</span><br><span class="line">        if (!zFile.isValidZipFile()) {</span><br><span class="line">            throw new ZipException("压缩文件不合法,可能被损坏.");</span><br><span class="line">        }</span><br><span class="line">        //3.判断是否已加密</span><br><span class="line">        if (zFile.isEncrypted()) {</span><br><span class="line">            zFile.setPassword(password.toCharArray());</span><br><span class="line">        }</span><br><span class="line">        //4.解压所有文件</span><br><span class="line">        zFile.extractAll(dest);</span><br><span class="line">        List headerList = zFile.getFileHeaders();</span><br><span class="line">        List<span class="tag">&lt;<span class="name">File</span>&gt;</span> extractedFileList = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        for(Object object : headerList) {</span><br><span class="line">            FileHeader fileHeader = (FileHeader)object;</span><br><span class="line">            if (!fileHeader.isDirectory()) {</span><br><span class="line">                extractedFileList.add(new File(destDir,fileHeader.getFileName()));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        File [] extractedFiles = new File[extractedFileList.size()];</span><br><span class="line">        extractedFileList.toArray(extractedFiles);</span><br><span class="line">        return extractedFiles;</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 解压无密码的zip压缩包到指定目录</span><br><span class="line">     * @param zipFile zip压缩包</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @return 解压后的文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(File zipFile, String dest) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(zipFile, dest, null);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 根据所给密码解压zip压缩包到指定目录</span><br><span class="line">     * @param zipFilePath zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @param password 压缩包密码</span><br><span class="line">     * @return 解压后的所有文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(String zipFilePath, String dest, String password) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(new File(zipFilePath), dest, password);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 无密码解压压缩包到指定目录</span><br><span class="line">     * @param zipFilePath zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @return 解压后的所有文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(String zipFilePath, String dest) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(new File(zipFilePath), dest, null);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>压缩无密码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 压缩无密码() {</span><br><span class="line">    String file1 = "D:\\test\\unzip\\333\\123.txt";</span><br><span class="line">    String file2 = "D:\\test\\unzip\\333\\456.txt";</span><br><span class="line">    String file3 = "D:\\test\\unzip\\333\\789.txt";</span><br><span class="line">    String file4 = "D:\\test\\unzip\\333\\789 - 副本.txt";</span><br><span class="line">    //压缩后的zip文件路径</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\5555.zip";</span><br><span class="line">    try {</span><br><span class="line">        System.out.println(Zip4jUtil.compress(zipFilePath1,null,file1,file2,file3,file4));</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>压缩有密码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 压缩有密码() {</span><br><span class="line">    String file1 = "D:\\test\\unzip\\333\\123.txt";</span><br><span class="line">    String file2 = "D:\\test\\unzip\\333\\456.txt";</span><br><span class="line">    String file3 = "D:\\test\\unzip\\333\\789.txt";</span><br><span class="line">    //压缩后的zip文件路径</span><br><span class="line">    String zipFilePath2 = "D:\\test\\unzip\\6666.zip";</span><br><span class="line">    try {</span><br><span class="line">        System.out.println(Zip4jUtil.compress(zipFilePath2,"123",file1,file2,file3));</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解压无密码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 解压无密码() {</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\5555.zip";</span><br><span class="line">    File[] files = new File[0];</span><br><span class="line">    try {</span><br><span class="line">        files = Zip4jUtil.deCompress(zipFilePath1, "D:\\test\\unzip\\5555");</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    if(files != null){</span><br><span class="line">        System.out.println(files.length);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解压有密码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 解压有密码() {</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\6666.zip";</span><br><span class="line">    File[] files = new File[0];</span><br><span class="line">    try {</span><br><span class="line">        files = Zip4jUtil.deCompress(zipFilePath1, "D:\\test\\unzip\\6666", "123");</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    if(files != null){</span><br><span class="line">        System.out.println(files.length);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      zip工具
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>自定义Redis配置</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605606341401/1605606341401/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605606341401/1605606341401/</id>
    <published>2020-11-17T09:45:41.000Z</published>
    <updated>2020-11-17T10:06:58.073Z</updated>
    
    <content type="html"><![CDATA[<p>修改原生的yml配置，采取自定义模式，<br>配置文件仅为动态值，如不需要则可删除，代码设有默认值，</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis end --&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置文件：redis-config.properties</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  redis set</span><br><span class="line">spring.redis.database=1</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.password=</span><br></pre></td></tr></tbody></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cache.CacheManager;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.RedisPassword;</span><br><span class="line">import org.springframework.data.redis.connection.RedisStandaloneConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: RedisConfig.java</span><br><span class="line"> * @description: Redis配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@EnableCaching</span><br><span class="line">@PropertySource(value = {"classpath:redis-config.properties"},encoding = "UTF-8")</span><br><span class="line">public class RedisConfig{</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.database:0}")</span><br><span class="line">    private int database;</span><br><span class="line">    @Value("${spring.redis.host:localhost}")</span><br><span class="line">    private String host;</span><br><span class="line">    @Value("${spring.redis.port:6379}")</span><br><span class="line">    private int port;</span><br><span class="line">    @Value("${spring.redis.password:}")</span><br><span class="line">    private String password;</span><br><span class="line">    @Value("${spring.redis.timeout:10000}")</span><br><span class="line">    private long timeout;</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.pool.maxTotal:30}")</span><br><span class="line">    private int maxTotal;</span><br><span class="line">    @Value("${spring.redis.pool.maxIdle:30}")</span><br><span class="line">    private int maxIdle;</span><br><span class="line">    @Value("${spring.redis.pool.minIdle:10}")</span><br><span class="line">    private int minIdle;</span><br><span class="line">    @Value("${spring.redis.pool.maxWaitMillis:10000}")</span><br><span class="line">    private int maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.testOnBorrow:true}")</span><br><span class="line">    private boolean testOnBorrow;</span><br><span class="line">    @Value("${spring.redis.testOnReturn:false}")</span><br><span class="line">    private boolean testOnReturn;</span><br><span class="line">    @Value("${spring.redis.testWhileIdle:true}")</span><br><span class="line">    private boolean testWhileIdle;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisConnectionFactory lettuceConnectionFactory() {</span><br><span class="line">        GenericObjectPoolConfig genericObjectPoolConfig = new GenericObjectPoolConfig();</span><br><span class="line">        genericObjectPoolConfig.setMaxTotal(maxTotal);</span><br><span class="line">        genericObjectPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">        genericObjectPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        genericObjectPoolConfig.setMinIdle(minIdle);</span><br><span class="line">        genericObjectPoolConfig.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        genericObjectPoolConfig.setTestOnReturn(testOnReturn);</span><br><span class="line">        genericObjectPoolConfig.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        // 单点redis</span><br><span class="line">        RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration();</span><br><span class="line">        redisConfig.setDatabase(database);</span><br><span class="line">        redisConfig.setHostName(host);</span><br><span class="line">        redisConfig.setPort(port);</span><br><span class="line">        if (password != null &amp;&amp; !"".equals(password)) {</span><br><span class="line">            redisConfig.setPassword(RedisPassword.of(password));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder()</span><br><span class="line">                .poolConfig(genericObjectPoolConfig)</span><br><span class="line">                .commandTimeout(Duration.ofMillis(timeout))</span><br><span class="line">                .shutdownTimeout(Duration.ZERO)</span><br><span class="line">                .build();</span><br><span class="line">        return new LettuceConnectionFactory(redisConfig,clientConfig);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置自定义redisTemplate</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> redisTemplate(RedisConnectionFactory redisConnectionFactory) {</span><br><span class="line">        System.out.println("★★★★★加载 bean - RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> ★★★★★");</span><br><span class="line">        RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> redisTemplate = new RedisTemplate<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值 替换默认序列化</span><br><span class="line">        Jackson2JsonRedisSerializer<span class="tag">&lt;<span class="name">Object</span>&gt;</span> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<span class="tag">&lt;&gt;</span>(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        //使用StringRedisSerializer来序列化和反序列化redis的key值</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        //事务支持</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存配置管理器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {</span><br><span class="line">        System.out.println("★★★★★加载 bean - cacheManager ★★★★★");</span><br><span class="line">        //以锁写入的方式创建RedisCacheWriter对象</span><br><span class="line">        RedisCacheWriter writer = RedisCacheWriter.lockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        //创建默认缓存配置对象</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        return new RedisCacheManager(writer, config);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private RedisTemplate<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ValueOperations<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> valueOperations = redisTemplate.opsForValue();</span><br><span class="line">valueOperations.set("admin","");</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      自定义Redis配置,修改原生的yml配置，采取自定义模式
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.zhuqiaolun.com/categories/SpringBoot/"/>
    
    
      <category term="Redis" scheme="https://www.zhuqiaolun.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis遍历map</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605605257925/1605605257925/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605605257925/1605605257925/</id>
    <published>2020-11-17T09:27:37.000Z</published>
    <updated>2020-11-17T09:42:54.102Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis是可以遍历map的，</p><h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><p>注意：要加@Param注解，否则不行</p><p>Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();<br>map.put(“USER_NAME”,”张三”);<br>map.put(“USER_STATUS”,”0”);<br>map.put(“UPDATE_TIME”,new Date());</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int insertData(@Param("params") Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map);</span><br></pre></td></tr></tbody></table></figure><p>Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();<br>map.put(“1”,”张三”);<br>map.put(“2”,”李四”);</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int deleteBatch(@Param("params") Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map);</span><br></pre></td></tr></tbody></table></figure><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>注意：collection=”params.entrySet()” 或者 collection=”params” 都行</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    insert into user_table</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span>  <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #{key}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     values </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span>  <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">           #{value}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    delete from user_table where USER_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #{key}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      MyBatis遍历map
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.zhuqiaolun.com/categories/MyBatis/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis的几种批量操作 - MySql</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605601494695/1605601494695/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605601494695/1605601494695/</id>
    <published>2020-11-17T08:24:54.000Z</published>
    <updated>2020-11-17T09:43:28.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>此处针对MySql的数据库操作,<br>datasource.url：jdbc:mysql://127.0.0.1:3306/data?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</p><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><h4 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量新增</span><br><span class="line"> * @param params  参数1</span><br><span class="line"> * @param list 参数2</span><br><span class="line"> */</span><br><span class="line">void saveBatchData(@Param("params")Map&lt;String, Object&gt; map, @Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><p>此处的 “list” 为 dao里面的 @Param(“list”) 的 list</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveBatchData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span><br><span class="line">    insert into user_table</span><br><span class="line">    ( USER_NAME,USER_STATUS,CREATE_TIME,UPDATE_TIME ) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        ( #{item.userName},#{item.userStatus},#{item.createDate},#{item.updateDate} )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h4><p>数组:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="name">String</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">list.add("1");</span><br><span class="line">String[] stringArray = new String[list.size()];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量删除</span><br><span class="line"> * @param stringArray 参数</span><br><span class="line"> */</span><br><span class="line">void deleteBatchDataByArray(String[] stringArray);</span><br></pre></td></tr></tbody></table></figure><p>集合:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量删除</span><br><span class="line"> * @param list 参数</span><br><span class="line"> */</span><br><span class="line">void deleteBatchDataByList(@Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure><h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><p>数组:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatchDataByArray"</span>&gt;</span></span><br><span class="line">    delete from user_table  where USER_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #{item}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>集合:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatchDataByList"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">    delete from user_table where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span>  <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">        ( USER_ID = #{item.userId} )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><h4 id="dao-2"><a href="#dao-2" class="headerlink" title="dao"></a>dao</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量更新 - mat未进件</span><br><span class="line"> * @param params  参数1</span><br><span class="line"> * @param list 参数2</span><br><span class="line"> */</span><br><span class="line">void updateBatchData(@Param("params")Map&lt;String, Object&gt; params, @Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure><h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatchData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">        update user_table</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            USER_NAME = #{item.userName},</span><br><span class="line">            USER_STATUS = #{item.userStatus},</span><br><span class="line">            UPDATE_TIME = #{item.updateDate}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where</span><br><span class="line">            USER_ID = #{item.userId}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      MyBatis的几种批量操作 - 新增/删除/更新
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.zhuqiaolun.com/categories/MyBatis/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>poi(3.17)生成excel - 2007</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605601181571/1605601181571/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605601181571/1605601181571/</id>
    <published>2020-11-17T08:19:41.000Z</published>
    <updated>2020-11-17T08:37:12.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.72<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成文件</span><br><span class="line">     * @param saveFilePath 输出文件路径</span><br><span class="line">     * @param jsonArray 数据集合</span><br><span class="line">     */</span><br><span class="line">    public static void createFile(String saveFilePath,JSONArray jsonArray) throws IOException {</span><br><span class="line">        OutputStream outputStream = null;</span><br><span class="line">        Workbook workbook = null;</span><br><span class="line">        try {</span><br><span class="line">            workbook = new XSSFWorkbook();</span><br><span class="line">            Sheet sheet = workbook.createSheet("Sheet1");</span><br><span class="line">            for (int i = 0; i <span class="tag">&lt; <span class="attr">jsonArray.size</span>(); <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">                // 行号</span></span><br><span class="line"><span class="tag">                <span class="attr">Row</span> <span class="attr">row</span> = <span class="string">sheet.createRow(i);</span></span></span><br><span class="line"><span class="tag">                <span class="attr">JSONObject</span> <span class="attr">jsonObject</span> = <span class="string">jsonArray.getJSONObject(i);</span></span></span><br><span class="line"><span class="tag">                //列号</span></span><br><span class="line">                for (int j = 0; j &lt; jsonObject.size(); j++) {</span><br><span class="line">                    Cell cell = row.createCell(j);</span><br><span class="line">                    if(i == 0){</span><br><span class="line">                        sheet.setColumnWidth(j, 15*256);</span><br><span class="line">                    }</span><br><span class="line">                    if(jsonObject.get(String.valueOf(j)) != null){</span><br><span class="line">                        cell.setCellValue(String.valueOf(jsonObject.get(String.valueOf(j))));</span><br><span class="line">                    }else{</span><br><span class="line">                        cell.setCellValue("");</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            FileUtils.forceMkdirParent(new File(saveFilePath));</span><br><span class="line">            outputStream = new FileOutputStream(saveFilePath);</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        } catch(Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println("生成xlsx文件错误："+e);</span><br><span class="line">        } finally {</span><br><span class="line">            if (outputStream != null) {</span><br><span class="line">                outputStream.close();</span><br><span class="line">            }</span><br><span class="line">            if (workbook != null) {</span><br><span class="line">                workbook.close();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String fileName = "输出文件绝对路径";</span><br><span class="line">JSONArray jsonArray = new JSONArray();</span><br><span class="line">···添加数据 </span><br><span class="line">JSONObject jsonObject = new JSONObject(true);</span><br><span class="line">jsonArray.add(jsonObject);</span><br><span class="line"> </span><br><span class="line">ExcelUtil.createFile(fileName,jsonArray);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      excel工具
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>poi(3.17)解析excel - 2007</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605159781717/1605159781717/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605159781717/1605159781717/</id>
    <published>2020-11-12T05:43:01.000Z</published>
    <updated>2020-11-23T05:09:51.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据读取，文件流解析Excel文件</span><br><span class="line">     * @param input 文件流</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws IOException 异常</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;Map&lt;String,String&gt;&gt; getDataToInput(FileInputStream input) throws IOException {</span><br><span class="line">        return getData(input);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据文件绝对路径，解析Excel文件</span><br><span class="line">     * @param filePath 文件路径</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws IOException 异常</span><br><span class="line">     */</span><br><span class="line">public static List&lt;Map&lt;String,String&gt;&gt; getDataToFilePath(String filePath) throws IOException {</span><br><span class="line">return getData(new FileInputStream(filePath));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析数据</span><br><span class="line">     */</span><br><span class="line">private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException {</span><br><span class="line">        List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;();</span><br><span class="line">        Workbook wb = null;</span><br><span class="line">        try {</span><br><span class="line">            wb = new XSSFWorkbook(input);</span><br><span class="line">            // 获得第一个表单</span><br><span class="line">            Sheet sheet = wb.getSheetAt(0);</span><br><span class="line">            // 获得第一个表单的迭代器</span><br><span class="line">            Iterator<span class="tag">&lt;<span class="name">Row</span>&gt;</span> rows = sheet.rowIterator();</span><br><span class="line">            while (rows.hasNext()) {</span><br><span class="line">                // 获得行数据</span><br><span class="line">                Row row = rows.next();</span><br><span class="line">                // 获得第一行的迭代器</span><br><span class="line">                Iterator<span class="tag">&lt;<span class="name">Cell</span>&gt;</span> cells = row.cellIterator();</span><br><span class="line">                Map<span class="tag">&lt;<span class="name">String,String</span>&gt;</span> jsonMap = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">                StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">                while (cells.hasNext()) {</span><br><span class="line">                    Cell cell = cells.next();</span><br><span class="line">                    String val = "";</span><br><span class="line">                    // 根据cell中的类型来输出数据</span><br><span class="line">                    switch (cell.getCellTypeEnum()) {</span><br><span class="line">                        case NUMERIC:</span><br><span class="line">                            val = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case STRING:</span><br><span class="line">                            val = String.valueOf(cell.getStringCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case BOOLEAN:</span><br><span class="line">                            val = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case FORMULA:</span><br><span class="line">                            val = String.valueOf(cell.getCellFormula());</span><br><span class="line">                            break;</span><br><span class="line">                        default:</span><br><span class="line">                            break;</span><br><span class="line">                    }</span><br><span class="line">                    stringBuilder.append(val).append("#");</span><br><span class="line">                    jsonMap.put(String.valueOf(cell.getColumnIndex()), val);</span><br><span class="line">                }</span><br><span class="line">                System.out.println(stringBuilder.toString());</span><br><span class="line">                if (!jsonMap.isEmpty()) {</span><br><span class="line">                    mapList.add(jsonMap);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } catch (FileNotFoundException e) {</span><br><span class="line">            System.out.println("找不到xlsx文件");</span><br><span class="line">            throw new IOException(e);</span><br><span class="line">        } catch (IOException e) {</span><br><span class="line">            System.out.println("解析xlsx文件错误");</span><br><span class="line">            throw new IOException(e);</span><br><span class="line">        } finally {</span><br><span class="line">            if (wb != null) {</span><br><span class="line">                try {</span><br><span class="line">                    wb.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            if (input != null) {</span><br><span class="line">                try {</span><br><span class="line">                    input.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return mapList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>第一种：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try {</span><br><span class="line">    String filePath = "D:\\test\\test.xlsx";</span><br><span class="line">    FileInputStream fileInputStream = new FileInputStream(new File(filePath));</span><br><span class="line">    List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToInput(fileInputStream);</span><br><span class="line">    System.out.println(mapList.size());</span><br><span class="line">} catch (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种：    </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try {</span><br><span class="line">    String filePath = "D:\\test\\test.xlsx";</span><br><span class="line">    List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToFilePath(filePath);</span><br><span class="line">    System.out.println(mapList.size());</span><br><span class="line">} catch (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/11/1606102218582/1606102218582/">poi(3.17)解析excel - 2007 续.1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      excel工具
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>对响应值Response的封装使用(可格式化Json格式数据)</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605079334142/1605079334142/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605079334142/1605079334142/</id>
    <published>2020-11-11T07:22:14.000Z</published>
    <updated>2020-11-11T08:04:20.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>返回的json中忽略null属性值，不传递<br>pom引入:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>第一种，在yml中写入（全局）：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br></pre></td></tr></tbody></table></figure><p>第二种，在应用类上写入（局部）：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br></pre></td></tr></tbody></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ResponseBean：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line">import com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.SneakyThrows;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">/**</span><br><span class="line"> * @className: ResponseUtils.java</span><br><span class="line"> * @description:  返回的JSON数据结构标准</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">public class ResponseBean implements Serializable {</span><br><span class="line"></span><br><span class="line">    private boolean success = false;</span><br><span class="line">    private Object data;</span><br><span class="line">    private String msg;</span><br><span class="line">    private String errCode;</span><br><span class="line">    private String errMsg;</span><br><span class="line"></span><br><span class="line">    @JsonIgnore</span><br><span class="line">    private boolean dataFormat = false;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        if(this.isDataFormat()){</span><br><span class="line">            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(this);</span><br><span class="line">        }else{</span><br><span class="line">            return objectMapper.writer().writeValueAsString(this);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @className: BaseController.java</span><br><span class="line"> * @description:  基本</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseController {</span><br><span class="line">  /**</span><br><span class="line">    * 使用response输出JSON</span><br><span class="line">    * @param response response</span><br><span class="line">    * @param str 响应对应</span><br><span class="line">    */</span><br><span class="line">   protected void out(HttpServletResponse response, Object str) {</span><br><span class="line">       PrintWriter out = null;</span><br><span class="line">       try {</span><br><span class="line">           response.setCharacterEncoding("UTF-8");</span><br><span class="line">           response.setContentType("application/json");</span><br><span class="line">           out = response.getWriter();</span><br><span class="line">           out.print(str);</span><br><span class="line">       } catch (Exception e) {</span><br><span class="line">           log.error("输出JSON出错",e.getMessage());</span><br><span class="line">       } finally {</span><br><span class="line">           if (out != null) {</span><br><span class="line">               out.flush();</span><br><span class="line">               out.close();</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: IndexController</span><br><span class="line"> * @Description: 控制层测试</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class TestController extends BaseController {</span><br><span class="line"></span><br><span class="line">   @RequestMapping(method = {RequestMethod.GET,RequestMethod.POST})</span><br><span class="line">   public @ResponseBody void getIndex(HttpServletResponse response) {</span><br><span class="line">       ResponseBean responseBean = new ResponseBean();</span><br><span class="line">       responseBean.setSuccess(true);</span><br><span class="line">       responseBean.setDataFormat(true);</span><br><span class="line">       this.out(response,responseBean);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "success" : true</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      对响应值Response的封装使用
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.zhuqiaolun.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的普通类获取注册的bean</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605079105126/1605079105126/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605079105126/1605079105126/</id>
    <published>2020-11-11T07:18:25.000Z</published>
    <updated>2020-11-11T07:21:43.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ApplicationContextHelper.java</span><br><span class="line"> * @description:  获取 ApplicationContext</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ApplicationContextHelper implements ApplicationContextAware {</span><br><span class="line"></span><br><span class="line">private static ApplicationContext appCtx;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {</span><br><span class="line">System.out.println("初始化applicationContext："+applicationContext.getBeanDefinitionNames().length);</span><br><span class="line">appCtx = applicationContext;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过name获取 Bean.</span><br><span class="line"> * @param name bean名</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">public static Object getBean(String name) {</span><br><span class="line">return appCtx.getBean(name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过class获取Bean.</span><br><span class="line"> * @param clazz bean类</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T getBean(Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> clazz) {</span><br><span class="line">return appCtx.getBean(clazz);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过name,以及Clazz返回指定的Bean</span><br><span class="line"> * @param name bean名</span><br><span class="line"> * @param clazz bean类</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T getBean(String name, Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> clazz) {</span><br><span class="line">return appCtx.getBean(name, clazz);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>获取 RestTemplate 的 bean</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate  restTemplate = ApplicationContextHelper.getBean(RestTemplate.class);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SpringBoot的ApplicationContext
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.zhuqiaolun.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MD5加密工具</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605078934677/1605078934677/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605078934677/1605078934677/</id>
    <published>2020-11-11T07:15:34.000Z</published>
    <updated>2020-11-11T07:16:45.924Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.security.MessageDigest;</span><br><span class="line">/**</span><br><span class="line"> * @ClassName: MD5Util</span><br><span class="line"> * @Description: MD5加密工具</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class MD5Util {</span><br><span class="line"></span><br><span class="line">    private static final String SALT = "demon";</span><br><span class="line"></span><br><span class="line">    public static String encode(String password) {</span><br><span class="line">        password = password + SALT;</span><br><span class="line">        MessageDigest md5;</span><br><span class="line">        try {</span><br><span class="line">            md5 = MessageDigest.getInstance("MD5");</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        }</span><br><span class="line">        char[] charArray = password.toCharArray();</span><br><span class="line">        byte[] byteArray = new byte[charArray.length];</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">charArray.length</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">byteArray</span>[<span class="attr">i</span>] = <span class="string">(byte)</span> <span class="attr">charArray</span>[<span class="attr">i</span>];</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">byte</span>[] <span class="attr">md5Bytes</span> = <span class="string">md5.digest(byteArray);</span></span></span><br><span class="line"><span class="tag">        <span class="attr">StringBuilder</span> <span class="attr">hexValue</span> = <span class="string">new</span> <span class="attr">StringBuilder</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">for</span> (<span class="attr">byte</span> <span class="attr">md5Byte</span> <span class="attr">:</span> <span class="attr">md5Bytes</span>) {</span></span><br><span class="line"><span class="tag">            <span class="attr">int</span> <span class="attr">val</span> = <span class="string">((int)</span> <span class="attr">md5Byte</span>) &amp; <span class="attr">0xff</span>;</span></span><br><span class="line">            if (val &lt; 16) {</span><br><span class="line">                hexValue.append("0");</span><br><span class="line">            }</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        }</span><br><span class="line">        return hexValue.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      MD5加密工具
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>获取当前登录用户IP</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605078705487/1605078705487/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605078705487/1605078705487/</id>
    <published>2020-11-11T07:11:45.000Z</published>
    <updated>2020-11-11T07:16:05.989Z</updated>
    
    <content type="html"><![CDATA[<p>此方法采用的 HttpServletRequest 获取，故使用web项目，<br>说明，当存在使用 虚拟机 的情况，会导致获取的IP为 以太网适配器 的IP</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: IpUtil</span><br><span class="line"> * @Description: 获取当前登录用户IP</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class IpUtil {</span><br><span class="line"></span><br><span class="line">    private static final String[] LOCAL_IP = {"127.0.0.1","localhost","0:0:0:0:0:0:0:1"};</span><br><span class="line">    private static final String UNKNOWN = "unknown";</span><br><span class="line"></span><br><span class="line">    public static String getIpAddr(HttpServletRequest request) {</span><br><span class="line">        String ipAddress;</span><br><span class="line">        try {</span><br><span class="line">            ipAddress = request.getHeader("x-forwarded-for");</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getHeader("Proxy-Client-IP");</span><br><span class="line">            }</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getHeader("WL-Proxy-Client-IP");</span><br><span class="line">            }</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">                if (Arrays.asList(LOCAL_IP).contains(ipAddress)) {</span><br><span class="line">                    // 根据网卡取本机配置的IP</span><br><span class="line">                    InetAddress inet = null;</span><br><span class="line">                    try {</span><br><span class="line">                        inet = InetAddress.getLocalHost();</span><br><span class="line">                    } catch (UnknownHostException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    assert inet != null;</span><br><span class="line">                    ipAddress = inet.getHostAddress();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span><br><span class="line">            // "***.***.***.***".length()</span><br><span class="line">            if (ipAddress != null &amp;&amp; ipAddress.length() &gt; 15) {</span><br><span class="line">                // = 15</span><br><span class="line">                if (ipAddress.indexOf(",") &gt; 0) {</span><br><span class="line">                    ipAddress = ipAddress.substring(0, ipAddress.indexOf(","));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            ipAddress = "";</span><br><span class="line">        }</span><br><span class="line">        return ipAddress;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断IP地址的合法性，这里采用了正则表达式的方法来判断</span><br><span class="line">     * return true，合法</span><br><span class="line">     * */</span><br><span class="line">    public static boolean ipCheck(String text) {</span><br><span class="line">        if (text != null &amp;&amp; !text.isEmpty()) {</span><br><span class="line">            // 定义正则表达式</span><br><span class="line">            String regex = "^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$";</span><br><span class="line">            // 判断ip地址是否与正则表达式匹配</span><br><span class="line">            // 返回判断信息</span><br><span class="line">            // 返回判断信息</span><br><span class="line">            return text.matches(regex);</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      获取当前登录用户IP
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>实体对象与Map之间的转换工具类</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605077732135/1605077732135/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605077732135/1605077732135/</id>
    <published>2020-11-11T06:55:32.000Z</published>
    <updated>2020-11-11T07:04:33.831Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: EntityUtil</span><br><span class="line"> * @Description: 实体对象与Map之间的转换工具类</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class EntityUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实体类转Map</span><br><span class="line">     * @param object 对象</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    public static Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> entityToMap(Object object) {</span><br><span class="line">        if (object == null) {</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        for (Field field : object.getClass().getDeclaredFields()){</span><br><span class="line">            try {</span><br><span class="line">                boolean flag = field.isAccessible();</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                Object o = field.get(object);</span><br><span class="line">                map.put(field.getName(), o);</span><br><span class="line">                field.setAccessible(flag);</span><br><span class="line">            } catch (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Map转实体类</span><br><span class="line">     * @param map 需要初始化的数据，key字段必须与实体类的成员名字一样，否则赋值为空</span><br><span class="line">     * @param entity  需要转化成的实体类</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T mapToEntity(Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map, Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> entity) {</span><br><span class="line">        T t = null;</span><br><span class="line">        try {</span><br><span class="line">            t = entity.newInstance();</span><br><span class="line">            for(Field field : entity.getDeclaredFields()) {</span><br><span class="line">                if (map.containsKey(field.getName())) {</span><br><span class="line">                    boolean flag = field.isAccessible();</span><br><span class="line">                    field.setAccessible(true);</span><br><span class="line">                    Object object = map.get(field.getName());</span><br><span class="line">                    if (object!= null &amp;&amp; field.getType().isAssignableFrom(object.getClass())) {</span><br><span class="line">                        field.set(t, object);</span><br><span class="line">                    }</span><br><span class="line">                    field.setAccessible(flag);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            return t;</span><br><span class="line">        } catch (InstantiationException | IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        return t;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      实体对象与Map之间的转换工具类
    
    </summary>
    
    
      <category term="J-Tools" scheme="https://www.zhuqiaolun.com/categories/J-Tools/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 静态资源处理</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605076979058/1605076979058/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605076979058/1605076979058/</id>
    <published>2020-11-11T06:42:59.000Z</published>
    <updated>2020-11-11T07:23:37.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.util.ResourceUtils;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: WebMvcConfig.java</span><br><span class="line"> * @description:  WebMvc配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) {</span><br><span class="line">        // 配置模板资源路径</span><br><span class="line">        registry.addResourceHandler("/templates/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/templates/");</span><br><span class="line">        registry.addResourceHandler("/static/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/static/");</span><br><span class="line">        registry.addResourceHandler("/public/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/public/");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      配置SpringBoot的资源路径
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.zhuqiaolun.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>解决IE浏览器  @ResponseBody 返回json的时候提示下载问题</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1605076219103/1605076219103/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1605076219103/1605076219103/</id>
    <published>2020-11-11T06:30:19.000Z</published>
    <updated>2020-11-11T07:03:00.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: WebMvcConfig.java</span><br><span class="line"> * @description:  WebMvc配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {</span><br><span class="line">        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();</span><br><span class="line">        List<span class="tag">&lt;<span class="name">MediaType</span>&gt;</span> supportedMediaTypes = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        MediaType media = new MediaType(MediaType.TEXT_HTML, Charset.forName("UTF-8"));</span><br><span class="line">        supportedMediaTypes.add(media);</span><br><span class="line">        jsonConverter.setSupportedMediaTypes(supportedMediaTypes);</span><br><span class="line">        converters.add(jsonConverter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用@ResponseBody返回字符串
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.zhuqiaolun.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows Service Wrapper （续）</title>
    <link href="https://www.zhuqiaolun.com/2020/11/1604299054941/1604299054941/"/>
    <id>https://www.zhuqiaolun.com/2020/11/1604299054941/1604299054941/</id>
    <published>2020-11-02T06:37:34.000Z</published>
    <updated>2020-11-02T07:08:59.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Windows-Service-Wrapper"><a href="#Windows-Service-Wrapper" class="headerlink" title="Windows Service Wrapper"></a>Windows Service Wrapper</h3><p>Windows Service Wrapper 可以将 Java 的 jar 包注册为 windows 服务。<br>项目：<a href="https://github.com/winsw/winsw" target="_blank" rel="noopener">https://github.com/winsw/winsw</a><br>地址：<a href="https://github.com/winsw/winsw/releases" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官方 GitHub下载 WinSW.NET4.exe 和 sample-minimal.xml<br>选择 WinSW <a href="https://github.com/winsw/winsw/releases/tag/v2.10.3" target="_blank" rel="noopener">v2.10.3</a> 版本下载<br>WinSW.NET4.exe ：<a href="https://github.com/winsw/winsw/releases/download/v2.10.3/WinSW.NET4.exe" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases/download/v2.10.3/WinSW.NET4.exe</a><br>sample-minimal.xml ：<a href="https://github.com/winsw/winsw/releases/download/v2.10.3/sample-minimal.xml" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases/download/v2.10.3/sample-minimal.xml</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建目录，例如： MyApp<br><img src="/2020/11/1604299054941/1604299054941/20201102145318.png" alt="20201102145318"></p><p>文件内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bin: 属于服务的命名以及配置</span><br><span class="line">    - MyApp.exe</span><br><span class="line">    - MyApp.xml</span><br><span class="line"></span><br><span class="line">conf：一些需要的文件配置</span><br><span class="line">    </span><br><span class="line">jre：属于Java的运行环境</span><br><span class="line"></span><br><span class="line">lib：属于程序的执行包</span><br><span class="line"></span><br><span class="line">log：输出日志文件夹</span><br></pre></td></tr></tbody></table></figure><p>MyApp.xml<br>配置过程中注意目录情况，%BASE% 是以exe所在的目录为根目录</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 服务名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>MyApp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 服务显示名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>My App Service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 服务描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>通过wapper注册成Windows服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- java环境变量 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：C:\jdk1.8\jre\bin\java--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executable</span>&gt;</span>%BASE%\..\jre\bin\java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--启动参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-jar %BASE%\..\lib\MyApp.jar"<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开机启动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startmode</span>&gt;</span>Automatic<span class="tag">&lt;/<span class="name">startmode</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志配置 &lt;logmode&gt;rotate&lt;/logmode&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logpath</span>&gt;</span>%BASE%\..\log<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">"roll-by-time"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>以管理员身份运行 bat文件，进行 windows 服务操作</p><h3 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h3><p>注册服务 service install.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe install</span><br></pre></td></tr></tbody></table></figure><p>卸载服务 service uninstall.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe uninstall</span><br></pre></td></tr></tbody></table></figure><p>启动服务 service start.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe start</span><br></pre></td></tr></tbody></table></figure><p>停止服务 service stop.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe stop</span><br></pre></td></tr></tbody></table></figure><p>重启服务 service restart.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe restart</span><br></pre></td></tr></tbody></table></figure><p>服务状态 service status.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe status</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Windows Service Wrapper 可以将 Java 的 jar 包注册为 windows 服务。
    
    </summary>
    
    
      <category term="工具" scheme="https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx一个server配置多个location</title>
    <link href="https://www.zhuqiaolun.com/2020/10/1602671313615/1602671313615/"/>
    <id>https://www.zhuqiaolun.com/2020/10/1602671313615/1602671313615/</id>
    <published>2020-10-14T10:28:33.000Z</published>
    <updated>2020-10-14T11:02:48.414Z</updated>
    
    <content type="html"><![CDATA[<p>nginx作为代理服务器，可以配置多个location，通过访问不同路径来访问不同目录。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen       80;  #端口号</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    location /video { </span><br><span class="line">        #alias末尾必须要用/结束</span><br><span class="line">        alias  html/video/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line">    location /music { </span><br><span class="line">        #alias末尾必须要用/结束</span><br><span class="line">        alias  html/music/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    location / {</span><br><span class="line">        #root末尾可以不用/结束</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html {</span><br><span class="line">        root   html;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="/2020/10/1602671313615/1602671313615/20201014184210.png" alt="20201014184210"><br>在music内放置文件 111.mp3<br>在video内放置文件 222.mp4</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a><br><a href="http://localhost/music/111.mp3" target="_blank" rel="noopener">http://localhost/music/111.mp3</a><br><a href="http://localhost/video/222.mp4" target="_blank" rel="noopener">http://localhost/video/222.mp4</a></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>alias与root的区别：alias与root指定的url意义不同</p><br><p>root和alias都可以定义在location模块中，都是用来指定请求资源的真实路径，比如：</p><pre><code>location /music/ {    root /data/file;}请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/music/111.mp3，</code></pre><p>注意：root真实路径是root指定的值加上location指定的值。</p><br><p>而 alias 正如其名，alias指定的路径是location的别名，不管location的值怎么写，资源的真实路径都是 alias 指定的路径，比如：</p><pre><code>location /music/ {    alias /data/file/;}请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/111.mp3，</code></pre><p>注意：alias真实路径是alias指定的值，不包含location指定的值了。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在一个location中，alias可以存在多个，但是root只能有一个，<br>alias只能存在与location中，但是root可以用在server、http和location中，<br>alias后面必须要“/”结束，否则会找不到文件，而root的“/”可有可无，</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Nginx一个server配置多个location（alias与root的区别）
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://www.zhuqiaolun.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Redis配置 之  设置密码</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1601271269577/1601271269577/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1601271269577/1601271269577/</id>
    <published>2020-09-28T05:34:29.000Z</published>
    <updated>2020-09-28T05:47:09.061Z</updated>
    
    <content type="html"><![CDATA[<p>默认安装后的redis是没有密码的，这明显有很大的安全隐患，所以需要设置密码。这里提供2中方式</p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p><span style="color:red">注：使用第二种，不知道怎么回滚为空密码</span></p><p>1.第一种方式（推荐）：<br>修改配置文件“redis.windows-service.conf”，大约在 443 行：<br><img src="/2020/09/1601271269577/1601271269577/20200927172058.png" alt="20200927172058"><br>添加一下内容：</p><pre><code>requirepass 123456</code></pre><p>然后重启Redis服务，即可生效。如若去掉此行代码即属于设置密码为空。</p><p>2.第二种方式：<br>使用命令方式进入链接后，输入 config set requirepass “你的密码”，本例为 123456，进行回车；<br><img src="/2020/09/1601271269577/1601271269577/20200927172450.png" alt="20200927172450"></p><p>当显示为OK后，需要进行auth认证，当输入 auth后会出现 auth password，不用管password的出现，敲一下空格再输入密码(123456)回车即可；<br><img src="/2020/09/1601271269577/1601271269577/20200927172545.png" alt="20200927172545"></p><p>更换密码输入命令：config set requirepass “” ；当密码为空时不用auth认证；且密码任意输入都可连接；</p><h3 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h3><p>输入命令：config get requirepass<br><img src="/2020/09/1601271269577/1601271269577/20200927173752.png" alt="20200927173752"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Redis配置 之  修改密码
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.zhuqiaolun.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.zhuqiaolun.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Window10安装 Redis - 绿色版</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1601194986992/1601194986992/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1601194986992/1601194986992/</id>
    <published>2020-09-27T08:23:06.000Z</published>
    <updated>2020-09-28T07:50:21.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a><br>传送门：<a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip</a></p><p><img src="/2020/09/1601194986992/1601194986992/20200927163042.png" alt="20200927163042"></p><p>对文件进行一个说明：<br>Redis-x64-3.2.100.msi ：图形化安装文件<br>Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装<br>Redis-x64-3.2.100.zip ：.zip压缩格式源码<br>Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>点击下载后，需要先进行解压，解压文件如下：<br><img src="/2020/09/1601194986992/1601194986992/20200928150337.png" alt="20200928150337"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>双击运行目录下的 redis-server.exe，会加载自身存在的 conf 文件配置，采取默认的配置运行；出现以下画面即成功：</p><p><img src="/2020/09/1601194986992/1601194986992/20200928151238.png" alt="20200928151238"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改为加载目录下的 redis.windows.conf 文件配置，由于我修改了配置文件端口为 6377，<br>故执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下：</p><pre><code>D:\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf</code></pre><p><img src="/2020/09/1601194986992/1601194986992/20200928151952.png" alt="20200928151952"></p><h3 id="bat启动"><a href="#bat启动" class="headerlink" title="bat启动"></a>bat启动</h3><p>创建快捷启动，在根目录下，新建txt文件，填写以下内容，保存后修改txt的文件后缀为bat，双击即可启动；</p><pre><code>@echo offredis-server.exe redis.windows.conf@pause</code></pre><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><p>创建服务启动，可保存跟随系统启动自运行；执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下：</p><pre><code>redis-server.exe --service-install redis.windows.conf</code></pre><p><img src="/2020/09/1601194986992/1601194986992/20200928152934.png" alt="20200928152934"><br>出现 #Redis successfully installed as a service.即完成；可在服务列表中查看名称为【Rides】的服务；</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>常用的redis服务命令，需在进入Redis的根目录下执行；<br>安装服务：redis-server.exe –service-install redis.windows.conf<br>开启服务：redis-server –service-start<br>停止服务：redis-server –service-stop<br>卸载服务：redis-server –service-uninstall</p><p><img src="/2020/09/1601194986992/1601194986992/20200928153643.png" alt="20200928153643"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Window10安装 Redis - 绿色版
    
    </summary>
    
    
      <category term="环境配置" scheme="https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Redis" scheme="https://www.zhuqiaolun.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Window10安装 Redis - 安装版</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1601194890597/1601194890597/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1601194890597/1601194890597/</id>
    <published>2020-09-27T08:21:30.000Z</published>
    <updated>2020-09-28T05:45:28.313Z</updated>
    
    <content type="html"><![CDATA[<p>Redis中文官方网站：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a><br>传送门：<a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi</a></p><p><img src="/2020/09/1601194890597/1601194890597/20200927163042.png" alt="20200927163042"></p><p>对文件进行一个说明：<br>Redis-x64-3.2.100.msi ：图形化安装文件<br>Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装<br>Redis-x64-3.2.100.zip ：.zip压缩格式源码<br>Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的msi文件，点击next;</p><p>1.勾选 I accept the terms in the License Agreement，点击next;<br><img src="/2020/09/1601194890597/1601194890597/20200927164140.png" alt="20200927164140"></p><p>2.更换安装目录，以及添加到环境变量path,以便开机启动，命名执行<br><img src="/2020/09/1601194890597/1601194890597/20200927164718.png" alt="20200927164718"></p><p>3.redis默认是 6379 端口，如果你不想用 6379 或者 6379 已经被其他程序占用，可以修改成其他端口。<br>添加到windows防火墙的选项保持默认就好。<br><img src="/2020/09/1601194890597/1601194890597/20200927165702.png" alt="20200927165702"></p><p>4.设置redis最大内存限制。默认100MB内存，但是可能是不够用的，所以改大一点，我这里修改成了1024MB。<br>可以根据自己的实际情况来更改设置。<br><img src="/2020/09/1601194890597/1601194890597/20200927170049.png" alt="20200927170049"></p><p>5.点击install即可<br><img src="/2020/09/1601194890597/1601194890597/20200927170251.png" alt="20200927170251"></p><p>至此安装结束。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开任务管理器，点击服务，查看服务列表中是否有一个名字叫做Redis的服务正在运行，如果有，说明安装并启动成功，<br><img src="/2020/09/1601194890597/1601194890597/20200927171019.png" alt="20200927171019"></p><p>进入安装目录下，执行 redis-cli命令：<br><img src="/2020/09/1601194890597/1601194890597/20200927170726.png" alt="20200927170726"></p><p>如果没有或者未成功启动，请删除服务之后对照如上步骤重新安装。<br>删除redis服务命令为 sc delete 服务名 ，需要注意删除服务需要使用管理员身份打开命令行窗口执行命令。</p><pre><code>sc delete Redis</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>使用的时候提示连不上，可以关闭保护模式：在redis安装目录找到“redis.windows-service.conf”：<br>查找protected-mode yes 改为 protected-mode no</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Window10安装 Redis - 安装版
    
    </summary>
    
    
      <category term="环境配置" scheme="https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Redis" scheme="https://www.zhuqiaolun.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 的 使用</title>
    <link href="https://www.zhuqiaolun.com/2020/09/1601024145664/1601024145664/"/>
    <id>https://www.zhuqiaolun.com/2020/09/1601024145664/1601024145664/</id>
    <published>2020-09-25T08:55:45.000Z</published>
    <updated>2020-11-11T07:05:43.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>jackson-databind 依赖 jackson-core 和 jackson-annotations，当添加 jackson-databind 之后， jackson-core 和 jackson-annotations 也随之添加到 Java 项目工程中。<br>在添加相关依赖包之后，就可以使用 Jackson。</p><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><pre><code>//在反序列化时忽略在 json 中存在但 Java 对象不存在的属性 mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false); //在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false) //在序列化时忽略值为 null 的属性 mapper.setSerializationInclusion(Include.NON_NULL); //忽略值为默认值的属性 mapper.setDefaultPropertyInclusion(Include.NON_DEFAULT);</code></pre><p>更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Jackson 根据它的默认方式序列化和反序列化 java 对象，若根据实际需要，灵活的调整它的默认方式，可以使用 Jackson 的注解。<br>常用的注解及用法如下：</p><p>@JsonProperty：用于属性，把属性的名称序列化时转换为另外一个名称。</p><pre><code>@JsonProperty("birth_date") private Date birthDate;</code></pre><p>@JsonFormat：用于属性或者方法，把属性的格式序列化时转换成指定的格式。</p><pre><code>@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss") public Date birthDate;</code></pre><p>@JsonPropertyOrder：用于类，指定属性在序列化时 json 中的顺序。</p><pre><code>@JsonPropertyOrder({ "birth_date", "name" }) public class Person{}</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Jackson 最常用的 API 就是基于”对象绑定” 的 ObjectMapper。<br>writeValue：将 java 对 象序列化 为 json，并 将 json 存 储成不同的格式，String（writeValueAsString），Byte Array（writeValueAsString），Writer， File，OutStream 和 DataOutput。<br>readValue：将不同的数据源像 String ， Byte Array， Reader，File，URL， InputStream 将 json 反序列化为 java 对象。</p><h4 id="实体对象转化字符串"><a href="#实体对象转化字符串" class="headerlink" title="实体对象转化字符串"></a>实体对象转化字符串</h4><p><img src="/2020/09/1601024145664/1601024145664/20200925172117.png" alt="20200925172117"></p><h4 id="字符串转化键值对象"><a href="#字符串转化键值对象" class="headerlink" title="字符串转化键值对象"></a>字符串转化键值对象</h4><p><img src="/2020/09/1601024145664/1601024145664/20200925174105.png" alt="20200925174105"></p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>map：<br><img src="/2020/09/1601024145664/1601024145664/20200925175422.png" alt="20200925175422"></p><p>list：<br><img src="/2020/09/1601024145664/1601024145664/20200925175955.png" alt="20200925175955"></p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">try {</span><br><span class="line">    ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">    // 在反序列化时忽略在 json 中存在但 Java 对象不存在的属性</span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">    //在序列化时忽略值为 null 的属性 </span><br><span class="line">    mapper.setSerializationInclusion(Include.NON_NULL); </span><br><span class="line">    Person person = new Person();</span><br><span class="line">    person.setName("demo");</span><br><span class="line">    person.setAge(30);</span><br><span class="line">    // 将实体对象转化Json字符串</span><br><span class="line">    String jsonString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(person);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">    // 将Json字符串转化成实体对象</span><br><span class="line">    String jsonStringTemp = "{\"name\" : \"demo\",\"age\" : 30 ,\"sex\":\"男\"}";</span><br><span class="line">    System.out.println(jsonStringTemp);</span><br><span class="line">    Person deserializedPerson = mapper.readValue(jsonStringTemp, Person.class);</span><br><span class="line">    System.out.println(deserializedPerson);</span><br><span class="line">    // 将Json字符串转化成键值对象</span><br><span class="line">    ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">    Map&lt;String, Object&gt; jsonMap = objectMapper.readValue(jsonStringTemp, new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {});</span><br><span class="line">    System.out.println(jsonMap);</span><br><span class="line">    System.out.println(jsonMap.get("sex"));</span><br><span class="line">} catch (JsonProcessingException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "name" : "demo",</span><br><span class="line">  "age" : 30</span><br><span class="line">}</span><br><span class="line">{"name" : "demo","age" : 30 ,"sex":"男"}</span><br><span class="line">Person [name=demo, sex=男, age=30]</span><br><span class="line">{name=demo, age=30, sex=男}</span><br><span class="line">男</span><br></pre></td></tr></tbody></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">ObjectNode objectNode = objectMapper.createObjectNode();</span><br><span class="line">objectNode.put("name", "张三");</span><br><span class="line">objectNode.put("age", 30);</span><br><span class="line">ArrayNode arrayNode = objectMapper.createArrayNode();</span><br><span class="line">arrayNode.add("Java");</span><br><span class="line">arrayNode.add("Python");</span><br><span class="line">objectNode.set("job", arrayNode);</span><br><span class="line">System.out.println(objectNode.toString());</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{"name":"张三","age":30,"job":["Java","Python"]}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Jackson 是当前用的比较广泛的，用来序列化和反序列化 json 的 Java 的开源框架
    
    </summary>
    
    
      <category term="Jackson" scheme="https://www.zhuqiaolun.com/categories/Jackson/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
</feed>
