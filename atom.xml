<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhuqiaolun - 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuqiaolun.com/"/>
  <updated>2020-07-25T06:24:14.582Z</updated>
  <id>https://www.zhuqiaolun.com/</id>
  
  <author>
    <name>zhuqiaolun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka搭建 四 （SpringBoot调用）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/25/1595654393778-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/07/25/1595654393778-hello/</id>
    <published>2020-07-25T05:19:53.000Z</published>
    <updated>2020-07-25T06:24:14.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka end --&gt;</span>      </span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  #  基本配置</span><br><span class="line"> kafka:</span><br><span class="line">   # 以逗号分隔的地址列表，用于建立与 Kafka 集群的初始连接 (kafka 默认的端口号为 9092)</span><br><span class="line">   bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">   # 定义生产者</span><br><span class="line">   producer:</span><br><span class="line">     client-id: kafka.client.id</span><br><span class="line">     # 发生错误后，消息重发的次数。</span><br><span class="line">     retries: 0</span><br><span class="line">     #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。</span><br><span class="line">     batch-size: 16384</span><br><span class="line">     # 设置生产者内存缓冲区的大小。</span><br><span class="line">     buffer-memory: 33554432</span><br><span class="line">     # 键的序列化方式</span><br><span class="line">     key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # 值的序列化方式</span><br><span class="line">     value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。</span><br><span class="line">     # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。</span><br><span class="line">     # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。</span><br><span class="line">     acks: 1</span><br><span class="line">   # 定义消费者</span><br><span class="line">   consumer:</span><br><span class="line">     # 自动提交的时间间隔 在 spring boot 2.X 版本中这里采用的是值的类型为 Duration 需要符合特定的格式，如 1S,1M,2H,5D</span><br><span class="line">     auto-commit-interval: 3S</span><br><span class="line">     # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span><br><span class="line">     # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span><br><span class="line">     # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录</span><br><span class="line">     auto-offset-reset: earliest</span><br><span class="line">     # 是否自动提交偏移量，默认值是 true,为了避免出现重复数据和数据丢失，可以把它设置为 false,然后手动提交偏移量</span><br><span class="line">     enable-auto-commit: true</span><br><span class="line">     # 键的反序列化方式</span><br><span class="line">     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">     # 值的反序列化方式</span><br><span class="line">     value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">   listener:</span><br><span class="line">     # 在侦听器容器中运行的线程数(消费者个数即可)</span><br><span class="line">     concurrency: 5</span><br><span class="line">     </span><br><span class="line">demon:</span><br><span class="line">  #消费者配置</span><br><span class="line">  mqConfig: </span><br><span class="line">    # 监听的主题topic</span><br><span class="line">    topics: test,first,second,third   </span><br><span class="line">    topic:</span><br><span class="line">      # 监听的主题first的消息执行类</span><br><span class="line">      first: com.demon.springbootkafka.listener.consumer.message.FirstMessage</span><br><span class="line">      # 监听的主题second的消息执行类</span><br><span class="line">      second: com.demon.springbootkafka.listener.consumer.message.SecondMessage</span><br></pre></td></tr></tbody></table></figure><h3 id="类配置"><a href="#类配置" class="headerlink" title="类配置"></a>类配置</h3><p>mq的消费者配置类：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @className: MqProperties.java</span><br><span class="line"> * @description:  mq的消费者配置类，映射 配置文件里面的值</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2020/6/16 18:00</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = "demon.mqConfig")</span><br><span class="line">@Data</span><br><span class="line">public class MqConsumerTopicConfig {</span><br><span class="line">    Map&lt;String,Class&lt;?&gt;&gt; topic;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>KafKaProducerService</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.service;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerService</span><br><span class="line"> * @Description: 生产者service</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">public interface KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息没有回执</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessage(String topic, String key, String data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息同步有阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws InterruptedException 异常</span><br><span class="line">     * @throws ExecutionException 异常</span><br><span class="line">     * @throws TimeoutException 异常</span><br><span class="line">     */</span><br><span class="line">    Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息异步无阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessageAsync(String topic, String key, String data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>KafKaProducerServiceImpl:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.service.impl;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.kafka.support.SendResult;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerServiceImpl</span><br><span class="line"> * @Description: 生产者service的实现，负责执行消息发送</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class KafKaProducerServiceImpl implements com.demon.springbootkafka.service.KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  构建待发送的消息</span><br><span class="line">     * @param topic topic</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data data</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    private ProducerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> getRecord(String topic, String key, String data){</span><br><span class="line">        if(key == null){</span><br><span class="line">            return  new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,data);</span><br><span class="line">        }else{</span><br><span class="line">            return new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,key,data);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessage(String topic, String key, String data){</span><br><span class="line">        kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException {</span><br><span class="line">        SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> stringStringSendResult = kafkaTemplate.send(getRecord(topic, key, data)).get(1, TimeUnit.SECONDS);</span><br><span class="line">        System.out.println(stringStringSendResult.getProducerRecord().timestamp());</span><br><span class="line">        return stringStringSendResult.getProducerRecord().timestamp();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessageAsync(String topic, String key, String data) {</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; sendResultListenableFuture = kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">        // 发送消息回调</span><br><span class="line">        //noinspection NullableProblems</span><br><span class="line">        sendResultListenableFuture.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() {</span><br><span class="line">            /** 发送成功回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> sendResultMap) {</span><br><span class="line">                log.debug("发送消息成功：" + sendResultMap);</span><br><span class="line">            }</span><br><span class="line">            /** 发送失败回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Throwable throwable) {</span><br><span class="line">                log.debug("发送消息失败："+ throwable.getMessage());</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者监听"><a href="#生产者监听" class="headerlink" title="生产者监听"></a>生产者监听</h3><p>KafkaSendResultHandler：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.producer;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line">import org.springframework.kafka.support.ProducerListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaSendResultHandler</span><br><span class="line"> * @Description: 发送消息结果回调</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:55</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaSendResultHandler implements ProducerListener {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSuccess(ProducerRecord producerRecord, RecordMetadata recordMetadata) {</span><br><span class="line">        log.info("发送消息监听成功 : " + producerRecord.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(ProducerRecord producerRecord, Exception exception) {</span><br><span class="line">        log.info("发送消息监听失败 : " + exception);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>KafkaConsumerService：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.config.MqConsumerTopicConfig;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConsumerService</span><br><span class="line"> * @Description: 消费者监听消息,通过类的反射执行topic消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 14:44</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaConsumerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private MqConsumerTopicConfig mqConsumerTopicConfig;</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = "#{'${demon.mqConfig.topics}'.split(',')}", groupId = "test-group")</span><br><span class="line">    public void receive(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        String topic = record.topic();</span><br><span class="line">        log.info("------ " + topic + " 消费者处理消息------");</span><br><span class="line">        try {</span><br><span class="line">            if (mqConsumerTopicConfig.getTopic().containsKey(topic)) {</span><br><span class="line">                String classPath = mqConsumerTopicConfig.getTopic().get(topic).getName();</span><br><span class="line">                try {</span><br><span class="line">                    Class<span class="php"><span class="meta">&lt;?</span>&gt; c1s = <span class="class"><span class="keyword">Class</span>.<span class="title">forName</span>(<span class="title">classPath</span>);</span></span></span><br><span class="line"><span class="php">                    <span class="comment">//判断是否有实现ConsumerMessageExecute消息处理接口，否则不予执行</span></span></span><br><span class="line"><span class="php">                    <span class="keyword">if</span> (c1s.getInterfaces().length &gt; <span class="number">0</span> &amp;&amp; c1s.getInterfaces()[<span class="number">0</span>].equals(ConsumerMessageExecute<span class="class">.<span class="keyword">class</span>)) </span>{</span></span><br><span class="line"><span class="php">                        <span class="comment">//获得Class的Method对象,参数为方法名,参数列表的类型Class对象</span></span></span><br><span class="line"><span class="php">                        Method method = c1s.getMethod(<span class="string">"execute"</span>, ConsumerRecord<span class="class">.<span class="keyword">class</span>);</span></span></span><br><span class="line"><span class="php">                        <span class="comment">//invoke方法，参数为cls实例对象，和想要调用的方法参数</span></span></span><br><span class="line"><span class="php">                        Boolean value = (Boolean) method.invoke(c1s.newInstance(), record);</span></span><br><span class="line"><span class="php">                        <span class="comment">//输出invoke方法的返回值</span></span></span><br><span class="line"><span class="php">                        System.out.println(<span class="string">"execute方法的返回值："</span> + value);</span></span><br><span class="line"><span class="php">                    } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                        log.error(<span class="string">"============ 调用class：{} 错误:{}"</span>, classPath, <span class="string">"此类没有实现 MessageExecute 接口！！！"</span>);</span></span><br><span class="line"><span class="php">                    }</span></span><br><span class="line"><span class="php">                } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">                    e.printStackTrace();</span></span><br><span class="line"><span class="php">                    log.error(<span class="string">"============ 调用class：{} 异常：{}"</span>, classPath, e);</span></span><br><span class="line"><span class="php">                }</span></span><br><span class="line"><span class="php">            } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                log.error(<span class="string">"============ {}不存在"</span>, topic);</span></span><br><span class="line"><span class="php">            }</span></span><br><span class="line"><span class="php">        } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">            e.printStackTrace();</span></span><br><span class="line"><span class="php">        }</span></span><br><span class="line"><span class="php">    }</span></span><br><span class="line"><span class="php">}</span></span><br></pre></td></tr></tbody></table></figure><p>ConsumerMessageExecute：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息执行统一接口</span><br><span class="line"> * @ClassName: MessageExecute</span><br><span class="line"> * @Description: 消息实现接口，必须实现此接口，否则无法执行消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/5/24 12:55</span><br><span class="line"> */</span><br><span class="line">public interface ConsumerMessageExecute {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消费者 消息执行方法</span><br><span class="line">     * @param record 消息体</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>FirstMessage:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: FirstMessage</span><br><span class="line"> * @Description: 监听topic【first】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:14</span><br><span class="line"> */</span><br><span class="line">public class FirstMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SecondMessage:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: MessageUrgent</span><br><span class="line"> * @Description: 监听topic【second】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:15</span><br><span class="line"> */</span><br><span class="line">public class SecondMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>SpringBootKafkaApplicationTests：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.demon.springbootkafka.service.KafKaProducerService;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootKafkaApplicationTests {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafKaProducerService kafKaProducerService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessage() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessage(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageAsync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessageAsync(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageSync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        JSONObject jsonObject = new JSONObject(true);</span><br><span class="line">        jsonObject.put("time",System.currentTimeMillis());</span><br><span class="line">        String data = jsonObject.toJSONString();</span><br><span class="line">        try {</span><br><span class="line">            kafKaProducerService.sendStandardMessageSync(topic, key, data);</span><br><span class="line">        } catch (InterruptedException | TimeoutException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>KafkaConfig:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka.config;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClientConfig;</span><br><span class="line">import org.springframework.boot.autoconfigure.kafka.KafkaProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.core.KafkaAdmin;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConfig</span><br><span class="line"> * @Description: KafkaConfig 配置,操作topic</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 18:28</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaConfig {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaProperties kafkaProperties;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     创建一个kafka管理类，相当于rabbitMQ的管理类rabbitAdmin,</span><br><span class="line">     *     没有此bean无法自定义的使用adminClient创建topic</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public KafkaAdmin kafkaAdmin() {</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> props = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        //配置Kafka实例的连接地址</span><br><span class="line">        //kafka的地址，不是zookeeper</span><br><span class="line">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers().get(0));</span><br><span class="line">        return new KafkaAdmin(props);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     kafka客户端，在spring中创建这个bean之后可以注入并且创建topic,</span><br><span class="line">     *     用于集群环境，创建对个副本</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public AdminClient adminClient() {</span><br><span class="line">        return AdminClient.create(kafkaAdmin().getConfig());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SpringBootKafkaApplicationTests_topic:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.apache.kafka.clients.admin.*;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">class SpringBootKafkaApplicationTests_topic {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AdminClient adminClient;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void listTopics(){</span><br><span class="line">        try {</span><br><span class="line">            ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">            Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">            for (String topic : topics) {</span><br><span class="line">                System.out.println(topic);</span><br><span class="line">            }</span><br><span class="line">        } catch (InterruptedException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void createTopic() {</span><br><span class="line">        ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        NewTopic newTopic = new NewTopic("test1", 2, (short) 1);</span><br><span class="line">        topics.add(newTopic);</span><br><span class="line">        CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">        System.out.println( JSON.toJSONString(result));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void deleteTopics() {</span><br><span class="line">        DeleteTopicsResult deleteTopicsResult = adminClient.deleteTopics(Collections.singletonList("test1"));</span><br><span class="line">        System.out.println( JSON.toJSONString(deleteTopicsResult));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      SpringBoot调用kafka服务
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 三 （Java普通调用）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/25/1595649722982-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/07/25/1595649722982-hello/</id>
    <published>2020-07-25T04:02:02.000Z</published>
    <updated>2020-07-25T05:13:40.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Topic操作"><a href="#Topic操作" class="headerlink" title="Topic操作"></a>Topic操作</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.CommonClientConfigs;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.CreateTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.DeleteTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.ListTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.NewTopic;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Topic操作</span><br><span class="line"> */</span><br><span class="line">public class CreateTopics {</span><br><span class="line">private static AdminClient adminClient = null;</span><br><span class="line">/**</span><br><span class="line"> * 初始化adminClient</span><br><span class="line"> */</span><br><span class="line">@Before</span><br><span class="line">public  void getAdminClient() {</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");</span><br><span class="line">adminClient = AdminClient.create(props);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取所有Topic</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void getTopicList() {</span><br><span class="line">try {</span><br><span class="line">ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">for (String topic : topics) {</span><br><span class="line">System.out.println(topic);</span><br><span class="line">}</span><br><span class="line">} catch (InterruptedException | ExecutionException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Topic 创建了3个名为"first", "second","third"，分区数为1，复制因子为1的Topic.</span><br><span class="line"> * 创建完成，返回null</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public  void getCreateTopic() {</span><br><span class="line">ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span>();</span><br><span class="line">topics.add(new NewTopic("test", 4, (short) 1));</span><br><span class="line">        topics.add(new NewTopic("first", 4, (short) 1));</span><br><span class="line">topics.add(new NewTopic("second", 4, (short) 1));</span><br><span class="line">topics.add(new NewTopic("third", 4, (short) 1));</span><br><span class="line">CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">try {</span><br><span class="line">System.out.println(result.all().get());</span><br><span class="line">} catch (InterruptedException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} catch (ExecutionException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除Topic</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public  void getDeleteTopic() {</span><br><span class="line">DeleteTopicsResult deleteTopicsResult =adminClient.deleteTopics(Collections.singleton("test"));</span><br><span class="line">System.out.println(JSONObject.toJSONString(deleteTopicsResult));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 关闭连接</span><br><span class="line"> */</span><br><span class="line">@After</span><br><span class="line">public  void afterClass() {</span><br><span class="line">adminClient.close();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="普通生产者"><a href="#普通生产者" class="headerlink" title="普通生产者"></a>普通生产者</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void testProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("retries", 0);</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span>(props);</span><br><span class="line">    for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">        producer.send(new ProducerRecord&lt;String, String&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">    }</span><br><span class="line">    producer.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="事务生产者"><a href="#事务生产者" class="headerlink" title="事务生产者"></a>事务生产者</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void testTransactionProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("transactional.id", "my-transactional-id");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;&gt;</span>(props, new StringSerializer(),new StringSerializer());</span><br><span class="line">    producer.initTransactions();</span><br><span class="line">    try {</span><br><span class="line">        producer.beginTransaction();</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">3</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">            producer.send(new ProducerRecord&lt;&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        }</span><br><span class="line">        producer.commitTransaction();</span><br><span class="line">    } catch (ProducerFencedException | OutOfOrderSequenceException | AuthorizationException e) {</span><br><span class="line">        // We can't recover from these exceptions, so our only option is to close the</span><br><span class="line">        // producer and exit.</span><br><span class="line">        producer.close();</span><br><span class="line">    } catch (KafkaException e) {</span><br><span class="line">        // For all other exceptions, just abort the transaction and try again.</span><br><span class="line">        producer.abortTransaction();</span><br><span class="line">    } finally {</span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer {</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">// 定义kakfa 服务的地址，不需要将所有broker指定上 </span><br><span class="line">props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">// 制定consumer group </span><br><span class="line">props.put("group.id", "custom_group_id");</span><br><span class="line">// 是否自动确认offset </span><br><span class="line">props.put("enable.auto.commit", "true");</span><br><span class="line">// 自动确认offset的时间间隔 </span><br><span class="line">props.put("auto.commit.interval.ms", "1000");</span><br><span class="line">// key的序列化类</span><br><span class="line">props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">// value的序列化类 </span><br><span class="line">props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">// 定义consumer </span><br><span class="line">KafkaConsumer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> consumer = new KafkaConsumer<span class="tag">&lt;&gt;</span>(props);</span><br><span class="line">// 消费者订阅的topic, 可同时订阅多个 </span><br><span class="line">consumer.subscribe(Arrays.asList("test","first", "second","third"));</span><br><span class="line">while (true) {</span><br><span class="line">// 读取数据，读取超时时间为100ms </span><br><span class="line">ConsumerRecords<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> records = consumer.poll(Duration.ofMillis(100));</span><br><span class="line">for (ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> record : records)</span><br><span class="line">System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="集群使用"><a href="#集群使用" class="headerlink" title="集群使用"></a>集群使用</h3><p>在配置中将bootstrap.servers，修改以下方式即可，需要将所有broker指定写上<br> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props.put("bootstrap.servers", "127.0.0.1:9092,127.0.0.2:9092,127.0.0.3:9092");</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Java调用kafka服务
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 二 （集群）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/24/1595582052033-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/07/24/1595582052033-hello/</id>
    <published>2020-07-24T09:14:12.000Z</published>
    <updated>2020-07-25T05:12:07.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br>下载完成后复制一式三份，完成集群部署至少需要三台以及三台以上的服务。</p><p>kafka版本:kafka_2.12-2.5.0<br>三台主机IP 127.0.0.1、127.0.0.2、127.0.0.3</p><h3 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka配置</h3><h4 id="第一台"><a href="#第一台" class="headerlink" title="第一台"></a>第一台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h4 id="第二台"><a href="#第二台" class="headerlink" title="第二台"></a>第二台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://127.0.0.2:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h4 id="第三台"><a href="#第三台" class="headerlink" title="第三台"></a>第三台</h4><p>server.properties：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://127.0.0.3:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><h3 id="zookeeper配置"><a href="#zookeeper配置" class="headerlink" title="zookeeper配置"></a>zookeeper配置</h3><p>zookeeper可统一配置，zookeeper.properties：<br> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line"># maxClientCnxns = 0 # 注释掉该配置</span><br><span class="line">admin.enableServer=false</span><br><span class="line">#设置连接参数，添加如下配置</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">#设置broker Id的服务地址</span><br><span class="line">server.1=127.0.0.1:2888:3888</span><br><span class="line">server.2=127.0.0.2:2888:3888</span><br><span class="line">server.3=127.0.0.3:2888:3888</span><br></pre></td></tr></tbody></table></figure><br>同时在zookeeper数据目录dataDir下添加id配置，在各台服务的zookeeper数据目录添加myid文件且无后缀名，写入各自服务broker.id属性值，<br><img src="/2020/07/24/1595582052033-hello/20200725114405.png" alt="20200725114405"><br><img src="/2020/07/24/1595582052033-hello/20200725114520.png" alt="20200725114520"><br><img src="/2020/07/24/1595582052033-hello/20200725114552.png" alt="20200725114552"><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      kafka集群搭建 - 使用内置Zookeeper
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka搭建 一 （单机）</title>
    <link href="https://www.zhuqiaolun.com/2020/07/24/1595581721604-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/07/24/1595581721604-hello/</id>
    <published>2020-07-24T09:08:41.000Z</published>
    <updated>2020-07-24T10:45:16.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在刚开始学习Kafka的时候，安装Kafka时说Kafka依赖ZooKeeper，所以想要安装Kafka必须先安装ZooKeeper。<br>但是在下载Kafka的时候，官网上说，Kafka 0.5.x版本以上已经自带ZooKeeper，不需要自己安装ZooKeeper。<br>但在使用自带ZooKeeper也没有啥缺陷，反倒针对特定版本人家 Kafka 已经验证过其稳定性了。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br><img src="/2020/07/24/1595581721604-hello/20200724172452.png" alt="20200724172452"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压文件<br>打开 kafka_2.12-2.5.0\config<br>从文本编辑器里打开 server.properties,添加或者修改内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listeners=PLAINTEXT://10.200.47.142:9092</span><br><span class="line">log.dirs=D:\\kafka_2.12-2.5.0\\logs\\kafka</span><br><span class="line">num.partitions=4</span><br><span class="line">zookeeper.connect=127.0.0.1:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure><p>端口号可以被任意修改。如果端口号设置为小于1024，那么kafka需要以root身份启动，不指定的话，按照默认9092<br>【service.properties】port = 19092<br>【connect-distributed.properties 】bootstrap.servers=localhost:19092<br>【producer.properties 】bootstrap.servers=localhost:19092<br>【connect-standalone.properties 】bootstrap.servers=localhost:19092<br>【consumer.properties 】bootstrap.servers=localhost:19092</p><p>从文本编辑器里打开 zookeeper.properties,添加或者修改内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br></pre></td></tr></tbody></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在根目录下编写bat文件启动：</p><p>1.start-zookeeper.bat内容如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title zookeeper-21810 &amp;&amp; .\bin\windows\zookeeper-server-start .\config\zookeeper.properties"</span><br></pre></td></tr></tbody></table></figure><p>2.start-kafka.bat</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title kafka_2.11-2.4.1-9092 &amp;&amp; .\bin\windows\kafka-server-start.bat .\config\server.properties"</span><br></pre></td></tr></tbody></table></figure><p>按照顺序启动，即可执行，</p><p><img src="/2020/07/24/1595581721604-hello/20200724175212.png" alt="20200724175212"><br><img src="/2020/07/24/1595581721604-hello/20200724175232.png" alt="20200724175232"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      kafka搭建 - 使用内置Zookeeper
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://www.zhuqiaolun.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 三</title>
    <link href="https://www.zhuqiaolun.com/2020/06/23/1592899073321-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/23/1592899073321-hello/</id>
    <published>2020-06-23T07:57:53.000Z</published>
    <updated>2020-06-23T08:50:57.509Z</updated>
    
    <content type="html"><![CDATA[<p>前面是使用的配置会导致JVM不断重启，需要加JVM参数以及设置，同时设置服务开机启动；</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新增配置参数如下：</p><pre><code>wrapper.jmx=falsewrapper.on_exit.0=SHUTDOWNwrapper.on_exit.default=RESTARTwrapper.ntservice.interactive = true# 服务开机启动wrapper.ntservice.starttype=AUTO_STARTwrapper.tray = true# 监测JVM死锁wrapper.java.monitor.deadlock = truewrapper.java.monitor.heap = truewrapper.java.monitor.gc.restart = true# Java Heap 初始化大小(单位：MB)wrapper.java.initmemory=128# Java Heap 最大值(单位：MB)wrapper.java.maxmemory=128# 32/64位选择，true为自动选择wrapper.java.additional.auto_bits=TRUE</code></pre><h3 id="检测JVM参数"><a href="#检测JVM参数" class="headerlink" title="检测JVM参数"></a>检测JVM参数</h3><p>可以用jps+jmap监测即可<br>jps:<br><img src="/2020/06/23/1592899073321-hello/20200623161416.png" alt="20200623161416"><br>jmap -heap xxxxx<br><img src="/2020/06/23/1592899073321-hello/20200623161506.png" alt="20200623161506"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 二</title>
    <link href="https://www.zhuqiaolun.com/2020/06/23/1592898236483-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/23/1592898236483-hello/</id>
    <published>2020-06-23T07:43:56.000Z</published>
    <updated>2020-06-23T07:57:19.579Z</updated>
    
    <content type="html"><![CDATA[<p>前面在有Java环境的情况下的设置，现在假设我们不存在Java运行环境，也就是没有JRE与JDK，<br>所以需要拷贝java安装目录下的JRE（包含bin目录和相关lib）目录到需要的服务目录下</p><h3 id="拷贝JRE"><a href="#拷贝JRE" class="headerlink" title="拷贝JRE"></a>拷贝JRE</h3><p>JRE目录<br><img src="/2020/06/23/1592898236483-hello/20200623154737.png" alt="20200623154737"><br>拷贝JRE目录到服务目录<br><img src="/2020/06/23/1592898236483-hello/20200623154926.png" alt="20200623154926"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>利用拷贝过去的jre目录下的jar包和bin\java.exe，修改wrapper.java.command的值</p><pre><code>wrapper.java.command=../jre1.8.0_45/bin/java.exe</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>发布Java程序为Windows服务 一</title>
    <link href="https://www.zhuqiaolun.com/2020/06/23/1592889892770-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/23/1592889892770-hello/</id>
    <published>2020-06-23T05:24:52.000Z</published>
    <updated>2020-06-23T08:24:59.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>有时候我们希望我们java写的程序作为服务注册到系统中，Java Service Wrapper 是目前较为流行的将Java程序部署成Windows服务的解决方案</p><h3 id="下载serviceWrapper包"><a href="#下载serviceWrapper包" class="headerlink" title="下载serviceWrapper包"></a>下载serviceWrapper包</h3><p>网址：<a href="https://www.krenger.ch/blog/category/windows/" target="_blank" rel="noopener">https://www.krenger.ch/blog/category/windows/</a><br><img src="/2020/06/23/1592889892770-hello/20200623133038.png" alt="20200623133038"></p><p>下载zip压缩文件<br><img src="/2020/06/23/1592889892770-hello/20200623133123.png" alt="20200623133123"></p><h3 id="解压serviceWrapper包"><a href="#解压serviceWrapper包" class="headerlink" title="解压serviceWrapper包"></a>解压serviceWrapper包</h3><p>解压wrapper-windows-x86-64-3.5.43.zip<br><img src="/2020/06/23/1592889892770-hello/20200623133832.png" alt="20200623133832"><br>解压出来的文件多，但有些不是必须要的</p><h3 id="注册一个简单的服务"><a href="#注册一个简单的服务" class="headerlink" title="注册一个简单的服务"></a>注册一个简单的服务</h3><p>准备一个目录 建议在非中文且不含有空格的目录下<br>目录结构如下：<br><img src="/2020/06/23/1592889892770-hello/20200623134921.png" alt="20200623134921"><br>lang目录是存放支持其他语言的语言包，一般用不到<br>mylib目录是存放我们的程序包</p><p>然后将下载的wrapper目录下的文件拷贝到我们上面建的目录:</p><pre><code>···\bin\InstallTestWrapper-NT.bat           -&gt; D:\test\java-service-hello\bin\InstallTestWrapper-NT.bat···\bin\StartTestWrapper-NT.bat             -&gt; D:\test\java-service-hello\bin\StartTestWrapper-NT.bat···\bin\StopTestWrapper-NT.bat              -&gt; D:\test\java-service-hello\bin\StopTestWrapper-NT.bat···\bin\TestWrapper.bat                     -&gt; D:\test\java-service-hello\bin\TestWrapper.bat···\bin\UninstallTestWrapper-NT.bat         -&gt; D:\test\java-service-hello\bin\UninstallTestWrapper-NT.bat···\bin\wrapper.exe                         -&gt; D:\test\java-service-hello\bin\wrapper.exe···\conf\wrapper.conf                       -&gt; D:\test\java-service-hello\conf\wrapper.conf···\lib\wrapper.jar                         -&gt; D:\test\java-service-hello\lib\wrapper.jar···\lib\wrapper.dll                         -&gt; D:\test\java-service-hello\lib\wrapper.dll</code></pre><h3 id="java程序"><a href="#java程序" class="headerlink" title="java程序"></a>java程序</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.io.file.FileAppender;</span><br><span class="line">import cn.hutool.core.lang.UUID;</span><br><span class="line">public class JarHelloApp {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">while (true) {</span><br><span class="line">try {</span><br><span class="line">System.out.println("Hello World!");</span><br><span class="line">String str = UUID.fastUUID().toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line">//每隔3秒创建文件并写入内容</span><br><span class="line">FileAppender appender = new FileAppender(new File("D:\\test\\jar\\"+str+".txt"), 16, true);</span><br><span class="line">TimeUnit.SECONDS.sleep(3);</span><br><span class="line">appender.append(DateUtil.now());</span><br><span class="line">appender.flush();</span><br><span class="line">appender.toString();</span><br><span class="line">} catch (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>引入的依赖</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="java程序打包"><a href="#java程序打包" class="headerlink" title="java程序打包"></a>java程序打包</h3><p>由于采用eclipse所有打包流程：项目邮件 -&gt; Export -&gt; Java/Runnable JAR file -&gt; Next<br><img src="/2020/06/23/1592889892770-hello/20200623142924.png" alt="20200623142924"></p><p>导出项目设置<br><img src="/2020/06/23/1592889892770-hello/20200623143420.png" alt="20200623143420"></p><p>导出项目文件<br><img src="/2020/06/23/1592889892770-hello/20200623144319.png" alt="20200623144319"></p><p>将程序打成的包以及自己程序依赖的包放到mylib<br><img src="/2020/06/23/1592889892770-hello/20200623144449.png" alt="20200623144449"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>文件路径：D:\test\java-service-hello\conf\wrapper.conf<br>内容如下：</p><pre><code># jdk或者jre的java.exe路径，可通过环境变量获取wrapper.java.command=%JAVA_HOME%/bin/java.exe# wrapper.java.command=C:\Java\jre1.8.0_45\bin\java# 日志级别wrapper.java.command.loglevel=INFOwrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp# 执行的程序的main方法的类的路径wrapper.app.parameter.1=com.yetech.jar_hello.JarHelloApp# 依赖的包，第一个是wrapper包，第二个是自己打的包以及程序依赖包wrapper.java.classpath.1=../lib/wrapper.jarwrapper.java.classpath.2=../mylib/*.jar# 固定写法，依赖的wrapper的包wrapper.java.library.path.1=../lib# 日志配置 按照日期每天创建文件wrapper.logfile=../logs/wrapper.YYYYMMDD.logwrapper.logfile.rollmode=DATE# 服务名称以及描述信息wrapper.console.title=jar hello Serverwrapper.name=jarhelloserverwrapper.displayname=jar hello Serverwrapper.description=jar hello Server# 更多配置可对 jvm 配置</code></pre><h3 id="测试注册服务"><a href="#测试注册服务" class="headerlink" title="测试注册服务"></a>测试注册服务</h3><p>在服务目录下的bin目录下双击 TestWrapper.bat 文件，当程序执行正确时则表示可以注册服务<br>控制台测试<br><img src="/2020/06/23/1592889892770-hello/20200623150257.png" alt="20200623150257"></p><h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><p>在服务目录下执行（管理员模式）</p><pre><code>注册服务命令bin\wrapper.exe -i ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/23/1592889892770-hello/20200623151136.png" alt="20200623151136"><br>服务结果<br><img src="/2020/06/23/1592889892770-hello/20200623151201.png" alt="20200623151201"></p><pre><code>启动服务命令net start jarhelloserver或者bin\wrapper.exe -t ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/23/1592889892770-hello/20200623151449.png" alt="20200623151449"><br>服务结果<br><img src="/2020/06/23/1592889892770-hello/20200623151518.png" alt="20200623151518"></p><pre><code>停止服务命令net stop jarhelloserver或者bin\wrapper.exe -p ..\conf\wrapper.conf</code></pre><p> cmd结果<br> <img src="/2020/06/23/1592889892770-hello/20200623151717.png" alt="20200623151717"><br> 服务结果<br> <img src="/2020/06/23/1592889892770-hello/20200623151743.png" alt="20200623151743">  </p><pre><code>删除服务命令sc delete jarhelloserver或者bin\wrapper.exe -r ..\conf\wrapper.conf</code></pre><p>  cmd结果<br>  <img src="/2020/06/23/1592889892770-hello/20200623151956.png" alt="20200623151956"></p><h3 id="扩展-一"><a href="#扩展-一" class="headerlink" title="扩展 一"></a>扩展 一</h3><p>由于使用命名操作复杂，故在服务目录创建bat文件</p><p>install-service.bat</p><pre><code>@echo offstart cmd /c "title install-service &amp;&amp; bin\wrapper.exe -i ..\conf\wrapper.conf"</code></pre><p>uninstall-service.bat</p><pre><code>@echo offstart cmd /c "title uninstall-service &amp;&amp; bin\wrapper.exe -r ..\conf\wrapper.conf"</code></pre><p>start-service.bat</p><pre><code>@echo offstart cmd /c "title start-service &amp;&amp; bin\wrapper.exe -t ..\conf\wrapper.conf"</code></pre><p>stop-service.bat</p><pre><code>@echo offstart cmd /c "title stop-service &amp;&amp; bin\wrapper.exe -p ..\conf\wrapper.conf"</code></pre><h3 id="扩展-二"><a href="#扩展-二" class="headerlink" title="扩展 二"></a>扩展 二</h3><p>我们可以用上面的service wrapper的bin包中的bat文件进行服务操作<br>将下载解压后的wrapper-windows\bin中的部分文件复制到我们的服务\bin目录下<br><img src="/2020/06/23/1592889892770-hello/20200623161942.png" alt="20200623161942"><br>我们只需要点击上面的bat文件即可实现上面的操作：</p><pre><code>安装服务：InstallTestWrapper-NT.bat查询服务：QueryTestWrapper-NT.bat开启服务：StartTestWrapper-NT.bat停止服务：StopTestWrapper-NT.bat测试服务：TestWrapper.bat卸载服务：UninstallTestWrapper-NT.bat</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用 Java Service Wrapper 注册Windows服务
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置restTemplate访问https</title>
    <link href="https://www.zhuqiaolun.com/2020/06/23/1592881660483-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/23/1592881660483-hello/</id>
    <published>2020-06-23T03:07:40.000Z</published>
    <updated>2020-06-23T05:13:40.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  不需要版本号  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.security.KeyManagementException;</span><br><span class="line">import java.security.KeyStoreException;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">/**</span><br><span class="line"> * @ClassName: RestConfig</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/1 19:12</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">class RestTemplateConfig {</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {</span><br><span class="line">        TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true;</span><br><span class="line">        SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();</span><br><span class="line">        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();</span><br><span class="line">        //使用httpclient的factory</span><br><span class="line">        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setHttpClient(httpClient);</span><br><span class="line">        return new RestTemplate(requestFactory);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootApiApplicationTests {</span><br><span class="line">    @Resource</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads(){</span><br><span class="line">        String url = "https://www.baidu.com/";</span><br><span class="line">        String resp = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2020/06/23/1592881660483-hello/20200623115758.png" alt="20200623115758"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用restTemplate来访问https
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq学习三</title>
    <link href="https://www.zhuqiaolun.com/2020/06/12/1591944668470-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/12/1591944668470-hello/</id>
    <published>2020-06-12T06:51:08.000Z</published>
    <updated>2020-06-15T03:11:02.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入的maven依赖"><a href="#引入的maven依赖" class="headerlink" title="引入的maven依赖"></a>引入的maven依赖</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    addresses: 127.0.0.1:5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    connection-timeout: 15000</span><br><span class="line">    virtual-host: /</span><br><span class="line">    # 开启消息发送到交换器（Exchange）后触发回调</span><br><span class="line">    publisher-confirm-type: simple</span><br><span class="line">    # 开启消息发送到队列（Queue）后触发回调</span><br><span class="line">    publisher-returns: true</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        acknowledge-mode: manual  # 开启手动 ，否则confirm自动确认</span><br><span class="line">      simple:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        # 消息接收确认，可选模式：NONE（不确认）、AUTO（自动确认）、MANUAL（手动确认）</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">        # 最小线程数量</span><br><span class="line">        concurrency: 10</span><br><span class="line">        # 最大线程数量</span><br><span class="line">        max-concurrency: 10</span><br><span class="line">        # 每个消费者可能未完成的最大未确认消息数量</span><br><span class="line">        prefetch: 1</span><br><span class="line">    template:</span><br><span class="line">      # 交换机找不到QUEUE时，会调用Basic.Return 命令将消息返回给生产者</span><br><span class="line">      mandatory: true</span><br></pre></td></tr></tbody></table></figure><h3 id="声明绑定关系"><a href="#声明绑定关系" class="headerlink" title="声明绑定关系"></a>声明绑定关系</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 初始化项目 就会创建 交换器，路由，队列，如果在服务中存在交换器的属性或者队列的属性不同，则会出现异常</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig {</span><br><span class="line"></span><br><span class="line">    private static final String PRIORITY_QUEUE_NAME = "priority.topic_demo";</span><br><span class="line">    private static final String PRIORITY_TOPIC_ROUTING_KEY = "priority.topic.routingKey";</span><br><span class="line">    private static final String PRIORITY_EXCHANGE_NAME = "priority.topic.exchange.name";</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明消息队列</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_QUEUE_NAME)</span><br><span class="line">    public Queue priorityTopicDemo(){</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> arguments = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        arguments.put("x-max-priority", 255);</span><br><span class="line">        return new Queue(PRIORITY_QUEUE_NAME,true, false, false,arguments);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明了一个Topic类型的交换机，durable是持久化（重启rabbitmq这个交换机不会被自动删除）</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_EXCHANGE_NAME)</span><br><span class="line">    public Exchange priorityTopicExchangeName(){</span><br><span class="line">        return ExchangeBuilder.topicExchange(PRIORITY_EXCHANGE_NAME).durable(true).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明队列和交换机绑定关系，并且指定RoutingKey</span><br><span class="line">     * @param queue 队列</span><br><span class="line">     * @param exchange 交换机</span><br><span class="line">     * @return  返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding queueBindingTopic(@Qualifier(PRIORITY_QUEUE_NAME) Queue queue,@Qualifier(PRIORITY_EXCHANGE_NAME) Exchange exchange){</span><br><span class="line">        return BindingBuilder.bind(queue).to(exchange).with(PRIORITY_TOPIC_ROUTING_KEY).noargs();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloSender {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过exchange和routingKey的方式</span><br><span class="line">     * rabbitTemplate.sendAndReceive(String exchange, String routingKey, Message message)</span><br><span class="line">     * @param messageId  消息ID</span><br><span class="line">     * @param exchange  交换机</span><br><span class="line">     * @param routingKey 路由</span><br><span class="line">     * @param priority 优先级</span><br><span class="line">     * @param content 内容</span><br><span class="line">     */</span><br><span class="line">    public void sendAndReceive(String messageId, String exchange, String routingKey, Integer priority, String content) {</span><br><span class="line">        Message message = MessageBuilder.withBody(content.getBytes(Charset.forName("UTF-8")))</span><br><span class="line">              .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class="line">              .setMessageId(messageId)</span><br><span class="line">              .setPriority(priority)</span><br><span class="line">              .build();</span><br><span class="line">        CorrelationData correlationData = new CorrelationData();</span><br><span class="line">        correlationData.setId(messageId);</span><br><span class="line">        this.rabbitTemplate.convertAndSend(exchange, routingKey, message,correlationData);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloReceiver {</span><br><span class="line">      /**</span><br><span class="line">        * @param message 队列消息对象</span><br><span class="line">        */</span><br><span class="line">       @RabbitListener(queues = TopicData.PRIORITY_QUEUE_NAME)</span><br><span class="line">       public void queueNameTest1(Channel channel, Message message) {</span><br><span class="line">           try {</span><br><span class="line">               String stringBuilder = "消息ID: " + message.getMessageProperties().getMessageId() + "；" +</span><br><span class="line">                       "优先级: " + message.getMessageProperties().getPriority() + "；" +</span><br><span class="line">                       "消息内容: " + new String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">               //告诉服务器收到这条消息 已经被我消费了 可以在队列删掉 这样以后就不会再发了 否则消息服务器以为这条消息没处理掉 后续还会在发</span><br><span class="line">               channel.basicAck(message.getMessageProperties().getDeliveryTag(),true);</span><br><span class="line">               log.info(stringBuilder);</span><br><span class="line">           } catch (IOException e) {</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               try {</span><br><span class="line">                   //当发生异常时丢弃这条消息，或者 另行处理</span><br><span class="line">                   channel.basicNack(message.getMessageProperties().getDeliveryTag(), false,false);</span><br><span class="line">                   System.out.println("receiver fail");</span><br><span class="line">               } catch (IOException e1) {</span><br><span class="line">                   e1.printStackTrace();</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>自定义 RabbitTemplate.ConfirmCallback 实现类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitConfirmCallBack implements RabbitTemplate.ConfirmCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void confirm(CorrelationData correlationData, boolean ack, String cause) {</span><br><span class="line">        log.info("收到回调，成功发送到broker");</span><br><span class="line">        log.info("消息唯一标识: {}", correlationData.getId());</span><br><span class="line">        log.info("确认状态: {}", ack);</span><br><span class="line">        log.info("造成原因: {}", cause);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自定义 RabbitTemplate.ConfirmCallback 实现类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitReturnCallback  implements RabbitTemplate.ReturnCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {</span><br><span class="line">        log.info("收到回调，交换机找不到队列");</span><br><span class="line">        log.info("消息主体: {}", message);</span><br><span class="line">        log.info("回复编码: {}", replyCode);</span><br><span class="line">        log.info("回复内容: {}", replyText);</span><br><span class="line">        log.info("交换器: {}", exchange);</span><br><span class="line">        log.info("路由键: {}", routingKey);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加回调，配置 rabbitTemplate</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class RabbitTemplateInitializingBean implements InitializingBean {</span><br><span class="line"></span><br><span class="line">    private final RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet(){</span><br><span class="line">        rabbitTemplate.setConfirmCallback(new RabbitConfirmCallBack());</span><br><span class="line">        rabbitTemplate.setReturnCallback(new RabbitReturnCallback());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootRabbitmqExampleApplicationTest {</span><br><span class="line">    @Resource</span><br><span class="line">    private HelloSender helloSender;</span><br><span class="line">    @Test</span><br><span class="line">    void content(){</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        int number = 1;</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">number</span> ; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">messageId</span> = <span class="string">UUID.randomUUID().toString().replace(</span>"<span class="attr">-</span>","");</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">exchange</span> = <span class="string">"priority.topic.exchange.name"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">routingKey</span> = <span class="string">"priority.topic.routingKey"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">Integer</span> <span class="attr">priority</span> = <span class="string">r.nextInt(255);</span></span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">content</span> = <span class="string">"这是第["</span>+<span class="attr">i</span>+"]个消息";</span></span><br><span class="line"><span class="tag">            <span class="attr">helloSender.sendAndReceive</span>(<span class="attr">messageId</span>, <span class="attr">exchange</span>, <span class="attr">routingKey</span>, <span class="attr">priority</span>, <span class="attr">content</span>);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure><p>结果：<br><img src="/2020/06/12/1591944668470-hello/20200612180958.png" alt="20200612180958"></p><p>当删除交换机时的执行错误<br><img src="/2020/06/12/1591944668470-hello/20200615110247.png" alt="20200615110247"></p><p>当删除队列时的执行错误<br><img src="/2020/06/12/1591944668470-hello/20200615111036.png" alt="20200615111036"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用交换机topic+routingKey的模式
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMq" scheme="https://www.zhuqiaolun.com/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq学习二</title>
    <link href="https://www.zhuqiaolun.com/2020/06/12/1591941634146-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/12/1591941634146-hello/</id>
    <published>2020-06-12T06:00:34.000Z</published>
    <updated>2020-06-12T06:50:36.030Z</updated>
    
    <content type="html"><![CDATA[<p>引入的maven依赖</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import com.rabbitmq.client.AMQP;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class PriorityProducer {</span><br><span class="line">public final static String QUEUENAME = "priority.topic_demo";// 队列名称</span><br><span class="line">public final static String HOST = "localhost"; // 主机名</span><br><span class="line">public final static String USERNAME = "guest"; //用户名</span><br><span class="line">public final static String PASSWORD = "guest"; //密码</span><br><span class="line">public final static String EXCHANGE_NAME = "priority.topic.exchange.name"; //交换机</span><br><span class="line">public final static String ROUTING_KEY = "priority.topic.routingKey"; //路由</span><br><span class="line"></span><br><span class="line">public static void main(String[] arggs) throws IOException, TimeoutException {</span><br><span class="line">ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">connectionFactory.setPassword(USERNAME);</span><br><span class="line">connectionFactory.setUsername(PASSWORD);</span><br><span class="line">connectionFactory.setPort(5672);</span><br><span class="line">connectionFactory.setHost(HOST);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">// 创建交换机</span><br><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, "topic", true);</span><br><span class="line">// 创建优先级</span><br><span class="line">Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> args = new HashMap<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span>();</span><br><span class="line">args.put("x-max-priority", 255);//定义优先级最大值</span><br><span class="line">channel.queueDeclare(QUEUENAME, true, false, false, args);</span><br><span class="line">channel.queueBind(QUEUENAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">// 发送优先级消息</span><br><span class="line">for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag"><span class="attr">AMQP.BasicProperties.Builder</span> <span class="attr">builder</span> = <span class="string">new</span> <span class="attr">AMQP.BasicProperties.Builder</span>();</span></span><br><span class="line"><span class="tag">            <span class="attr">builder.messageId</span>(<span class="attr">UUID.randomUUID</span>()<span class="attr">.toString</span>());</span></span><br><span class="line"><span class="tag">            <span class="attr">if</span> (<span class="attr">i</span> % <span class="attr">2</span> != <span class="string">0)</span> {</span></span><br><span class="line"><span class="tag">                <span class="attr">builder.priority</span>(<span class="attr">i</span>); //判断 新增 优先级</span></span><br><span class="line"><span class="tag">            }<span class="attr">else</span>{</span></span><br><span class="line"><span class="tag">                <span class="attr">builder.priority</span>(<span class="attr">0</span>);</span></span><br><span class="line"><span class="tag">            }</span></span><br><span class="line"><span class="tag"><span class="attr">AMQP.BasicProperties</span> <span class="attr">properties</span> = <span class="string">builder.build();</span></span></span><br><span class="line"><span class="tag"><span class="attr">System.out.println</span>( ("<span class="attr">messages-</span>" + <span class="attr">i</span>));</span></span><br><span class="line"><span class="tag"><span class="attr">channel.basicPublish</span>(<span class="attr">EXCHANGE_NAME</span>, <span class="attr">ROUTING_KEY</span>, <span class="attr">properties</span>, ("<span class="attr">messages-</span>" + <span class="attr">i</span>)<span class="attr">.getBytes</span>());</span></span><br><span class="line"><span class="tag">}</span></span><br><span class="line"><span class="tag"><span class="attr">channel.close</span>();</span></span><br><span class="line"><span class="tag"><span class="attr">connection.close</span>();</span></span><br><span class="line"><span class="tag"><span class="attr">System.out.println</span>("客户端信息发送完毕！");</span></span><br><span class="line"><span class="tag">}</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import com.rabbitmq.client.DefaultConsumer;</span><br><span class="line">import com.rabbitmq.client.Envelope;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class PriorityConsumer {</span><br><span class="line">public final static String QUEUENAME = "priority.topic_demo";// 队列名称</span><br><span class="line">public final static String HOST = "localhost"; // 主机名</span><br><span class="line">public final static String USERNAME = "guest";</span><br><span class="line">public final static String PASSWORD = "guest";</span><br><span class="line">public final static String EXCHANGE_NAME = "priority.topic.exchange.name";</span><br><span class="line">public final static String ROUTING_KEY = "priority.topic.routingKey";</span><br><span class="line">public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {</span><br><span class="line">ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">connectionFactory.setPassword(PASSWORD);</span><br><span class="line">connectionFactory.setUsername(USERNAME);</span><br><span class="line">connectionFactory.setPort(5672);</span><br><span class="line">connectionFactory.setHost(HOST);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">DefaultConsumer c = new DefaultConsumer(channel) {</span><br><span class="line">@Override</span><br><span class="line">public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</span><br><span class="line">throws IOException {</span><br><span class="line">System.out.println(properties.getMessageId()+" - "+properties.getPriority()+" - "+ new String(body));</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">channel.basicConsume(QUEUENAME, true, c);</span><br><span class="line">System.out.println("消费端开启···");</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果：<br>生产者：<br><img src="/2020/06/12/1591941634146-hello/20200612143312.png" alt="20200612143312"></p><p>消费者：<br>当生产者在适度发送消息消费时 <span style="color:red">(没有消息积累)</span><br><img src="/2020/06/12/1591941634146-hello/20200612143421.png" alt="20200612143421"></p><p>当生产者在过度发送消息消费时 <span style="color:red">(有消息积累)</span><br><img src="/2020/06/12/1591941634146-hello/20200612144440.png" alt="20200612143421"></p><p>具有优先级的先执行操作，先进后出。<br>消费者可多个，当交换机和路由和队列名相同时则不会进行重复消费，在生产者发出消息后会进行轮询分发消费。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使用交换机topic+routingKey的模式
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMq" scheme="https://www.zhuqiaolun.com/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq学习一</title>
    <link href="https://www.zhuqiaolun.com/2020/06/11/1591869892000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/11/1591869892000-hello/</id>
    <published>2020-06-11T10:04:52.000Z</published>
    <updated>2020-06-15T02:54:13.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。</p><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><p>下载地址：​<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">https://www.erlang.org/downloads</a>，下载与系统对应的版本文件<br><img src="/2020/06/11/1591869892000-hello/20200611182450.png" alt="20200611182450"><br>安装时，一路 next 即可安装完成<br>设置环境变量，<br>    &nbsp;&nbsp;变量名：ERLANG_HOME<br>    &nbsp;&nbsp;变量值：D:\erl-23.0（安装根目录）<br><img src="/2020/06/11/1591869892000-hello/20200611182941.png" alt="20200611182941"></p><p>修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\bin;<br>打开cmd命令框，输入erl<br><img src="/2020/06/11/1591869892000-hello/20200611183057.png" alt="20200611183057"><br>至此，Erlang 安装完成</p><h3 id="安装-RabbitMq"><a href="#安装-RabbitMq" class="headerlink" title="安装 RabbitMq"></a>安装 RabbitMq</h3><p>下载地址：<a href="https://www.rabbitmq.com/install-windows-manual.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-windows-manual.html</a><br>本文选择解压缩安装 <a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.4/rabbitmq-server-windows-3.8.4.zip" target="_blank" rel="noopener">rabbitmq-server-windows-3.8.4.zip</a><br>配置环境变量：<br>    &nbsp;&nbsp;变量名：RABBITMQ_SERVER<br>    &nbsp;&nbsp;变量值：D:\rabbitmq_server-3.8.4（安装根目录）<br>打开cmd命令框，进入 安装目录<br>安装插件，命令：rabbitmq-plugins.bat enable rabbitmq_management<br>启动：rabbitmq-server.bat<br><img src="/2020/06/11/1591869892000-hello/20200611183733.png" alt="20200611183733"><br>rabbitmq启动成功，浏览器中<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，<br><img src="/2020/06/11/1591869892000-hello/20200611183828.png" alt="20200611183828"><br>输入guest,guest进入rabbitMQ管理控制台：<br><img src="/2020/06/11/1591869892000-hello/20200611183930.png" alt="20200611183930"><br>至此，rabbitMQ安装部署完成。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Windows下RabbitMQ安装及配置
    
    </summary>
    
    
      <category term="queue队列" scheme="https://www.zhuqiaolun.com/categories/queue%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMq" scheme="https://www.zhuqiaolun.com/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>修改hexo创建文章名称规则</title>
    <link href="https://www.zhuqiaolun.com/2020/06/10/1591760460000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/06/10/1591760460000-hello/</id>
    <published>2020-06-10T03:41:00.000Z</published>
    <updated>2020-06-12T06:58:22.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改hexo的module"><a href="#修改hexo的module" class="headerlink" title="修改hexo的module"></a>修改hexo的module</h3><p><img src="/2020/06/10/1591760460000-hello/20200612114143.png" alt="20200612114143"></p><p><img src="/2020/06/10/1591760460000-hello/20200612114144.png" alt="20200612114144"></p><p>添加前缀时间戳<br>新增文章操作： hexo new hello<br>INFO  Created: D:\workspace-webstorm\demon\blog\myblog\source_posts\1591933260490-hello.md</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      修改hexo创建文章名称规则
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.zhuqiaolun.com/categories/hexo/"/>
    
    
      <category term="hexo主题" scheme="https://www.zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客收录</title>
    <link href="https://www.zhuqiaolun.com/2020/05/29/1590766728000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/29/1590766728000-hello/</id>
    <published>2020-05-29T15:38:48.000Z</published>
    <updated>2020-06-12T05:51:27.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="​前言"><a href="#​前言" class="headerlink" title="​前言"></a>​前言</h3><p>​博客，分享才是真理。</p><h3 id="HTTPS认证"><a href="#HTTPS认证" class="headerlink" title="HTTPS认证"></a>HTTPS认证</h3><p>​找到 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a> -&gt; HTTPS认证<br><img src="/2020/05/29/1590766728000-hello/20200529235838.png" alt="20200529235838"><br><span style="color:red;">认证似乎能加速百度收录速度</span><br>在认证中，需要下载百度的专属识别文件，放在项目根目录，然后进行测试验证即可<br>配置301</p><pre><code>server {    listen       80;    server_name  www.zhuqiaolun.com;    if ($scheme = http ) {        return 301 https://www.zhuqiaolun.com$request_uri;    }    location / {        root   html;        index  index.html index.htm;    }}</code></pre><p>认证结果：<br><img src="/2020/05/29/1590766728000-hello/20200529235839.png" alt="20200529235839"></p><h3 id="安装网站地图插件"><a href="#安装网站地图插件" class="headerlink" title="安装网站地图插件"></a>安装网站地图插件</h3><p>先安装sitemap插件，生成网站地图</p><pre><code>npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save12</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>​修改博客根路径下的_config.yml配置文件中的url站点地址</p><pre><code>url: https://www.zhuqiaolun.com/                    # 在这儿填写你的博客域名root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks</code></pre><h3 id="验证xml文件"><a href="#验证xml文件" class="headerlink" title="验证xml文件"></a>验证xml文件</h3><p>​执行命令 hexo s 完之后就会在博客路径下生成 sitemap.xml 文件和 baidusitemap.xml 文件，可以通过 <a href="https://www.zhuqiaolun.com/baidusitemap.xml">https://www.zhuqiaolun.com/baidusitemap.xml</a> 查看该文件是否生成<br>sitemap.xml文件是搜索引擎通用的文件<br>baidusitemap.xml是百度专用的sitemap文件</p><h3 id="向百度提交链接"><a href="#向百度提交链接" class="headerlink" title="向百度提交链接"></a>向百度提交链接</h3><p>​找到 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>-&gt;普通收录 -&gt; 资源提交 -&gt; sitemap<br><img src="/2020/05/29/1590766728000-hello/20200530000410.png" alt="20200530000410"><br>在其中填写百度专用的baidusitemap.xml的请求路径 <a href="https://www.zhuqiaolun.com/baidusitemap.xml">https://www.zhuqiaolun.com/baidusitemap.xml</a><br><img src="/2020/05/29/1590766728000-hello/20200530001048.png" alt="20200530001048"></p><h3 id="收录结果"><a href="#收录结果" class="headerlink" title="收录结果"></a>收录结果</h3><p><img src="/2020/05/29/1590766728000-hello/20200530001050.png" alt="20200530001050"><br>通过认证之后进入baidusitemap提交，响应速度超快，不到5分钟就把链接收录完成</p><h3 id="查询收录结果"><a href="#查询收录结果" class="headerlink" title="查询收录结果"></a>查询收录结果</h3><p>访问 <a href="https://tool.chinaz.com/baidu/" target="_blank" rel="noopener">百度站长工具</a> 输入网址地址，点击查询，即可看到结果<br><img src="/2020/05/29/1590766728000-hello/20200530004503.png" alt="20200530004503"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      如何让hexo博客被百度收录
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.zhuqiaolun.com/categories/hexo/"/>
    
    
      <category term="hexo主题" scheme="https://www.zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装nginx环境</title>
    <link href="https://www.zhuqiaolun.com/2020/05/25/1590376771000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/25/1590376771000-hello/</id>
    <published>2020-05-25T03:19:31.000Z</published>
    <updated>2020-06-12T05:48:55.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><p>nginx 官网下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a><br>nginx 文件下载地址：<a href="https://nginx.org/download/" target="_blank" rel="noopener">https://nginx.org/download/</a><br>下载稳定版本即可<br><img src="/2020/05/25/1590376771000-hello/20200525112627.png" alt="20200525112627"></p><h3 id="上传nginx"><a href="#上传nginx" class="headerlink" title="上传nginx"></a>上传nginx</h3><pre><code>mkdir /usr/local/software           # 创建软件安装目录cd /usr/local/software              # 进入软件安装目录rz                                  # 上传nginx文件，需要安装 yum install lrzszll                                  # 查看上传文件tar -zxvf nginx-1.18.0.tar.gz       # 解压文件到当前目录</code></pre><p><img src="/2020/05/25/1590376771000-hello/20200525130653.png" alt="20200525130653"></p><h3 id="检测nginx环境"><a href="#检测nginx环境" class="headerlink" title="检测nginx环境"></a>检测nginx环境</h3><p>在安装nginx前首先要确认系统中安装了gcc、zlib 、zlib-devel、pcre、pcre-devel、openssl、openssl-devel<br>Linux下检查是否安装过某软件包：</p><pre><code>yum list installed | grep gcc                     # 查看是否安装了gccyum list installed | grep pcreyum list installed | grep pcre-develyum list installed | grep zlibyum list installed | grep zlib-develyum list installed | grep opensslyum list installed | grep openssl-devel      </code></pre><p><img src="/2020/05/25/1590376771000-hello/20200525132249.png" alt="20200525132249">    </p><p>在此发现只安装了gcc和openssl，其他都没有安装，所以需要安装前置环境，输入以下命令：</p><pre><code>yum -y install zlib zlib-devel pcre pcre-devel openssl openssl-devel   # 一键安装</code></pre><p><img src="/2020/05/25/1590376771000-hello/20200525133307.png" alt="20200525133307"></p><p>至此前置软件安装结束，下面进入正式安装nginx</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>cd /usr/local/software/nginx-1.18.0             # 进入nginx的安装根目录</code></pre><p><img src="/2020/05/25/1590376771000-hello/20200525133513.png" alt="20200525133513"></p><h4 id="配置nginx安装目录"><a href="#配置nginx安装目录" class="headerlink" title="配置nginx安装目录"></a>配置nginx安装目录</h4><pre><code>./configure --prefix=/usr/local/nginx           # 配置nginx安装目录，执行完成后不会产生nginx目录</code></pre><p>执行完成后会出现一个 Makefile 的文件<br><img src="/2020/05/25/1590376771000-hello/20200525134359.png" alt="20200525134359"> </p><h4 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h4><pre><code>make &amp;&amp; make install                             # 编译、安装，执行完成后会产生nginx目录cd /usr/local/nginx/                             # 进入nginx目录</code></pre><p>nginx目录内容<br><img src="/2020/05/25/1590376771000-hello/20200525143235.png" alt="20200525143235"> </p><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><pre><code>./sbin/nginx -t</code></pre><p>出现 test is successful 表示安装成功，同时会生成一些文件<br><img src="/2020/05/25/1590376771000-hello/20200525144949.png" alt="20200525144949"> </p><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre><code>cd /usr/local/nginx/sbin                        # 进入启动目录./nginx                                         # 启动nginx，默认读取 /usr/local/nginx/conf 目录下的 nginx.conf 配置文件ps -ef | grep nginx                             # 查看nginx是否启动</code></pre><p>当出现 worker process 则表示运行成功<br><img src="/2020/05/25/1590376771000-hello/20200525145522.png" alt="20200525145522"></p><p>另 执行命令： ps -A | grep nginx ，如果返回结果的话，也说明有nginx在运行，服务已经启动<br><img src="/2020/05/25/1590376771000-hello/20200525150655.png" alt="20200525150655"></p><h3 id="访问nginx"><a href="#访问nginx" class="headerlink" title="访问nginx"></a>访问nginx</h3><pre><code>curl http://localhost                           # 默认端口为：80</code></pre><p>当出现 Welcome to nginx! 则表示访问成功<br><img src="/2020/05/25/1590376771000-hello/20200525150656.png" alt="20200525150656"></p><h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><pre><code>cd /usr/local/nginx/conf/                       # 进入nginx配置文件目录vim nginx.conf                                  # 进入编辑文件模式</code></pre><p><img src="/2020/05/25/1590376771000-hello/20200525152109.png" alt="20200525152109">   </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / {</span><br><span class="line">    autoindex on; #打开目录列表</span><br><span class="line">    autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位</span><br><span class="line">    autoindex_localtime on; #显示文件服务器时间，off显示GMT时间</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改完成后使用 /usr/local/nginx/sbin/nginx -t 命令检测语句是否修改正确，如出现 test is successful，则表示正确<br><img src="/2020/05/25/1590376771000-hello/20200525152320.png" alt="20200525152320"> </p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><pre><code>/usr/local/nginx/sbin/nginx                     # 启动服务/usr/local/nginx/sbin/nginx -s stop             # 停止服务/usr/local/nginx/sbin/nginx -s reload           # 重启服务/usr/local/nginx/sbin/nginx -t                  # 检测语句</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Linux中安装Nginx环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zhuqiaolun.com/categories/Linux/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使本地git与Github连接</title>
    <link href="https://www.zhuqiaolun.com/2020/05/24/1590309165000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/24/1590309165000-hello/</id>
    <published>2020-05-24T08:32:45.000Z</published>
    <updated>2020-06-12T05:44:41.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建github账号"><a href="#创建github账号" class="headerlink" title="创建github账号"></a>创建github账号</h3><p>在 <a href="https://github.com/join?source=login" target="_blank" rel="noopener">github</a> 中创建一个账号，如有账号则不需创建</p><h3 id="配置github账户"><a href="#配置github账户" class="headerlink" title="配置github账户"></a>配置github账户</h3><p>安装成功后打开Git Bash Here，执行命令 git config –global -e 操作进入全局配置文件  </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></tbody></table></figure><p>按 i 进行编辑以下内容：</p><pre><code>[user]name = zhuqiaolun     # github的Usernameemail =zhuqlchina@163.com     # github的Email</code></pre><p>按下ESC，输入 :wq 保存退出</p><p>输入以下命令禁用自动转换，防止 Git 提交时报错warning: LF will be replaced by CRLF in</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></tbody></table></figure><p>输入以下命令查看配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></tbody></table></figure><h3 id="生成ssh认证"><a href="#生成ssh认证" class="headerlink" title="生成ssh认证"></a>生成ssh认证</h3><p>输入以下命令，回车会让你输入存放保存ssh key的地址，它给了一个默认地址就是括号了那里，再回车就是你选择了默认地址，<br>然后会让你输入密码并且确认密码，ok生成了，过程如下图</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "zhuqlchina@163.com"            # github的Email</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524170915.png" alt="20200524170915"></p><p>按照你存放ssk key的地址，去复制key，比如我的在下图这个位置，打开id_rsa.pub,复制里面的key<br><img src="/2020/05/24/1590309165000-hello/20200524182540.png" alt="20200524182540"></p><h3 id="配置ssh认证"><a href="#配置ssh认证" class="headerlink" title="配置ssh认证"></a>配置ssh认证</h3><p>登录 <a href="https://github.com/login" target="_blank" rel="noopener">github</a>  ,setting -&gt; SSH and GPG keys -&gt; new SSH key<br><img src="/2020/05/24/1590309165000-hello/20200524183321.png" alt="20200524183321"><br>输入key后 点击 Add SSH key 完成<br><img src="/2020/05/24/1590309165000-hello/20200524183322.png" alt="20200524183322"></p><h3 id="验证ssh认证"><a href="#验证ssh认证" class="headerlink" title="验证ssh认证"></a>验证ssh认证</h3><p>在git bash 下输入命令，如在前面设置过密码则会提示输入密码，那输入设置的密码即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524183707.png" alt="20200524183707"></p><h3 id="拉去github文件到本地仓库"><a href="#拉去github文件到本地仓库" class="headerlink" title="拉去github文件到本地仓库"></a>拉去github文件到本地仓库</h3><div><p>选好本地仓库的目录，进去鼠标右键-&gt;Git Bash Here,输入以下命令拉去github上面的代码并进入拉去的代码目录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zhuqiaolun/spring-boot-code  # repositories的url</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524195556.png" alt="20200524195556"></p><p><img src="/2020/05/24/1590309165000-hello/20200524195557.png" alt="20200524195557"><br>修改内容后则需要提交文件</p><h3 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h3><p>输入命令，查看修改了哪些文件，出现的红色字则为修改了内容的文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524200142.png" alt="20200524200142"><br>修改文件状态，将本地文件更新全部提交到暂缓区</p><p>1.全部修改</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .  # 更新文件状态，将文件添加到暂存区，注意后面一个点</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524203126.png" alt="20200524203126"></p><p>2.修改只提交的文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore   # 创建忽略提交的文件</span><br></pre></td></tr></tbody></table></figure><p>在里面添加 不必要提交的文件路径或者文件名，<br>过滤文件夹设置：<br>.idea 表示过滤这个文件夹<br>过滤文件设置：<br>*.iml</p><p>输入命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .gitignore      # 更新单个文件状态</span><br></pre></td></tr></tbody></table></figure><p>当前需要的文件变成绿色后，就可以提交了，先提交本地在提交远程，中间有可能要输入用户密码验证<br><img src="/2020/05/24/1590309165000-hello/20200524203127.png" alt="20200524203127"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m '相关注释文字'        #提交到本地仓库</span><br><span class="line">git push origin master              #提交到远程仓库</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/05/24/1590309165000-hello/20200524203743.png" alt="20200524203743"></p><p>查看远程github<br><img src="/2020/05/24/1590309165000-hello/20200524203946.png" alt="20200524203946"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>从本地上传代码到github上操作：<br>在git bash 下输入命令<br>1、仓库初始化<br>git init<br>2、连接仓库，没有则需新建<br>git remote add origin 仓库地址<br>3、查看状态<br>git status<br>4、将文件添加到暂存区<br>git add 状态里的新文件<br>5、将文件添加到仓库<br>git commit -m’相关注释文字’<br>6、将本地代码提交到远程仓库<br>git push origin master</p><p>ssh和https提交代码时其实都需要验证，ssh用的是key， https用的是登录名和密码的方式</p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      使本地git与Github连接
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="https://www.zhuqiaolun.com/2020/05/24/1590300096000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/24/1590300096000-hello/</id>
    <published>2020-05-24T06:01:36.000Z</published>
    <updated>2020-05-29T17:18:51.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>JAVA反射机制是在运行状态中，对于任意一个类。都能都知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称之为java语言的反射机制；</p><h3 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h3><p>反射类： java.lang.reflect<br>反编译： .class –à .java<br>通过反射机制可以访问java对象中的属性，方法，构造方法，自定义方法</p><h3 id="创建Class对象的三种方式"><a href="#创建Class对象的三种方式" class="headerlink" title="创建Class对象的三种方式"></a>创建Class对象的三种方式</h3><p>实例对象：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Person {</span><br><span class="line">   private String name;</span><br><span class="line">   private int age ;</span><br><span class="line">   // 构造方法（无参，有参）</span><br><span class="line">   // get 方法··</span><br><span class="line">   // set 方法··</span><br><span class="line">   </span><br><span class="line">   // 自定义一个执行方法，方法名称：execute，</span><br><span class="line">   // 参数1：name，类型：String.class</span><br><span class="line">   // 参数2：age，类型：int.class</span><br><span class="line">   public String execute(String name, int age) {</span><br><span class="line">       return "姓名:" + name + "；年龄："+ age;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建Class对象的方式一"><a href="#创建Class对象的方式一" class="headerlink" title="创建Class对象的方式一"></a>创建Class对象的方式一</h4><p>对象.getClass()，获取Person类中的字节码文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = new Person().getClass();</span><br></pre></td></tr></tbody></table></figure><h4 id="创建Class对象的方式二"><a href="#创建Class对象的方式二" class="headerlink" title="创建Class对象的方式二"></a>创建Class对象的方式二</h4><p>.class，一个明确的类，任意一个类型都有一个静态的class属性</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class2 = Person.class;</span><br></pre></td></tr></tbody></table></figure><h4 id="创建Class对象的方式三-（推荐）"><a href="#创建Class对象的方式三-（推荐）" class="headerlink" title="创建Class对象的方式三 （推荐）"></a>创建Class对象的方式三 （推荐）</h4><p>必须是全路径名称，如：com.demon.hello.Person，如找不到则出现异常：ClassNotFoundException</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try {</span><br><span class="line">    Class&lt;?&gt; class3 = Class.forName(classPath);</span><br><span class="line">  } catch (ClassNotFoundException e) {</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="获取类的实例"><a href="#获取类的实例" class="headerlink" title="获取类的实例"></a>获取类的实例</h3><p>获取class类型之后，可以创建该类型的对象，如：class3.newInstance()</p><h3 id="执行类的方法"><a href="#执行类的方法" class="headerlink" title="执行类的方法"></a>执行类的方法</h3><p>获得class类型的Method对象，根据方法参数定义填写参数类型<br>说明 参数类型与需要反射的类的参数类型保持一致，如int.class不要写成Integer.class<br>invoke方法，参数为cls实例对象，和想要调用的方法参数<br>输出invoke方法的返回值(返回值类型可为方法定义的返回值类型，强制转化即可)</p><pre><code>// 第一个参数为方法名,第二个参数为参数name的类型Class对象，第三个参数为参数age的类型Class对象Method method2 = class3.getMethod("execute", String.class, int.class);  Object obj = method1.invoke(c1s.newInstance(), "张三", 30);System.out.println("execute方法的返回值：" + value);   // 姓名:张三；年龄：30</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在获取创建类型的对象后，获取根据类的方法判断该执行类是否满足执行条件，如<br>是否有实现接口：c1s.getInterfaces()，返回是一个数组，<br>是否有注解类：c1s.getAnnotation(aCls.class)，参数为注解类.class，<br>更多查看 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener">api</a> ···</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Java反射机制
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.zhuqiaolun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装Java环境</title>
    <link href="https://www.zhuqiaolun.com/2020/05/23/1590236390000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/23/1590236390000-hello/</id>
    <published>2020-05-23T12:19:50.000Z</published>
    <updated>2020-06-12T05:43:14.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>由于是安装在服务器，所以只需jre即可，选择对应的系统版本点击<a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/server-jre-8u251-linux-x64.tar.gz" target="_blank" rel="noopener">下载</a>，没有登陆则跳转登陆页面，<br>此提供一位同学账号： `2028056560@qq.com/Oracle1234 方便使用 （感谢同学）</p><h3 id="上传JDK到服务器"><a href="#上传JDK到服务器" class="headerlink" title="上传JDK到服务器"></a>上传JDK到服务器</h3><p>安装命令 yum install -y lrzsz 工具，此为在Xshell下使用，rz:上传，sz:下载<br>在local下创建java目录，在弹出的窗口中选择要上传的jdk压缩文件，上传文件到Linux上java安装目录并解压，此时安装目录为：/usr/local/java/jdk1.8.0_231</p><pre><code>mkdir /use/local/java   # 创建目录cd /use/local/java  # 进入目录rz  # 上传文件tar -zxvf jdk-8u231-linux-x64.tar.gz    # 解压文件</code></pre><p><img src="/2020/05/23/1590236390000-hello/20200523211855.png" alt="20200523211855"></p><h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><p>使用 vim /etc/profile 命令进入编辑器，添加以下内容：</p><pre><code>set java environmentJAVA_HOME=/usr/local/java/jdk1.8.0_231JRE_HOME=$JAVA_HOME/jre     CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH</code></pre><p><img src="/2020/05/23/1590236390000-hello/20200523212145.png" alt="20200523212145"><br>使用 qw 对内容保存并退出<br>使用 source /etc/profile 让内容生效 </p><h3 id="验证JDK环境变量"><a href="#验证JDK环境变量" class="headerlink" title="验证JDK环境变量"></a>验证JDK环境变量</h3><p>使用 java -version 查看环境是否安装完全<br><img src="/2020/05/23/1590236390000-hello/20200523221606.png" alt="20200523221606"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Linux中安装Java环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zhuqiaolun.com/categories/Linux/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在idea中创建项目与github关联</title>
    <link href="https://www.zhuqiaolun.com/2020/05/22/1590142873000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/22/1590142873000-hello/</id>
    <published>2020-05-22T10:21:13.000Z</published>
    <updated>2020-06-12T05:42:01.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在IDEA中配置git"><a href="#在IDEA中配置git" class="headerlink" title="在IDEA中配置git"></a>在IDEA中配置git</h3><p>在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git ，git安装环境变量成功会自动识别安装路径，点击Test，测试是否设置成功<br><img src="/2020/05/22/1590142873000-hello/20200522184825.png" alt="20200522184825"></p><h3 id="在IDEA中连接github中心"><a href="#在IDEA中连接github中心" class="headerlink" title="在IDEA中连接github中心"></a>在IDEA中连接github中心</h3><p>在IDEA中，File–&gt;Setting-&gt;Version Control–&gt;GibHub，点击右侧 “ + “ 按钮，建议在Server的中添加[https://]，Login为Github的账户，Password为Github的密码，点击Log In，成功则显示，<br><img src="/2020/05/22/1590142873000-hello/20200522190224.png" alt="20200522190224"></p><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>在IDEA中，VCS–&gt;Import into Version Control–&gt;Create Git Repository<br><img src="/2020/05/22/1590142873000-hello/20200522201913.png" alt="20200522201913"></p><p>在弹窗中选择项目所在的位置<br><img src="/2020/05/22/1590142873000-hello/20200522210238.png" alt="20200522210238"></p><p>点击OK，此时项目文件全部变成红色，同时在项目目录下生成一个隐藏的.git的文件目录<br><img src="/2020/05/22/1590142873000-hello/20200522211507.png" alt="20200522211507"></p><h3 id="上传文件到本地仓库"><a href="#上传文件到本地仓库" class="headerlink" title="上传文件到本地仓库"></a>上传文件到本地仓库</h3><p>在IDEA中，选择项目鼠标右键–&gt; git –&gt; Add，此时项目文件变成绿色，<span style="color:red">此时文件只处于本地库的暂存区，并没有同步到github版本库中</span><br><img src="/2020/05/22/1590142873000-hello/20200522212221.png" alt="20200522212221"></p><p><img src="/2020/05/22/1590142873000-hello/20200522212334.png" alt="20200522212334"></p><h3 id="同步到本地github版本"><a href="#同步到本地github版本" class="headerlink" title="同步到本地github版本"></a>同步到本地github版本</h3><p>在IDEA中，选择项目鼠标右键–&gt; git –&gt; Commit Directory，出现提交弹窗，在弹窗勾掉.idea排除不必要的文件，在弹窗中输入Commit Message，否则不允许提交，点击commit，此时项目文件从暂存区真正进入本地github版本库中，项目文件变成白色<br><img src="/2020/05/22/1590142873000-hello/20200522213206.png" alt="20200522213206"></p><p><img src="/2020/05/22/1590142873000-hello/20200522214833.png" alt="20200522214833"></p><p><img src="/2020/05/22/1590142873000-hello/20200522215358.png" alt="20200522215358"></p><h3 id="上传项目到GitHub中"><a href="#上传项目到GitHub中" class="headerlink" title="上传项目到GitHub中"></a>上传项目到GitHub中</h3><p>在IDEA中，选择项目，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中自动输入仓库名，输入描述，选择要Share的链接， 点击Share，即可上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示<br><img src="/2020/05/22/1590142873000-hello/20200522223429.png" alt="20200522223429"></p><p><img src="/2020/05/22/1590142873000-hello/20200522223534.png" alt="20200522223534"></p><h3 id="同步结束"><a href="#同步结束" class="headerlink" title="同步结束"></a>同步结束</h3><p>此至，可访问github上查看<br><img src="/2020/05/22/1590142873000-hello/20200522223633.png" alt="20200522223633"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在idea中创建项目与github关联
    
    </summary>
    
    
      <category term="工具" scheme="https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://www.zhuqiaolun.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>在Windows上安装git-v2.26.2</title>
    <link href="https://www.zhuqiaolun.com/2020/05/22/1590132000000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/22/1590132000000-hello/</id>
    <published>2020-05-22T07:20:00.000Z</published>
    <updated>2020-06-12T05:40:54.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>下载并安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 进入自动识别系统， 点击自动弹出下载窗口<br><img src="/2020/05/22/1590132000000-hello/20200524135151.png" alt="20200524135151"></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载结束后，双击进行安装，如已安装点击运行则为修复版本<br><img src="/2020/05/22/1590132000000-hello/20200524154530.png" alt="20200524154530"></p><p><img src="/2020/05/22/1590132000000-hello/20200524154634.png" alt="20200524154634"></p><p>是否显示桌面图，可不勾选，在安装结束后鼠标右键有选项显示<br><img src="/2020/05/22/1590132000000-hello/20200524154845.png" alt="20200524154845"></p><p><img src="/2020/05/22/1590132000000-hello/20200524154934.png" alt="20200524154934"></p><p><img src="/2020/05/22/1590132000000-hello/20200524155123.png" alt="20200524155123"></p><p>此项完全不修改PATH变量值，仅在Git Bash中使用Git，绝对安全，所以cmd的git –version 无效<br> <img src="/2020/05/22/1590132000000-hello/20200524155406.png" alt="20200524155406"></p><p>Git命令与Linux一样，所以最好在OpenSSL中操作命令<br><img src="/2020/05/22/1590132000000-hello/20200524155810.png" alt="20200524155810"></p><p><img src="/2020/05/22/1590132000000-hello/20200524155830.png" alt="20200524155830"></p><p><img src="/2020/05/22/1590132000000-hello/20200524155858.png" alt="20200524155858"></p><p> 启用文件缓存<br><img src="/2020/05/22/1590132000000-hello/20200524155947.png" alt="20200524155947"></p><p><img src="/2020/05/22/1590132000000-hello/20200524160043.png" alt="20200524160043"></p><p><img src="/2020/05/22/1590132000000-hello/20200524160043.png" alt="20200524160043"></p><p>在桌面或者文件目录空白处点击鼠标右键，选择 Git Bash Here 选项，即可打开命令界面<br><img src="/2020/05/22/1590132000000-hello/20200524160313.png" alt="20200524160313"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      在Windows上安装git-v2.26.2
    
    </summary>
    
    
      <category term="Windows10" scheme="https://www.zhuqiaolun.com/categories/Windows10/"/>
    
    
      <category term="安装软件" scheme="https://www.zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>(图)王者荣耀 - 武则天 - 女帝</title>
    <link href="https://www.zhuqiaolun.com/2020/05/21/1590066158000-hello/"/>
    <id>https://www.zhuqiaolun.com/2020/05/21/1590066158000-hello/</id>
    <published>2020-05-21T11:21:02.000Z</published>
    <updated>2020-06-23T05:20:58.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="历史上的TA"><a href="#历史上的TA" class="headerlink" title="历史上的TA"></a>历史上的TA</h3><p><a href="http://pvp.qq.com/story201904/index.html#/heroDetail/index/136" target="_blank" rel="noopener">武则天</a>，名曌(zhào)，这个字，是她自己为自己造的，取明月当空之意。中国历史上的女主不少，但称帝当皇帝的，只有她一个。武则天最初是唐太宗的才人，后与太宗的儿子李治相恋，李治登基后，封为昭仪，进一步被封为皇后。高宗多病，武则天临朝听政，宫中并称二圣。高宗死后，几经折腾，先后废掉两个儿子，武则天剪除了忠于李唐的朝中势力，改国号为周，自立为帝。武则天虽然任用酷吏，鼓励告密，杀了不少朝臣，但为政还算清明，在她当政期间，国家强盛，民众安泰。临死因传位问题无法解决，最终把天下又还给了李家。</p><h4 id="女帝"><a href="#女帝" class="headerlink" title="女帝"></a>女帝</h4><p><img src="/2020/05/21/1590066158000-hello/136_2.jpg" alt="女帝"></p><h4 id="东方不败"><a href="#东方不败" class="headerlink" title="东方不败"></a>东方不败</h4><p><img src="/2020/05/21/1590066158000-hello/136_3.jpg" alt="东方不败"></p><h4 id="海洋之心"><a href="#海洋之心" class="headerlink" title="海洋之心"></a>海洋之心</h4><p><img src="/2020/05/21/1590066158000-hello/136_4.jpg" alt="海洋之心"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      王者荣耀,武则天,王者荣耀 - 武则天
    
    </summary>
    
    
      <category term="游戏" scheme="https://www.zhuqiaolun.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="王者荣耀" scheme="https://www.zhuqiaolun.com/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
</feed>
