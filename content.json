{"meta":{"title":"Demon - 个人博客","subtitle":"","description":"ZhuQiaoLun的个人博客","author":"ZhuQiaoLun","url":"https://zhuqiaolun.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-21T07:27:09.976Z","updated":"2020-05-21T02:45:41.758Z","comments":false,"path":"/404.html","permalink":"https://zhuqiaolun.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-22T14:46:54.365Z","updated":"2020-05-22T14:46:54.303Z","comments":false,"path":"about/index.html","permalink":"https://zhuqiaolun.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-05-21T07:28:28.885Z","updated":"2020-05-21T07:28:28.842Z","comments":false,"path":"books/index.html","permalink":"https://zhuqiaolun.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-21T06:52:06.850Z","updated":"2020-05-21T02:45:41.761Z","comments":false,"path":"categories/index.html","permalink":"https://zhuqiaolun.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-21T06:49:16.544Z","updated":"2020-05-21T02:45:41.762Z","comments":true,"path":"links/index.html","permalink":"https://zhuqiaolun.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-21T06:53:21.014Z","updated":"2020-05-21T02:45:41.765Z","comments":false,"path":"tags/index.html","permalink":"https://zhuqiaolun.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-21T06:48:44.225Z","updated":"2020-05-21T02:45:41.763Z","comments":false,"path":"repository/index.html","permalink":"https://zhuqiaolun.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"在Linux中安装nginx环境","slug":"hello10","date":"2020-05-25T03:19:31.000Z","updated":"2020-05-25T07:48:51.670Z","comments":true,"path":"2020/05/25/hello10/","link":"","permalink":"https://zhuqiaolun.com/2020/05/25/hello10/","excerpt":"在Linux中安装nginx环境","text":"下载nginxnginx 官网下载地址：http://nginx.org/en/download.htmlnginx 文件下载地址：https://nginx.org/download/ 下载稳定版本 上传nginxmkdir /usr/local/software # 创建软件安装目录 cd /usr/local/software # 进入软件安装目录 rz # 上传nginx文件，需要安装 yum install lrzsz ll # 查看上传文件 tar -zxvf nginx-1.18.0.tar.gz # 解压文件到当前目录 检测nginx环境在安装nginx前首先要确认系统中安装了gcc、zlib 、zlib-devel、pcre、pcre-devel、openssl、openssl-develLinux下检查是否安装过某软件包： yum list installed | grep gcc # 查看是否安装了gcc yum list installed | grep pcre yum list installed | grep pcre-devel yum list installed | grep zlib yum list installed | grep zlib-devel yum list installed | grep openssl yum list installed | grep openssl-devel 在此发现只安装了gcc和openssl，其他都没有安装，所以需要安装前置环境，输入以下命令： yum -y install zlib zlib-devel pcre pcre-devel openssl openssl-devel # 一键安装 至此前置软件安装结束，下面进入正式安装nginx 安装nginxcd /usr/local/software/nginx-1.18.0 # 进入nginx的安装根目录 配置nginx安装目录./configure --prefix=/usr/local/nginx # 配置nginx安装目录，执行完成后不会产生nginx目录 执行完成后会出现一个 Makefile 的文件 编译并安装make &amp;&amp; make install # 编译、安装，执行完成后会产生nginx目录 cd /usr/local/nginx/ # 进入nginx目录 nginx目录内容 测试是否安装成功./sbin/nginx -t 出现 test is successful 表示安装成功，同时会生成一些文件 启动nginxcd /usr/local/nginx/sbin # 进入启动目录 ./nginx # 启动nginx，默认读取 /usr/local/nginx/conf 目录下的 nginx.conf 配置文件 ps -ef | grep nginx # 查看nginx是否启动 当出现 worker process 则表示运行成功 另 执行命令： ps -A | grep nginx ，如果返回结果的话，也说明有nginx在运行，服务已经启动 访问nginxcurl http://localhost # 默认端口为：80 当出现 Welcome to nginx! 则表示访问成功 修改nginx.confcd /usr/local/nginx/conf/ # 进入nginx配置文件目录 vim nginx.conf # 进入编辑文件模式 1234567location &#x2F; &#123; autoindex on; #打开目录列表 autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位 autoindex_localtime on; #显示文件服务器时间，off显示GMT时间 root html; index index.html index.htm;&#125; 修改完成后使用 /usr/local/nginx/sbin/nginx -t 命令检测语句是否修改正确，如出现 test is successful，则表示正确 接着使用 /usr/local/nginx/sbin/nginx 启动服务即可 扩展/usr/local/nginx/sbin/nginx # 启动服务 /usr/local/nginx/sbin/nginx -s stop # 停止服务 /usr/local/nginx/sbin/nginx -s reload # 重启服务 /usr/local/nginx/sbin/nginx -t # 检测语句 ** end **","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhuqiaolun.com/categories/Linux/"}],"tags":[{"name":"安装软件","slug":"安装软件","permalink":"https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"}],"author":"Demon"},{"title":"使本地git与Github连接","slug":"hello9","date":"2020-05-24T08:32:45.000Z","updated":"2020-05-24T12:57:49.757Z","comments":true,"path":"2020/05/24/hello9/","link":"","permalink":"https://zhuqiaolun.com/2020/05/24/hello9/","excerpt":"使本地git与Github连接","text":"创建github账号在 github 中创建一个账号，如有账号则不需创建 配置github账户安装成功后打开Git Bash Here，执行命令 git config –global -e 操作进入全局配置文件 1git config --global -e 按 i 进行编辑以下内容： [user] name = zhuqiaolun # github的Username email =zhuqlchina@163.com # github的Email按下ESC，输入 :wq 保存退出 输入以下命令禁用自动转换，防止 Git 提交时报错warning: LF will be replaced by CRLF in 1git config --global core.autocrlf false 输入以下命令查看配置 1git config -l 生成ssh认证输入以下命令，回车会让你输入存放保存ssh key的地址，它给了一个默认地址就是括号了那里，再回车就是你选择了默认地址，然后会让你输入密码并且确认密码，ok生成了，过程如下图 1ssh-keygen -t rsa -C &quot;zhuqlchina@163.com&quot; # github的Email 按照你存放ssk key的地址，去复制key，比如我的在下图这个位置，打开id_rsa.pub,复制里面的key 配置ssh认证登录 github ,setting -&gt; SSH and GPG keys -&gt; new SSH key 输入key后 点击 Add SSH key 完成 验证ssh认证在git bash 下输入命令，如在前面设置过密码则会提示输入密码，那输入设置的密码即可 1ssh -T git@github.com 拉去github文件到本地仓库 选好本地仓库的目录，进去鼠标右键->Git Bash Here,输入以下命令拉去github上面的代码并进入拉去的代码目录 1git clone https:&#x2F;&#x2F;github.com&#x2F;zhuqiaolun&#x2F;spring-boot-code # repositories的url 修改内容后则需要提交文件 提交代码到远程仓库输入命令，查看修改了哪些文件，出现的红色字则为修改了内容的文件 1git status 修改文件状态，将本地文件更新全部提交到暂缓区 1.全部修改 1git add . # 更新文件状态，将文件添加到暂存区，注意后面一个点 2.修改只提交的文件 1touch .gitignore # 创建忽略提交的文件 在里面添加 不必要提交的文件路径或者文件名，过滤文件夹设置：.idea 表示过滤这个文件夹过滤文件设置：*.iml 输入命令： 1git add .gitignore # 更新单个文件状态 当前需要的文件变成绿色后，就可以提交了，先提交本地在提交远程，中间有可能要输入用户密码验证 12git commit -m &#39;相关注释文字&#39; #提交到本地仓库git push origin master #提交到远程仓库 查看远程github 扩展从本地上传代码到github上操作：在git bash 下输入命令1、仓库初始化git init2、连接仓库，没有则需新建git remote add origin 仓库地址3、查看状态git status4、将文件添加到暂存区git add 状态里的新文件5、将文件添加到仓库git commit -m’相关注释文字’6、将本地代码提交到远程仓库git push origin master ssh和https提交代码时其实都需要验证，ssh用的是key， https用的是登录名和密码的方式 ** end **","categories":[{"name":"Windows10","slug":"Windows10","permalink":"https://zhuqiaolun.com/categories/Windows10/"}],"tags":[{"name":"安装软件","slug":"安装软件","permalink":"https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"}],"author":"Demon"},{"title":"Java反射机制","slug":"hello8","date":"2020-05-24T06:01:36.000Z","updated":"2020-05-24T07:08:46.171Z","comments":true,"path":"2020/05/24/hello8/","link":"","permalink":"https://zhuqiaolun.com/2020/05/24/hello8/","excerpt":"Java反射机制","text":"什么是反射JAVA反射机制是在运行状态中，对于任意一个类。都能都知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称之为java语言的反射机制； 反射的作用反射类： java.lang.reflect反编译： .class –à .java通过反射机制可以访问java对象中的属性，方法，构造方法，自定义方法 创建Class对象的三种方式实例对象： 1234567891011121314public class Person &#123; private String name; private int age ; &#x2F;&#x2F; 构造方法（无参，有参） &#x2F;&#x2F; get 方法·· &#x2F;&#x2F; set 方法·· &#x2F;&#x2F; 自定义一个执行方法，方法名称：execute， &#x2F;&#x2F; 参数1：name，类型：String.class &#x2F;&#x2F; 参数2：age，类型：int.class public String execute(String name, int age) &#123; return &quot;姓名:&quot; + name + &quot;；年龄：&quot;+ age; &#125;&#125; 创建Class对象的方式一对象.getClass()，获取Person类中的字节码文件 1Class&lt;?&gt; class1 &#x3D; new Person().getClass(); 创建Class对象的方式二.class，一个明确的类，任意一个类型都有一个静态的class属性 1Class&lt;?&gt; class2 &#x3D; Person.class; 创建Class对象的方式三 （推荐）必须是全路径名称，如：com.demon.hello.Person，如找不到则出现异常：ClassNotFoundException 12345try &#123; Class&lt;?&gt; class3 &#x3D; Class.forName(classPath); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; 获取类的实例获取class类型之后，可以创建该类型的对象，如：class3.newInstance() 执行类的方法获得class类型的Method对象，根据方法参数定义填写参数类型说明 参数类型与需要反射的类的参数类型保持一致，如int.class不要写成Integer.classinvoke方法，参数为cls实例对象，和想要调用的方法参数输出invoke方法的返回值(返回值类型可为方法定义的返回值类型，强制转化即可) // 第一个参数为方法名,第二个参数为参数name的类型Class对象，第三个参数为参数age的类型Class对象 Method method2 = class3.getMethod(&quot;execute&quot;, String.class, int.class); Object obj = method1.invoke(c1s.newInstance(), &quot;张三&quot;, 30); System.out.println(&quot;execute方法的返回值：&quot; + value); // 姓名:张三；年龄：30扩展在获取创建类型的对象后，获取根据类的方法判断该执行类是否满足执行条件，如是否有实现接口：c1s.getInterfaces()，返回是一个数组，是否有注解类：c1s.getAnnotation(aCls.class)，参数为注解类.class，更多查看 api ··· ** end **","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://zhuqiaolun.com/tags/Java/"}],"author":"Demon"},{"title":"在Linux中安装Java环境","slug":"hello7","date":"2020-05-23T12:19:50.000Z","updated":"2020-05-24T09:14:37.079Z","comments":true,"path":"2020/05/23/hello7/","link":"","permalink":"https://zhuqiaolun.com/2020/05/23/hello7/","excerpt":"在Linux中安装Java环境","text":"下载JDK由于是安装在服务器，所以只需jre即可，选择对应的系统版本点击下载，没有登陆则跳转登陆页面，此提供一位同学账号： `2028056560@qq.com/Oracle1234 方便使用 （感谢同学） 上传JDK到服务器安装命令 yum install -y lrzsz 工具，此为在Xshell下使用，rz:上传，sz:下载在local下创建java目录，在弹出的窗口中选择要上传的jdk压缩文件，上传文件到Linux上java安装目录并解压，此时安装目录为：/usr/local/java/jdk1.8.0_231 mkdir /use/local/java # 创建目录 cd /use/local/java # 进入目录 rz # 上传文件 tar -zxvf jdk-8u231-linux-x64.tar.gz # 解压文件 配置JDK环境变量使用 vim /etc/profile 命令进入编辑器，添加以下内容： set java environment JAVA_HOME=/usr/local/java/jdk1.8.0_231 JRE_HOME=$JAVA_HOME/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH 使用 qw 对内容保存并退出 使用 source /etc/profile 让内容生效 验证JDK环境变量使用 java -version 查看环境是否安装完全 ** end **","categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhuqiaolun.com/categories/Linux/"}],"tags":[{"name":"安装软件","slug":"安装软件","permalink":"https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"}],"author":"Demon"},{"title":"在idea中创建项目与github关联","slug":"hello6","date":"2020-05-22T10:21:13.000Z","updated":"2020-05-24T08:56:27.677Z","comments":true,"path":"2020/05/22/hello6/","link":"","permalink":"https://zhuqiaolun.com/2020/05/22/hello6/","excerpt":"在idea中创建项目与github关联","text":"在IDEA中配置git 在IDEA中设置Git，在File-->Setting->Version Control-->Git ，git安装环境变量成功会自动识别安装路径，点击Test，测试是否设置成功 在IDEA中连接github中心 在IDEA中，File-->Setting->Version Control-->GibHub，点击右侧 \" + \" 按钮，建议在Server的中添加[https://]，Login为Github的账户，Password为Github的密码，点击Log In，成功则显示， 创建本地仓库 在IDEA中，VCS-->Import into Version Control-->Create Git Repository 在弹窗中选择项目所在的位置 点击OK，此时项目文件全部变成红色，同时在项目目录下生成一个隐藏的.git的文件目录 上传文件到本地仓库 在IDEA中，选择项目鼠标右键--> git --> Add，此时项目文件变成绿色，此时文件只处于本地库的暂存区，并没有同步到github版本库中 同步到本地github版本 在IDEA中，选择项目鼠标右键--> git --> Commit Directory，出现提交弹窗，在弹窗勾掉.idea排除不必要的文件，在弹窗中输入Commit Message，否则不允许提交，点击commit，此时项目文件从暂存区真正进入本地github版本库中，项目文件变成白色 上传项目到GitHub中 在IDEA中，选择项目，VCS-->Import into Version Control-->Share Project on GitHub，在弹框中自动输入仓库名，输入描述，选择要Share的链接， 点击Share，即可上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示 同步结束 此至，可访问github上查看 ** end **","categories":[{"name":"工具","slug":"工具","permalink":"https://zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://zhuqiaolun.com/tags/idea/"}],"author":"Demon"},{"title":"在Windows上安装git-v2.26.2","slug":"hello5","date":"2020-05-22T07:20:00.000Z","updated":"2020-05-24T09:35:54.033Z","comments":true,"path":"2020/05/22/hello5/","link":"","permalink":"https://zhuqiaolun.com/2020/05/22/hello5/","excerpt":"在Windows上安装git-v2.26.2","text":"下载git下载并安装 git 进入自动识别系统， 点击自动弹出下载窗口 安装git下载结束后，双击进行安装，如已安装点击运行则为修复版本 是否显示桌面图，可不勾选，在安装结束后鼠标右键有选项显示 此项完全不修改PATH变量值，仅在Git Bash中使用Git，绝对安全，所以cmd的git –version 无效 Git命令与Linux一样，所以最好在OpenSSL中操作命令 启用文件缓存 在桌面或者文件目录空白处点击鼠标右键，选择 Git Bash Here 选项，即可打开命令界面 ** end **","categories":[{"name":"Windows10","slug":"Windows10","permalink":"https://zhuqiaolun.com/categories/Windows10/"}],"tags":[{"name":"安装软件","slug":"安装软件","permalink":"https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"}],"author":"Demon"},{"title":"(图)王者荣耀 - 武则天 - 女帝","slug":"hello4","date":"2020-05-21T11:21:02.000Z","updated":"2020-05-24T08:12:36.890Z","comments":false,"path":"2020/05/21/hello4/","link":"","permalink":"https://zhuqiaolun.com/2020/05/21/hello4/","excerpt":"奉我为主！叫我女王陛下！","text":"历史上的TA武则天，名曌(zhào)，这个字，是她自己为自己造的，取明月当空之意。中国历史上的女主不少，但称帝当皇帝的，只有她一个。武则天最初是唐太宗的才人，后与太宗的儿子李治相恋，李治登基后，封为昭仪，进一步被封为皇后。高宗多病，武则天临朝听政，宫中并称二圣。高宗死后，几经折腾，先后废掉两个儿子，武则天剪除了忠于李唐的朝中势力，改国号为周，自立为帝。武则天虽然任用酷吏，鼓励告密，杀了不少朝臣，但为政还算清明，在她当政期间，国家强盛，民众安泰。临死因传位问题无法解决，最终把天下又还给了李家。 女帝 东方不败 海洋之心 ** end **","categories":[{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://zhuqiaolun.com/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://zhuqiaolun.com/tags/%E6%B8%B8%E6%88%8F/"}],"author":"王者荣耀"},{"title":"(图)王者荣耀 - 嬴政 - 王者独尊","slug":"hello3","date":"2020-05-21T11:13:38.000Z","updated":"2020-05-24T08:14:18.596Z","comments":false,"path":"2020/05/21/hello3/","link":"","permalink":"https://zhuqiaolun.com/2020/05/21/hello3/","excerpt":"向所有人显现的东西，才叫公正。黑色，光明的预演。","text":"历史上的TA嬴政又称秦王政，秦始皇。他是秦朝第一个皇帝，也是秦国的最后一个国王。关于他的出身，有很传奇的经历。他的父亲，本是秦国被遗弃在外的王子，因为赵国富商吕不韦的运作，才得以回国接班。所以，秦王政即位时，称吕不韦为亚父。但是，作为枭雄的嬴政，很快就运用铁腕，从吕不韦的手中夺过了大权，囚禁了信任宦官、秽乱宫廷的母后，放手任用法家信徒，把军国主义政治推向极致，终于灭了六国，一统天下。他是中国大一统帝制王朝的开创者，也是以吏为师的专制文化的倡导者。 王者独尊 摇滚巨星 暗夜贵公子 优雅恋人 白昼王子 ** end **","categories":[{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://zhuqiaolun.com/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://zhuqiaolun.com/tags/%E6%B8%B8%E6%88%8F/"}],"author":"王者荣耀"},{"title":"关于使用macleaya主题的修改","slug":"hello2","date":"2020-05-18T02:50:24.000Z","updated":"2020-05-24T08:31:48.376Z","comments":true,"path":"2020/05/18/hello2/","link":"","permalink":"https://zhuqiaolun.com/2020/05/18/hello2/","excerpt":"在hexo主题中选择macleaya主题并应用","text":"前言在 hexo 主题中选择 macleaya 主题并应用 字段描述 title 网站标题 浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到 keywords 关键词 作用是告诉搜索引擎本页内容是围绕哪些词展开的 description 内容摘要 一个网页的简要内容概况，描述内容要和页面内容相关 type 网站内容 类型 date 网站内容 时间，由生成页面时自动生成，默认格式为：YYYY-MM-DD","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zhuqiaolun.com/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"https://zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"}],"author":"Demon"},{"title":"Hello World","slug":"hello1","date":"2020-05-13T04:27:02.000Z","updated":"2020-05-24T06:03:32.789Z","comments":true,"path":"2020/05/13/hello1/","link":"","permalink":"https://zhuqiaolun.com/2020/05/13/hello1/","excerpt":"『你好,世界』","text":"『你好,世界』Java1234567public class HelloWorld&#123; public static void main(String[] args) &#123; System.out.println( \"Hello, World!\" ); &#125;&#125; C12345#include &lt;stdio.h&gt;int main()&#123; printf(\"Hello, World!\");&#125; Python 31print(\"Hello, World!\") 可以使用单引号’’，双引号”” 或三引号””” “””或’’’ ‘’’ C++123456#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;\"Hello, World!\"&lt;&lt;endl;&#125; C#12345678910namespace HelloWorld&#123; class Program &#123; static void Main(string[] args) &#123; System.Console.Write(\"Hello, World!\"); &#125; &#125;&#125; VB12345Module MainFrm Sub Main() System.Console.WriteLine(\"Hello, World!\") End SubEnd Module JavaScript1alert (\"Hello, World!\"); 1document.write(\"Hello, World!\"); PHP123&lt;?php echo 'Hello, world!';?&gt; SQL1SELECT 列名称 FROM 表名称 Object-C12345#import &lt;stdio.h&gt;int main(int argc,const char *argv[])&#123; printf(\"Hello World\");&#125; ** end **","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"}],"author":"Demon"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://zhuqiaolun.com/categories/Linux/"},{"name":"Windows10","slug":"Windows10","permalink":"https://zhuqiaolun.com/categories/Windows10/"},{"name":"编程语言","slug":"编程语言","permalink":"https://zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"工具","slug":"工具","permalink":"https://zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://zhuqiaolun.com/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"},{"name":"hexo","slug":"hexo","permalink":"https://zhuqiaolun.com/categories/hexo/"}],"tags":[{"name":"安装软件","slug":"安装软件","permalink":"https://zhuqiaolun.com/tags/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"},{"name":"Java","slug":"Java","permalink":"https://zhuqiaolun.com/tags/Java/"},{"name":"idea","slug":"idea","permalink":"https://zhuqiaolun.com/tags/idea/"},{"name":"游戏","slug":"游戏","permalink":"https://zhuqiaolun.com/tags/%E6%B8%B8%E6%88%8F/"},{"name":"hexo主题","slug":"hexo主题","permalink":"https://zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"},{"name":"其他","slug":"其他","permalink":"https://zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"}]}