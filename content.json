{"meta":{"title":"zhuqiaolun - 个人博客","subtitle":"","description":"zhuqiaolun的个人博客","author":"zhuqiaolun","url":"https://www.zhuqiaolun.com","root":"/"},"pages":[{"title":"","date":"2020-05-29T13:27:29.411Z","updated":"2020-05-29T13:21:34.674Z","comments":true,"path":"baidu_verify_KzupUF583A.html","permalink":"https://www.zhuqiaolun.com/baidu_verify_KzupUF583A.html","excerpt":"","text":"KzupUF583A document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"书单","date":"2020-05-21T07:28:28.885Z","updated":"2020-05-21T07:28:28.842Z","comments":false,"path":"books/index.html","permalink":"https://www.zhuqiaolun.com/books/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"图册","date":"2020-05-31T12:33:40.065Z","updated":"2020-05-31T12:33:39.986Z","comments":true,"path":"gallery/index.html","permalink":"https://www.zhuqiaolun.com/gallery/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"分类","date":"2020-05-21T06:52:06.850Z","updated":"2020-05-21T02:45:41.761Z","comments":false,"path":"categories/index.html","permalink":"https://www.zhuqiaolun.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"友情链接","date":"2020-05-31T12:30:15.572Z","updated":"2020-05-31T12:30:15.507Z","comments":true,"path":"links/index.html","permalink":"https://www.zhuqiaolun.com/links/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"Repositories","date":"2020-05-21T06:48:44.225Z","updated":"2020-05-21T02:45:41.763Z","comments":false,"path":"repository/index.html","permalink":"https://www.zhuqiaolun.com/repository/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"标签","date":"2020-05-21T06:53:21.014Z","updated":"2020-05-21T02:45:41.765Z","comments":false,"path":"tags/index.html","permalink":"https://www.zhuqiaolun.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"404 Not Found：该页无法显示","date":"2020-05-21T07:27:09.976Z","updated":"2020-05-21T02:45:41.758Z","comments":false,"path":"/404.html","permalink":"https://www.zhuqiaolun.com/404.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"关于","date":"2020-09-28T08:12:05.985Z","updated":"2020-09-28T08:12:05.871Z","comments":false,"path":"about/index.html","permalink":"https://www.zhuqiaolun.com/about/index.html","excerpt":"","text":"//////////////////////////////////////////////////////////////////// // _ooOoo_ // // o8888888o // // 88\" . \"88 // // (| ^_^ |) // // O\\ = /O // // ____/`---'\\____ // // .' \\\\| |// `. // // / \\\\||| : |||// \\ // // / _||||| -:- |||||- \\ // // | | \\\\\\ - /// | | // // | \\_| ''\\---/'' | | // // \\ .-\\__ `-` ___/-. / // // ___`. .' /--.--\\ `. . ___ // // .\"\" '&lt; `.___\\_&lt;|&gt;_/___.' &gt;'\"\". // // | | : `- \\`.;`\\ _ /`;.`/ - ` : | | // // \\ \\ `-. \\_ __\\ /__ _/ .-` / / // // ========`-.____`-.___\\_____/___.-`____.-'======== // // `=---=' // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ // // 佛祖保佑 永不宕机 永无BUG // //////////////////////////////////////////////////////////////////// document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"poi(3.17)解析excel - 2007 续.1","slug":"1606102218582/1606102218582","date":"2020-11-23T03:30:18.000Z","updated":"2020-11-23T05:09:24.164Z","comments":true,"path":"2020/11/1606102218582/1606102218582/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1606102218582/1606102218582/","excerpt":"Java工具类 - poi(3.17)解析excel - 2007","text":"依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt; 解析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.*;/** * @className: ExcelUtil.java * @description: excel 工具类 * @author: Demon */public class ExcelUtil { /** * 解析数据 */ private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException { List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;(); Workbook wb = null; try { wb = new XSSFWorkbook(input); // 获得第一个Sheet1 Sheet sheet = wb.getSheetAt(0); // 获得第一行表头，计算列数 int columnNum = sheet.getRow(0).getPhysicalNumberOfCells(); // 遍历数据 sheet.rowIterator().forEachRemaining(row -&gt;{ Map&lt;String,String&gt; jsonMap = new LinkedHashMap&lt;&gt;(); for (int i = 0; i &lt; columnNum; i++) { Cell cell = row.getCell(i); String val = \"\"; if (cell != null) { // 首先强制设置成string类型 cell.setCellType(CellType.STRING); // 再读取值 val = getXCellFormatValue(cell); } jsonMap.put(String.valueOf(i), val); } mapList.add(jsonMap); }); } catch (FileNotFoundException e) { log.error(\"找不到xlsx文件\",e); throw new IOException(e); } catch (IOException e) { log.error(\"解析xlsx文件错误\",e); throw new IOException(e); } finally { if (wb != null) { try { wb.close(); } catch (IOException e) { e.printStackTrace(); } } if (input != null) { try { input.close(); } catch (IOException e) { e.printStackTrace(); } } } return mapList; }} 链接poi(3.17)解析excel - 2007 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"Zip4j - 压缩/解压（可设置密码）","slug":"1605683417659/1605683417659","date":"2020-11-18T07:10:17.000Z","updated":"2020-11-18T07:33:54.245Z","comments":true,"path":"2020/11/1605683417659/1605683417659/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605683417659/1605683417659/","excerpt":"Java工具类 - Zip4j - 压缩/解压（可设置密码）","text":"依赖12345&lt;dependency&gt; &lt;groupId&gt;net.lingala.zip4j&lt;/groupId&gt; &lt;artifactId&gt;zip4j&lt;/artifactId&gt; &lt;version&gt;2.6.0&lt;/version&gt;&lt;/dependency&gt; 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176import net.lingala.zip4j.ZipFile;import net.lingala.zip4j.exception.ZipException;import net.lingala.zip4j.model.FileHeader;import net.lingala.zip4j.model.ZipParameters;import net.lingala.zip4j.model.enums.CompressionLevel;import net.lingala.zip4j.model.enums.CompressionMethod;import net.lingala.zip4j.model.enums.EncryptionMethod;import java.io.File;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.List;/** * @ClassName: Zip4jUtil * @Description: zip 工具 * @Author: Demon */public class Zip4jUtil { /** * 根据给定密码压缩文件(s)到指定目录 * * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip * @param password 密码(可为null) * @param files 单个文件或文件数组 * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败. */ public static boolean compress(String destFileName, String password, File... files) throws ZipException { try { ZipParameters parameters = new ZipParameters(); // 压缩方式 8 parameters.setCompressionMethod(CompressionMethod.DEFLATE); // 压缩级别 5 parameters.setCompressionLevel(CompressionLevel.NORMAL); if (!(password == null || \"\".equals(password))) { parameters.setEncryptFiles(true); // 加密方式 0 parameters.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD); } ZipFile zipFile = new ZipFile(destFileName); if (!(password == null || \"\".equals(password))) { zipFile.setPassword(password.toCharArray()); } for (File file : files) { zipFile.addFile(file, parameters); } return true; } catch (ZipException e) { e.printStackTrace(); throw new ZipException(e); } } /** * 根据给定密码压缩文件(s)到指定位置 * * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip * @param password 密码(可为null) * @param filePaths 单个文件路径或文件路径数组 * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败. */ public static boolean compress(String destFileName, String password, String... filePaths) throws ZipException { int size = filePaths.length; File[] files = new File[size]; for (int i = 0; i &lt; size; i++) { files[i] = new File(filePaths[i]); } return compress(destFileName, password, files); } /** * 根据给定密码压缩文件(s)到指定位置 * * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip * @param password 密码(可为null) * @param folder 文件夹路径 * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败. */ public static boolean compressFolder(String destFileName, String password, String folder) throws ZipException { File folderParam = new File(folder); if (folderParam.isDirectory()) { File[] files = folderParam.listFiles(); return compress(destFileName, password, files); } return false; } /** * 根据所给密码解压zip压缩包到指定目录 * &lt;p&gt; * 如果指定目录不存在,可以自动创建,不合法的路径将导致异常被抛出 * * @param zipFile zip压缩包绝对路径 * @param dest 指定解压文件夹位置 * @param password 密码(可为null) * @return 解压后的文件数组 * @throws ZipException 异常 */ public static File[] deCompress(File zipFile, String dest, String password) throws ZipException { //1.判断指定目录是否存在 File destDir = new File(dest); if (destDir.isDirectory() &amp;&amp; !destDir.exists()) { boolean mkdir = destDir.mkdir(); System.out.println(mkdir); } //2.初始化zip工具 ZipFile zFile = new ZipFile(zipFile); zFile.setCharset(Charset.forName(\"UTF-8\")); if (!zFile.isValidZipFile()) { throw new ZipException(\"压缩文件不合法,可能被损坏.\"); } //3.判断是否已加密 if (zFile.isEncrypted()) { zFile.setPassword(password.toCharArray()); } //4.解压所有文件 zFile.extractAll(dest); List headerList = zFile.getFileHeaders(); List&lt;File&gt; extractedFileList = new ArrayList&lt;&gt;(); for(Object object : headerList) { FileHeader fileHeader = (FileHeader)object; if (!fileHeader.isDirectory()) { extractedFileList.add(new File(destDir,fileHeader.getFileName())); } } File [] extractedFiles = new File[extractedFileList.size()]; extractedFileList.toArray(extractedFiles); return extractedFiles; } /** * 解压无密码的zip压缩包到指定目录 * @param zipFile zip压缩包 * @param dest 指定解压文件夹位置 * @return 解压后的文件数组 */ public static File[] deCompress(File zipFile, String dest) throws ZipException { try { return deCompress(zipFile, dest, null); } catch (ZipException e) { e.printStackTrace(); throw new ZipException(e); } } /** * 根据所给密码解压zip压缩包到指定目录 * @param zipFilePath zip压缩包绝对路径 * @param dest 指定解压文件夹位置 * @param password 压缩包密码 * @return 解压后的所有文件数组 */ public static File[] deCompress(String zipFilePath, String dest, String password) throws ZipException { try { return deCompress(new File(zipFilePath), dest, password); } catch (ZipException e) { e.printStackTrace(); throw new ZipException(e); } } /** * 无密码解压压缩包到指定目录 * @param zipFilePath zip压缩包绝对路径 * @param dest 指定解压文件夹位置 * @return 解压后的所有文件数组 */ public static File[] deCompress(String zipFilePath, String dest) throws ZipException { try { return deCompress(new File(zipFilePath), dest, null); } catch (ZipException e) { e.printStackTrace(); throw new ZipException(e); } }} 使用压缩无密码： 1234567891011121314@Testvoid 压缩无密码() { String file1 = \"D:\\\\test\\\\unzip\\\\333\\\\123.txt\"; String file2 = \"D:\\\\test\\\\unzip\\\\333\\\\456.txt\"; String file3 = \"D:\\\\test\\\\unzip\\\\333\\\\789.txt\"; String file4 = \"D:\\\\test\\\\unzip\\\\333\\\\789 - 副本.txt\"; //压缩后的zip文件路径 String zipFilePath1 = \"D:\\\\test\\\\unzip\\\\5555.zip\"; try { System.out.println(Zip4jUtil.compress(zipFilePath1,null,file1,file2,file3,file4)); } catch (ZipException e) { e.printStackTrace(); }} 压缩有密码： 12345678910111213@Testvoid 压缩有密码() { String file1 = \"D:\\\\test\\\\unzip\\\\333\\\\123.txt\"; String file2 = \"D:\\\\test\\\\unzip\\\\333\\\\456.txt\"; String file3 = \"D:\\\\test\\\\unzip\\\\333\\\\789.txt\"; //压缩后的zip文件路径 String zipFilePath2 = \"D:\\\\test\\\\unzip\\\\6666.zip\"; try { System.out.println(Zip4jUtil.compress(zipFilePath2,\"123\",file1,file2,file3)); } catch (ZipException e) { e.printStackTrace(); }} 解压无密码： 12345678910111213@Testvoid 解压无密码() { String zipFilePath1 = \"D:\\\\test\\\\unzip\\\\5555.zip\"; File[] files = new File[0]; try { files = Zip4jUtil.deCompress(zipFilePath1, \"D:\\\\test\\\\unzip\\\\5555\"); } catch (ZipException e) { e.printStackTrace(); } if(files != null){ System.out.println(files.length); }} 解压有密码： 12345678910111213@Testvoid 解压有密码() { String zipFilePath1 = \"D:\\\\test\\\\unzip\\\\6666.zip\"; File[] files = new File[0]; try { files = Zip4jUtil.deCompress(zipFilePath1, \"D:\\\\test\\\\unzip\\\\6666\", \"123\"); } catch (ZipException e) { e.printStackTrace(); } if(files != null){ System.out.println(files.length); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"自定义Redis配置","slug":"1605606341401/1605606341401","date":"2020-11-17T09:45:41.000Z","updated":"2020-11-17T10:06:58.073Z","comments":true,"path":"2020/11/1605606341401/1605606341401/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605606341401/1605606341401/","excerpt":"自定义Redis配置,修改原生的yml配置，采取自定义模式","text":"修改原生的yml配置，采取自定义模式，配置文件仅为动态值，如不需要则可删除，代码设有默认值， 依赖1234567891011121314&lt;!-- redis start --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- redis end --&gt; 配置配置文件：redis-config.properties 1234# redis setspring.redis.database=1spring.redis.host=127.0.0.1spring.redis.password= 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.pool2.impl.GenericObjectPoolConfig;import org.springframework.beans.factory.annotation.Value;import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.PropertySource;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.cache.RedisCacheWriter;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.RedisPassword;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;import org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;import org.springframework.stereotype.Component;import java.time.Duration;/** * @className: RedisConfig.java * @description: Redis配置 * @author: Demon */@Component@EnableCaching@PropertySource(value = {\"classpath:redis-config.properties\"},encoding = \"UTF-8\")public class RedisConfig{ @Value(\"${spring.redis.database:0}\") private int database; @Value(\"${spring.redis.host:localhost}\") private String host; @Value(\"${spring.redis.port:6379}\") private int port; @Value(\"${spring.redis.password:}\") private String password; @Value(\"${spring.redis.timeout:10000}\") private long timeout; @Value(\"${spring.redis.pool.maxTotal:30}\") private int maxTotal; @Value(\"${spring.redis.pool.maxIdle:30}\") private int maxIdle; @Value(\"${spring.redis.pool.minIdle:10}\") private int minIdle; @Value(\"${spring.redis.pool.maxWaitMillis:10000}\") private int maxWaitMillis; @Value(\"${spring.redis.testOnBorrow:true}\") private boolean testOnBorrow; @Value(\"${spring.redis.testOnReturn:false}\") private boolean testOnReturn; @Value(\"${spring.redis.testWhileIdle:true}\") private boolean testWhileIdle; @Bean public RedisConnectionFactory lettuceConnectionFactory() { GenericObjectPoolConfig genericObjectPoolConfig = new GenericObjectPoolConfig(); genericObjectPoolConfig.setMaxTotal(maxTotal); genericObjectPoolConfig.setMaxWaitMillis(maxWaitMillis); genericObjectPoolConfig.setMaxIdle(maxIdle); genericObjectPoolConfig.setMinIdle(minIdle); genericObjectPoolConfig.setTestOnBorrow(testOnBorrow); genericObjectPoolConfig.setTestOnReturn(testOnReturn); genericObjectPoolConfig.setTestWhileIdle(testWhileIdle); // 单点redis RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration(); redisConfig.setDatabase(database); redisConfig.setHostName(host); redisConfig.setPort(port); if (password != null &amp;&amp; !\"\".equals(password)) { redisConfig.setPassword(RedisPassword.of(password)); } LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder() .poolConfig(genericObjectPoolConfig) .commandTimeout(Duration.ofMillis(timeout)) .shutdownTimeout(Duration.ZERO) .build(); return new LettuceConnectionFactory(redisConfig,clientConfig); } /** * 配置自定义redisTemplate */ @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) { System.out.println(\"★★★★★加载 bean - RedisTemplate&lt;String, Object&gt; ★★★★★\"); RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory); //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值 替换默认序列化 Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(objectMapper); //使用StringRedisSerializer来序列化和反序列化redis的key值 redisTemplate.setKeySerializer(new StringRedisSerializer()); redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer); redisTemplate.setValueSerializer(jackson2JsonRedisSerializer); redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer); redisTemplate.afterPropertiesSet(); //事务支持 redisTemplate.setEnableTransactionSupport(true); return redisTemplate; } /** * 缓存配置管理器 */ @Bean public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) { System.out.println(\"★★★★★加载 bean - cacheManager ★★★★★\"); //以锁写入的方式创建RedisCacheWriter对象 RedisCacheWriter writer = RedisCacheWriter.lockingRedisCacheWriter(redisConnectionFactory); //创建默认缓存配置对象 RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig(); return new RedisCacheManager(writer, config); }} 使用123456@Resourceprivate RedisTemplate&lt;String,Object&gt; redisTemplate;ValueOperations&lt;String,Object&gt; valueOperations = redisTemplate.opsForValue();valueOperations.set(\"admin\",\"\"); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/tags/Redis/"}]},{"title":"MyBatis遍历map","slug":"1605605257925/1605605257925","date":"2020-11-17T09:27:37.000Z","updated":"2020-11-17T09:42:54.102Z","comments":true,"path":"2020/11/1605605257925/1605605257925/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605605257925/1605605257925/","excerpt":"MyBatis遍历map","text":"MyBatis是可以遍历map的， Dao注意：要加@Param注解，否则不行 Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();map.put(“USER_NAME”,”张三”);map.put(“USER_STATUS”,”0”);map.put(“UPDATE_TIME”,new Date()); 1int insertData(@Param(\"params\") Map&lt;String, Object&gt; map); Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();map.put(“1”,”张三”);map.put(“2”,”李四”); 1int deleteBatch(@Param(\"params\") Map&lt;String, Object&gt; map); Mapper注意：collection=”params.entrySet()” 或者 collection=”params” 都行 12345678910&lt;insert id=\"insertData\" parameterType=\"java.util.Map\"&gt; insert into user_table &lt;foreach collection=\"params.entrySet()\" index=\"key\" separator=\",\" item=\"value\" open=\"(\" close=\")\"&gt; #{key} &lt;/foreach&gt; values &lt;foreach collection=\"params.entrySet()\" index=\"key\" separator=\",\" item=\"value\" open=\"(\" close=\")\"&gt; #{value} &lt;/foreach&gt;&lt;/insert&gt; 123456&lt;update id=\"deleteBatch\" parameterType=\"java.util.Map\"&gt; delete from user_table where USER_ID in &lt;foreach collection=\"params.entrySet()\" index=\"key\" separator=\",\" item=\"value\" open=\"(\" close=\")\"&gt; #{key} &lt;/foreach&gt;&lt;/update&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://www.zhuqiaolun.com/categories/MyBatis/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"MyBatis的几种批量操作 - MySql","slug":"1605601494695/1605601494695","date":"2020-11-17T08:24:54.000Z","updated":"2020-11-17T09:43:28.479Z","comments":true,"path":"2020/11/1605601494695/1605601494695/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605601494695/1605601494695/","excerpt":"MyBatis的几种批量操作 - 新增/删除/更新","text":"说明此处针对MySql的数据库操作,datasource.url：jdbc:mysql://127.0.0.1:3306/data?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true 批量新增dao12345678List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();/** * 批量新增 * @param params 参数1 * @param list 参数2 */void saveBatchData(@Param(\"params\")Map&lt;String, Object&gt; map, @Param(\"list\")List&lt;Map&lt;String, Object&gt;&gt; list); Mapper此处的 “list” 为 dao里面的 @Param(“list”) 的 list 1234567&lt;insert id=\"saveBatchData\" parameterType=\"java.util.List\" &gt; insert into user_table ( USER_NAME,USER_STATUS,CREATE_TIME,UPDATE_TIME ) values &lt;foreach collection=\"list\" item=\"item\" separator=\",\"&gt; ( #{item.userName},#{item.userStatus},#{item.createDate},#{item.updateDate} ) &lt;/foreach&gt;&lt;/insert&gt; 批量删除dao数组: 123456789List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add(\"1\");String[] stringArray = new String[list.size()];/** * 批量删除 * @param stringArray 参数 */void deleteBatchDataByArray(String[] stringArray); 集合: 1234567List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();/** * 批量删除 * @param list 参数 */void deleteBatchDataByList(@Param(\"list\")List&lt;Map&lt;String, Object&gt;&gt; list); Mapper数组: 123456&lt;delete id=\"deleteBatchDataByArray\"&gt; delete from user_table where USER_ID in &lt;foreach item=\"item\" index=\"index\" collection=\"array\" open=\"(\" separator=\",\" close=\")\"&gt; #{item} &lt;/foreach&gt;&lt;/delete&gt; 集合: 123456&lt;delete id=\"deleteBatchDataByList\" parameterType=\"java.util.List\"&gt; delete from user_table where &lt;foreach collection=\"list\" item=\"item\" index=\"index\" separator=\"or\"&gt; ( USER_ID = #{item.userId} ) &lt;/foreach&gt;&lt;/delete&gt; 批量更新dao12345678List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();/** * 批量更新 - mat未进件 * @param params 参数1 * @param list 参数2 */void updateBatchData(@Param(\"params\")Map&lt;String, Object&gt; params, @Param(\"list\")List&lt;Map&lt;String, Object&gt;&gt; list); Mapper123456789101112&lt;update id=\"updateBatchData\" parameterType=\"java.util.List\" &gt; &lt;foreach collection=\"list\" item=\"item\" separator=\";\"&gt; update user_table &lt;set&gt; USER_NAME = #{item.userName}, USER_STATUS = #{item.userStatus}, UPDATE_TIME = #{item.updateDate} &lt;/set&gt; where USER_ID = #{item.userId} &lt;/foreach&gt;&lt;/update&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://www.zhuqiaolun.com/categories/MyBatis/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"poi(3.17)生成excel - 2007","slug":"1605601181571/1605601181571","date":"2020-11-17T08:19:41.000Z","updated":"2020-11-17T08:37:12.893Z","comments":true,"path":"2020/11/1605601181571/1605601181571/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605601181571/1605601181571/","excerpt":"Java工具类 - poi(3.17)生成excel - 2007","text":"依赖1234567891011121314151617181920&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.72&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt; 生成 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import org.apache.commons.io.FileUtils;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.*;import java.util.*;/** * @className: ExcelUtil.java * @description: excel 工具类 * @author: Demon */public class ExcelUtil { /** * 生成文件 * @param saveFilePath 输出文件路径 * @param jsonArray 数据集合 */ public static void createFile(String saveFilePath,JSONArray jsonArray) throws IOException { OutputStream outputStream = null; Workbook workbook = null; try { workbook = new XSSFWorkbook(); Sheet sheet = workbook.createSheet(\"Sheet1\"); for (int i = 0; i &lt; jsonArray.size(); i++) { // 行号 Row row = sheet.createRow(i); JSONObject jsonObject = jsonArray.getJSONObject(i); //列号 for (int j = 0; j &lt; jsonObject.size(); j++) { Cell cell = row.createCell(j); if(i == 0){ sheet.setColumnWidth(j, 15*256); } if(jsonObject.get(String.valueOf(j)) != null){ cell.setCellValue(String.valueOf(jsonObject.get(String.valueOf(j)))); }else{ cell.setCellValue(\"\"); } } } FileUtils.forceMkdirParent(new File(saveFilePath)); outputStream = new FileOutputStream(saveFilePath); workbook.write(outputStream); } catch(Exception e){ e.printStackTrace(); System.out.println(\"生成xlsx文件错误：\"+e); } finally { if (outputStream != null) { outputStream.close(); } if (workbook != null) { workbook.close(); } } }} 使用1234567String fileName = \"输出文件绝对路径\";JSONArray jsonArray = new JSONArray();···添加数据 JSONObject jsonObject = new JSONObject(true);jsonArray.add(jsonObject); ExcelUtil.createFile(fileName,jsonArray); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"poi(3.17)解析excel - 2007","slug":"1605159781717/1605159781717","date":"2020-11-12T05:43:01.000Z","updated":"2020-11-23T05:09:51.652Z","comments":true,"path":"2020/11/1605159781717/1605159781717/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605159781717/1605159781717/","excerpt":"Java工具类 - poi(3.17)解析excel - 2007","text":"依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt; 解析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.*;/** * @className: ExcelUtil.java * @description: excel 工具类 * @author: Demon */public class ExcelUtil { /** * 根据读取，文件流解析Excel文件 * @param input 文件流 * @return 返回 * @throws IOException 异常 */ public static List&lt;Map&lt;String,String&gt;&gt; getDataToInput(FileInputStream input) throws IOException { return getData(input); } /** * 根据文件绝对路径，解析Excel文件 * @param filePath 文件路径 * @return 返回 * @throws IOException 异常 */ public static List&lt;Map&lt;String,String&gt;&gt; getDataToFilePath(String filePath) throws IOException { return getData(new FileInputStream(filePath)); } /** * 解析数据 */ private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException { List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;(); Workbook wb = null; try { wb = new XSSFWorkbook(input); // 获得第一个表单 Sheet sheet = wb.getSheetAt(0); // 获得第一个表单的迭代器 Iterator&lt;Row&gt; rows = sheet.rowIterator(); while (rows.hasNext()) { // 获得行数据 Row row = rows.next(); // 获得第一行的迭代器 Iterator&lt;Cell&gt; cells = row.cellIterator(); Map&lt;String,String&gt; jsonMap = new LinkedHashMap&lt;&gt;(); StringBuilder stringBuilder = new StringBuilder(); while (cells.hasNext()) { Cell cell = cells.next(); String val = \"\"; // 根据cell中的类型来输出数据 switch (cell.getCellTypeEnum()) { case NUMERIC: val = String.valueOf(cell.getNumericCellValue()); break; case STRING: val = String.valueOf(cell.getStringCellValue()); break; case BOOLEAN: val = String.valueOf(cell.getBooleanCellValue()); break; case FORMULA: val = String.valueOf(cell.getCellFormula()); break; default: break; } stringBuilder.append(val).append(\"#\"); jsonMap.put(String.valueOf(cell.getColumnIndex()), val); } System.out.println(stringBuilder.toString()); if (!jsonMap.isEmpty()) { mapList.add(jsonMap); } } } catch (FileNotFoundException e) { System.out.println(\"找不到xlsx文件\"); throw new IOException(e); } catch (IOException e) { System.out.println(\"解析xlsx文件错误\"); throw new IOException(e); } finally { if (wb != null) { try { wb.close(); } catch (IOException e) { e.printStackTrace(); } } if (input != null) { try { input.close(); } catch (IOException e) { e.printStackTrace(); } } } return mapList; }} 使用第一种： 12345678try { String filePath = \"D:\\\\test\\\\test.xlsx\"; FileInputStream fileInputStream = new FileInputStream(new File(filePath)); List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToInput(fileInputStream); System.out.println(mapList.size());} catch (IOException e) { e.printStackTrace();} 第二种： 1234567try { String filePath = \"D:\\\\test\\\\test.xlsx\"; List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToFilePath(filePath); System.out.println(mapList.size());} catch (IOException e) { e.printStackTrace();} 链接poi(3.17)解析excel - 2007 续.1 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"对响应值Response的封装使用(可格式化Json格式数据)","slug":"1605079334142/1605079334142","date":"2020-11-11T07:22:14.000Z","updated":"2020-11-11T08:04:20.481Z","comments":true,"path":"2020/11/1605079334142/1605079334142/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605079334142/1605079334142/","excerpt":"对响应值Response的封装使用","text":"配置返回的json中忽略null属性值，不传递pom引入: 1234567891011&lt;!-- lombok --&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;!-- jackson --&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&lt;/dependency&gt; 第一种，在yml中写入（全局）： 123spring: jackson: default-property-inclusion: non_null 第二种，在应用类上写入（局部）： 1@JsonInclude(JsonInclude.Include.NON_NULL) 类ResponseBean： 123456789101112131415161718192021222324252627282930313233343536373839import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonInclude;import com.fasterxml.jackson.databind.ObjectMapper;import lombok.Data;import lombok.SneakyThrows;import lombok.experimental.Accessors;import java.io.Serializable;/** * @className: ResponseUtils.java * @description: 返回的JSON数据结构标准 * @author: Demon */@Data@Accessors(chain = true)public class ResponseBean implements Serializable { private boolean success = false; private Object data; private String msg; private String errCode; private String errMsg; @JsonIgnore private boolean dataFormat = false; @SneakyThrows @Override public String toString() { ObjectMapper objectMapper = new ObjectMapper(); objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); if(this.isDataFormat()){ return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(this); }else{ return objectMapper.writer().writeValueAsString(this); } }} BaseController12345678910111213141516171819202122232425262728/** * @className: BaseController.java * @description: 基本 * @author: Demon */public abstract class BaseController { /** * 使用response输出JSON * @param response response * @param str 响应对应 */ protected void out(HttpServletResponse response, Object str) { PrintWriter out = null; try { response.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"application/json\"); out = response.getWriter(); out.print(str); } catch (Exception e) { log.error(\"输出JSON出错\",e.getMessage()); } finally { if (out != null) { out.flush(); out.close(); } } }} 使用123456789101112131415161718192021import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @ClassName: IndexController * @Description: 控制层测试 * @Author: Demon */@RestControllerpublic class TestController extends BaseController { @RequestMapping(method = {RequestMethod.GET,RequestMethod.POST}) public @ResponseBody void getIndex(HttpServletResponse response) { ResponseBean responseBean = new ResponseBean(); responseBean.setSuccess(true); responseBean.setDataFormat(true); this.out(response,responseBean); }} 结果： 123{ \"success\" : true} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"Java的普通类获取注册的bean","slug":"1605079105126/1605079105126","date":"2020-11-11T07:18:25.000Z","updated":"2020-11-11T07:21:43.593Z","comments":true,"path":"2020/11/1605079105126/1605079105126/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605079105126/1605079105126/","excerpt":"SpringBoot的ApplicationContext","text":"配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Component;/** * @className: ApplicationContextHelper.java * @description: 获取 ApplicationContext * @author: Demon */@Componentpublic class ApplicationContextHelper implements ApplicationContextAware { private static ApplicationContext appCtx; @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { System.out.println(\"初始化applicationContext：\"+applicationContext.getBeanDefinitionNames().length); appCtx = applicationContext; } /** * 通过name获取 Bean. * @param name bean名 * @return 返回 */ public static Object getBean(String name) { return appCtx.getBean(name); } /** * 通过class获取Bean. * @param clazz bean类 * @return 返回 */ public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) { return appCtx.getBean(clazz); } /** * 通过name,以及Clazz返回指定的Bean * @param name bean名 * @param clazz bean类 * @return 返回 */ public static &lt;T&gt; T getBean(String name, Class&lt;T&gt; clazz) { return appCtx.getBean(name, clazz); }} 使用获取 RestTemplate 的 bean 1RestTemplate restTemplate = ApplicationContextHelper.getBean(RestTemplate.class); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"MD5加密工具","slug":"1605078934677/1605078934677","date":"2020-11-11T07:15:34.000Z","updated":"2020-11-11T07:16:45.924Z","comments":true,"path":"2020/11/1605078934677/1605078934677/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605078934677/1605078934677/","excerpt":"Java工具类 - MD5加密工具","text":"1234567891011121314151617181920212223242526272829303132333435import java.security.MessageDigest;/** * @ClassName: MD5Util * @Description: MD5加密工具 * @Author: Demon */public class MD5Util { private static final String SALT = \"demon\"; public static String encode(String password) { password = password + SALT; MessageDigest md5; try { md5 = MessageDigest.getInstance(\"MD5\"); } catch (Exception e) { throw new RuntimeException(e); } char[] charArray = password.toCharArray(); byte[] byteArray = new byte[charArray.length]; for (int i = 0; i &lt; charArray.length; i++) { byteArray[i] = (byte) charArray[i]; } byte[] md5Bytes = md5.digest(byteArray); StringBuilder hexValue = new StringBuilder(); for (byte md5Byte : md5Bytes) { int val = ((int) md5Byte) &amp; 0xff; if (val &lt; 16) { hexValue.append(\"0\"); } hexValue.append(Integer.toHexString(val)); } return hexValue.toString(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"获取当前登录用户IP","slug":"1605078705487/1605078705487","date":"2020-11-11T07:11:45.000Z","updated":"2020-11-11T07:16:05.989Z","comments":true,"path":"2020/11/1605078705487/1605078705487/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605078705487/1605078705487/","excerpt":"Java工具类 - 获取当前登录用户IP","text":"此方法采用的 HttpServletRequest 获取，故使用web项目，说明，当存在使用 虚拟机 的情况，会导致获取的IP为 以太网适配器 的IP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import javax.servlet.http.HttpServletRequest;import java.net.InetAddress;import java.net.UnknownHostException;import java.util.Arrays;/** * @ClassName: IpUtil * @Description: 获取当前登录用户IP * @Author: Demon */public class IpUtil { private static final String[] LOCAL_IP = {\"127.0.0.1\",\"localhost\",\"0:0:0:0:0:0:0:1\"}; private static final String UNKNOWN = \"unknown\"; public static String getIpAddr(HttpServletRequest request) { String ipAddress; try { ipAddress = request.getHeader(\"x-forwarded-for\"); if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) { ipAddress = request.getHeader(\"Proxy-Client-IP\"); } if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) { ipAddress = request.getHeader(\"WL-Proxy-Client-IP\"); } if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) { ipAddress = request.getRemoteAddr(); if (Arrays.asList(LOCAL_IP).contains(ipAddress)) { // 根据网卡取本机配置的IP InetAddress inet = null; try { inet = InetAddress.getLocalHost(); } catch (UnknownHostException e) { e.printStackTrace(); } assert inet != null; ipAddress = inet.getHostAddress(); } } // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割 // \"***.***.***.***\".length() if (ipAddress != null &amp;&amp; ipAddress.length() &gt; 15) { // = 15 if (ipAddress.indexOf(\",\") &gt; 0) { ipAddress = ipAddress.substring(0, ipAddress.indexOf(\",\")); } } } catch (Exception e) { ipAddress = \"\"; } return ipAddress; } /** * 判断IP地址的合法性，这里采用了正则表达式的方法来判断 * return true，合法 * */ public static boolean ipCheck(String text) { if (text != null &amp;&amp; !text.isEmpty()) { // 定义正则表达式 String regex = \"^(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|[1-9])\\\\.\"+ \"(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\"+ \"(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\"+ \"(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)$\"; // 判断ip地址是否与正则表达式匹配 // 返回判断信息 // 返回判断信息 return text.matches(regex); } return false; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"实体对象与Map之间的转换工具类","slug":"1605077732135/1605077732135","date":"2020-11-11T06:55:32.000Z","updated":"2020-11-11T07:04:33.831Z","comments":true,"path":"2020/11/1605077732135/1605077732135/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605077732135/1605077732135/","excerpt":"Java工具类 - 实体对象与Map之间的转换工具类","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import java.lang.reflect.Field;import java.util.LinkedHashMap;import java.util.Map;/** * @ClassName: EntityUtil * @Description: 实体对象与Map之间的转换工具类 * @Author: Demon */public class EntityUtil { /** * 实体类转Map * @param object 对象 * @return 返回 */ public static Map&lt;String, Object&gt; entityToMap(Object object) { if (object == null) { return null; } Map&lt;String, Object&gt; map = new LinkedHashMap&lt;&gt;(); for (Field field : object.getClass().getDeclaredFields()){ try { boolean flag = field.isAccessible(); field.setAccessible(true); Object o = field.get(object); map.put(field.getName(), o); field.setAccessible(flag); } catch (Exception e) { e.printStackTrace(); } } return map; } /** * Map转实体类 * @param map 需要初始化的数据，key字段必须与实体类的成员名字一样，否则赋值为空 * @param entity 需要转化成的实体类 * @return 返回 */ public static &lt;T&gt; T mapToEntity(Map&lt;String, Object&gt; map, Class&lt;T&gt; entity) { T t = null; try { t = entity.newInstance(); for(Field field : entity.getDeclaredFields()) { if (map.containsKey(field.getName())) { boolean flag = field.isAccessible(); field.setAccessible(true); Object object = map.get(field.getName()); if (object!= null &amp;&amp; field.getType().isAssignableFrom(object.getClass())) { field.set(t, object); } field.setAccessible(flag); } } return t; } catch (InstantiationException | IllegalAccessException e) { e.printStackTrace(); } return t; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"SpringBoot 静态资源处理","slug":"1605076979058/1605076979058","date":"2020-11-11T06:42:59.000Z","updated":"2020-11-11T07:23:37.795Z","comments":true,"path":"2020/11/1605076979058/1605076979058/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605076979058/1605076979058/","excerpt":"配置SpringBoot的资源路径","text":"配置123456789101112131415161718192021import org.springframework.context.annotation.Configuration;import org.springframework.util.ResourceUtils;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * @className: WebMvcConfig.java * @description: WebMvc配置 * @author: Demon */@Configurationpublic class WebMvcConfig implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { // 配置模板资源路径 registry.addResourceHandler(\"/templates/**\").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+\"/templates/\"); registry.addResourceHandler(\"/static/**\").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+\"/static/\"); registry.addResourceHandler(\"/public/**\").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+\"/public/\"); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"解决IE浏览器  @ResponseBody 返回json的时候提示下载问题","slug":"1605076219103/1605076219103","date":"2020-11-11T06:30:19.000Z","updated":"2020-11-11T07:03:00.418Z","comments":true,"path":"2020/11/1605076219103/1605076219103/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1605076219103/1605076219103/","excerpt":"解决IE浏览器 @ResponseBody 返回json的时候提示下载问题","text":"配置12345678910111213141516171819202122232425262728import org.springframework.context.annotation.Configuration;import org.springframework.http.MediaType;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.List;/** * @className: WebMvcConfig.java * @description: WebMvc配置 * @author: Demon */@Configurationpublic class WebMvcConfig implements WebMvcConfigurer { @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) { MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter(); List&lt;MediaType&gt; supportedMediaTypes = new ArrayList&lt;&gt;(); MediaType media = new MediaType(MediaType.TEXT_HTML, Charset.forName(\"UTF-8\")); supportedMediaTypes.add(media); jsonConverter.setSupportedMediaTypes(supportedMediaTypes); converters.add(jsonConverter); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"Windows Service Wrapper （续）","slug":"1604299054941/1604299054941","date":"2020-11-02T06:37:34.000Z","updated":"2020-11-02T07:08:59.029Z","comments":true,"path":"2020/11/1604299054941/1604299054941/","link":"","permalink":"https://www.zhuqiaolun.com/2020/11/1604299054941/1604299054941/","excerpt":"Windows Service Wrapper","text":"Windows Service WrapperWindows Service Wrapper 可以将 Java 的 jar 包注册为 windows 服务。项目：https://github.com/winsw/winsw地址：https://github.com/winsw/winsw/releases 下载官方 GitHub下载 WinSW.NET4.exe 和 sample-minimal.xml选择 WinSW v2.10.3 版本下载WinSW.NET4.exe ：https://github.com/winsw/winsw/releases/download/v2.10.3/WinSW.NET4.exesample-minimal.xml ：https://github.com/winsw/winsw/releases/download/v2.10.3/sample-minimal.xml 配置新建目录，例如： MyApp 文件内容： 1234567891011bin: 属于服务的命名以及配置 - MyApp.exe - MyApp.xmlconf：一些需要的文件配置 jre：属于Java的运行环境lib：属于程序的执行包log：输出日志文件夹 MyApp.xml配置过程中注意目录情况，%BASE% 是以exe所在的目录为根目录 1234567891011121314151617181920212223&lt;service&gt; &lt;!-- 服务名称 --&gt; &lt;id&gt;MyApp&lt;/id&gt; &lt;!-- 服务显示名称 --&gt; &lt;name&gt;My App Service&lt;/name&gt; &lt;!-- 服务描述 --&gt; &lt;description&gt;通过wapper注册成Windows服务&lt;/description&gt; &lt;!-- java环境变量 --&gt; &lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：C:\\jdk1.8\\jre\\bin\\java--&gt; &lt;executable&gt;%BASE%\\..\\jre\\bin\\java&lt;/executable&gt; &lt;!--启动参数--&gt; &lt;arguments&gt;-jar %BASE%\\..\\lib\\MyApp.jar\"&lt;/arguments&gt; &lt;!-- 开机启动 --&gt; &lt;startmode&gt;Automatic&lt;/startmode&gt; &lt;!-- 日志配置 &lt;logmode&gt;rotate&lt;/logmode&gt; --&gt; &lt;logpath&gt;%BASE%\\..\\log&lt;/logpath&gt; &lt;log mode=\"roll-by-time\"&gt; &lt;pattern&gt;yyyyMMdd&lt;/pattern&gt; &lt;/log&gt;&lt;/service&gt; 运行以管理员身份运行 bat文件，进行 windows 服务操作 bat注册服务 service install.bat 12@echo offstart bin\\MyApp.exe install 卸载服务 service uninstall.bat 12@echo offstart bin\\MyApp.exe uninstall 启动服务 service start.bat 12@echo offstart bin\\MyApp.exe start 停止服务 service stop.bat 12@echo offstart bin\\MyApp.exe stop 重启服务 service restart.bat 12@echo offstart bin\\MyApp.exe restart 服务状态 service status.bat 12@echo offstart bin\\MyApp.exe status document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"Nginx一个server配置多个location","slug":"1602671313615/1602671313615","date":"2020-10-14T10:28:33.000Z","updated":"2020-10-14T11:02:48.414Z","comments":true,"path":"2020/10/1602671313615/1602671313615/","link":"","permalink":"https://www.zhuqiaolun.com/2020/10/1602671313615/1602671313615/","excerpt":"Nginx一个server配置多个location（alias与root的区别）","text":"nginx作为代理服务器，可以配置多个location，通过访问不同路径来访问不同目录。 配置123456789101112131415161718192021222324252627server { listen 80; #端口号 server_name localhost; location /video { #alias末尾必须要用/结束 alias html/video/; index index.html index.htm; } location /music { #alias末尾必须要用/结束 alias html/music/; index index.html index.htm; } location / { #root末尾可以不用/结束 root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; }} 内容在music内放置文件 111.mp3在video内放置文件 222.mp4 访问http://localhost/http://localhost/music/111.mp3http://localhost/video/222.mp4 区别alias与root的区别：alias与root指定的url意义不同 root和alias都可以定义在location模块中，都是用来指定请求资源的真实路径，比如： location /music/ { root /data/file; } 请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/music/111.mp3，注意：root真实路径是root指定的值加上location指定的值。 而 alias 正如其名，alias指定的路径是location的别名，不管location的值怎么写，资源的真实路径都是 alias 指定的路径，比如： location /music/ { alias /data/file/; } 请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/111.mp3，注意：alias真实路径是alias指定的值，不包含location指定的值了。 扩展在一个location中，alias可以存在多个，但是root只能有一个，alias只能存在与location中，但是root可以用在server、http和location中，alias后面必须要“/”结束，否则会找不到文件，而root的“/”可有可无， document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.zhuqiaolun.com/tags/Nginx/"}]},{"title":"Redis配置 之  设置密码","slug":"1601271269577/1601271269577","date":"2020-09-28T05:34:29.000Z","updated":"2020-09-28T05:47:09.061Z","comments":true,"path":"2020/09/1601271269577/1601271269577/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1601271269577/1601271269577/","excerpt":"Redis配置 之 修改密码","text":"默认安装后的redis是没有密码的，这明显有很大的安全隐患，所以需要设置密码。这里提供2中方式 修改密码注：使用第二种，不知道怎么回滚为空密码 1.第一种方式（推荐）：修改配置文件“redis.windows-service.conf”，大约在 443 行：添加一下内容： requirepass 123456然后重启Redis服务，即可生效。如若去掉此行代码即属于设置密码为空。 2.第二种方式：使用命令方式进入链接后，输入 config set requirepass “你的密码”，本例为 123456，进行回车； 当显示为OK后，需要进行auth认证，当输入 auth后会出现 auth password，不用管password的出现，敲一下空格再输入密码(123456)回车即可； 更换密码输入命令：config set requirepass “” ；当密码为空时不用auth认证；且密码任意输入都可连接； 查看密码输入命令：config get requirepass document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/categories/Redis/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/tags/Redis/"}]},{"title":"Window10安装 Redis - 绿色版","slug":"1601194986992/1601194986992","date":"2020-09-27T08:23:06.000Z","updated":"2020-09-28T07:50:21.185Z","comments":true,"path":"2020/09/1601194986992/1601194986992/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1601194986992/1601194986992/","excerpt":"Window10安装 Redis","text":"下载Redis下载地址：https://github.com/microsoftarchive/redis/releases传送门：https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip 对文件进行一个说明：Redis-x64-3.2.100.msi ：图形化安装文件Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装Redis-x64-3.2.100.zip ：.zip压缩格式源码Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码 安装点击下载后，需要先进行解压，解压文件如下： 运行双击运行目录下的 redis-server.exe，会加载自身存在的 conf 文件配置，采取默认的配置运行；出现以下画面即成功： 配置修改为加载目录下的 redis.windows.conf 文件配置，由于我修改了配置文件端口为 6377，故执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下： D:\\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf bat启动创建快捷启动，在根目录下，新建txt文件，填写以下内容，保存后修改txt的文件后缀为bat，双击即可启动； @echo off redis-server.exe redis.windows.conf @pause服务启动创建服务启动，可保存跟随系统启动自运行；执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下： redis-server.exe --service-install redis.windows.conf出现 #Redis successfully installed as a service.即完成；可在服务列表中查看名称为【Rides】的服务； 扩展常用的redis服务命令，需在进入Redis的根目录下执行；安装服务：redis-server.exe –service-install redis.windows.conf开启服务：redis-server –service-start停止服务：redis-server –service-stop卸载服务：redis-server –service-uninstall document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/tags/Redis/"}]},{"title":"Window10安装 Redis - 安装版","slug":"1601194890597/1601194890597","date":"2020-09-27T08:21:30.000Z","updated":"2020-09-28T05:45:28.313Z","comments":true,"path":"2020/09/1601194890597/1601194890597/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1601194890597/1601194890597/","excerpt":"Window10安装 Redis","text":"Redis中文官方网站：http://www.redis.cn/ 下载Redis下载地址：https://github.com/microsoftarchive/redis/releases传送门：https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi 对文件进行一个说明：Redis-x64-3.2.100.msi ：图形化安装文件Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装Redis-x64-3.2.100.zip ：.zip压缩格式源码Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码 安装运行下载的msi文件，点击next; 1.勾选 I accept the terms in the License Agreement，点击next; 2.更换安装目录，以及添加到环境变量path,以便开机启动，命名执行 3.redis默认是 6379 端口，如果你不想用 6379 或者 6379 已经被其他程序占用，可以修改成其他端口。添加到windows防火墙的选项保持默认就好。 4.设置redis最大内存限制。默认100MB内存，但是可能是不够用的，所以改大一点，我这里修改成了1024MB。可以根据自己的实际情况来更改设置。 5.点击install即可 至此安装结束。 验证打开任务管理器，点击服务，查看服务列表中是否有一个名字叫做Redis的服务正在运行，如果有，说明安装并启动成功， 进入安装目录下，执行 redis-cli命令： 如果没有或者未成功启动，请删除服务之后对照如上步骤重新安装。删除redis服务命令为 sc delete 服务名 ，需要注意删除服务需要使用管理员身份打开命令行窗口执行命令。 sc delete Redis扩展使用的时候提示连不上，可以关闭保护模式：在redis安装目录找到“redis.windows-service.conf”：查找protected-mode yes 改为 protected-mode no document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/tags/Redis/"}]},{"title":"Jackson 的 使用","slug":"1601024145664/1601024145664","date":"2020-09-25T08:55:45.000Z","updated":"2020-11-11T07:05:43.274Z","comments":true,"path":"2020/09/1601024145664/1601024145664/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1601024145664/1601024145664/","excerpt":"Jackson 是当前用的比较广泛的，用来序列化和反序列化 json 的 Java 的开源框架","text":"依赖123456&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.11.0&lt;/version&gt;&lt;/dependency&gt; jackson-databind 依赖 jackson-core 和 jackson-annotations，当添加 jackson-databind 之后， jackson-core 和 jackson-annotations 也随之添加到 Java 项目工程中。在添加相关依赖包之后，就可以使用 Jackson。 配置信息//在反序列化时忽略在 json 中存在但 Java 对象不存在的属性 mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false); //在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false) //在序列化时忽略值为 null 的属性 mapper.setSerializationInclusion(Include.NON_NULL); //忽略值为默认值的属性 mapper.setDefaultPropertyInclusion(Include.NON_DEFAULT);更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。 注解Jackson 根据它的默认方式序列化和反序列化 java 对象，若根据实际需要，灵活的调整它的默认方式，可以使用 Jackson 的注解。常用的注解及用法如下： @JsonProperty：用于属性，把属性的名称序列化时转换为另外一个名称。 @JsonProperty(\"birth_date\") private Date birthDate;@JsonFormat：用于属性或者方法，把属性的格式序列化时转换成指定的格式。 @JsonFormat(timezone = \"GMT+8\", pattern = \"yyyy-MM-dd HH:mm:ss\") public Date birthDate;@JsonPropertyOrder：用于类，指定属性在序列化时 json 中的顺序。 @JsonPropertyOrder({ \"birth_date\", \"name\" }) public class Person{}使用Jackson 最常用的 API 就是基于”对象绑定” 的 ObjectMapper。writeValue：将 java 对 象序列化 为 json，并 将 json 存 储成不同的格式，String（writeValueAsString），Byte Array（writeValueAsString），Writer， File，OutStream 和 DataOutput。readValue：将不同的数据源像 String ， Byte Array， Reader，File，URL， InputStream 将 json 反序列化为 java 对象。 实体对象转化字符串 字符串转化键值对象 创建对象map： list： 示例1代码 12345678910111213141516171819202122232425try { ObjectMapper mapper = new ObjectMapper(); // 在反序列化时忽略在 json 中存在但 Java 对象不存在的属性 mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); //在序列化时忽略值为 null 的属性 mapper.setSerializationInclusion(Include.NON_NULL); Person person = new Person(); person.setName(\"demo\"); person.setAge(30); // 将实体对象转化Json字符串 String jsonString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(person); System.out.println(jsonString); // 将Json字符串转化成实体对象 String jsonStringTemp = \"{\\\"name\\\" : \\\"demo\\\",\\\"age\\\" : 30 ,\\\"sex\\\":\\\"男\\\"}\"; System.out.println(jsonStringTemp); Person deserializedPerson = mapper.readValue(jsonStringTemp, Person.class); System.out.println(deserializedPerson); // 将Json字符串转化成键值对象 ObjectMapper objectMapper = new ObjectMapper(); Map&lt;String, Object&gt; jsonMap = objectMapper.readValue(jsonStringTemp, new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {}); System.out.println(jsonMap); System.out.println(jsonMap.get(\"sex\"));} catch (JsonProcessingException e) { e.printStackTrace();} 结果： 12345678{ \"name\" : \"demo\", \"age\" : 30}{\"name\" : \"demo\",\"age\" : 30 ,\"sex\":\"男\"}Person [name=demo, sex=男, age=30]{name=demo, age=30, sex=男}男 示例2代码 123456789ObjectMapper objectMapper = new ObjectMapper();ObjectNode objectNode = objectMapper.createObjectNode();objectNode.put(\"name\", \"张三\");objectNode.put(\"age\", 30);ArrayNode arrayNode = objectMapper.createArrayNode();arrayNode.add(\"Java\");arrayNode.add(\"Python\");objectNode.set(\"job\", arrayNode);System.out.println(objectNode.toString()); 结果： 1{\"name\":\"张三\",\"age\":30,\"job\":[\"Java\",\"Python\"]} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Jackson","slug":"Jackson","permalink":"https://www.zhuqiaolun.com/categories/Jackson/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"Maven在项目下的pom配置","slug":"1600933059831/1600933059831","date":"2020-09-24T07:37:39.000Z","updated":"2020-11-23T03:06:38.331Z","comments":true,"path":"2020/09/1600933059831/1600933059831/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1600933059831/1600933059831/","excerpt":"Maven在项目下的pom配置","text":"properties版本信息 &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/properties&gt;dependencies引入依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.68&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;finalName 打包项目名称 &lt;finalName&gt;demon&lt;/finalName&gt;plugins使用插件 打包JDK版本: 12345678910&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;!-- 可能需要版本号 --&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt;&lt;/plugin&gt; 打出jar包源码sources： 12345678910111213&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.1.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-sources&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;jar&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 打出无/有依赖的jar,jar-with-dependencies结尾的表示含有jar的文件:打包命令：clean assembly:assembly 12345678910111213141516171819202122232425&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;!-- 这部分可有可无,加上的话则直接生成可运行jar包 --&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.demon.App&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;assembly&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 安装第三方的jar，即无法远程仓库下载的jar，安装在本地，然后就正常引入即可： 1234567891011121314151617181920212223 &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;install-external&lt;/id&gt; &lt;phase&gt;clean&lt;/phase&gt; &lt;configuration&gt; &lt;file&gt;${basedir}/src/lib/demon-0.0.1.jar&lt;/file&gt; &lt;repositoryLayout&gt;default&lt;/repositoryLayout&gt; &lt;groupId&gt;com.demon&lt;/groupId&gt; &lt;artifactId&gt;demon&lt;/artifactId&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;generatePom&gt;true&lt;/generatePom&gt; &lt;/configuration&gt; &lt;goals&gt; &lt;goal&gt;install-file&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 代理仓库配置开启项目本身的代理仓库配置 &lt;repository&gt; &lt;id&gt;spring&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt;但有时，跟着上面的设置方法并不奏效，仍然还是从之前的镜像站中去下载。此时，我们需要去检查下 Maven 安装目录下的settings.xml： &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt;可以看到，在设置镜像时，mirrorOf设置为了“*”，意味所有的依赖都是从这个镜像上下载。完全不给Spring Snapshots机会了。 解决方法也简单，改为下面的方式： &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*,!spring-snapshots&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt;mirrorOf设置为了“*,!spring-snapshots”，表示除了Spring Snapshots外，所有的依赖都将从这个镜像上下载。 mirrorOf的配置支持如下场景： *：所有依赖； external:*：所有不再本地和不是基于文件的依赖； repo,repo1：所有来自repo或者repo1仓库的依赖； *,!repo1：除了repo1外的所有依赖。即上面示例中的场景。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Maven","slug":"Maven","permalink":"https://www.zhuqiaolun.com/categories/Maven/"}],"tags":[{"name":"pom","slug":"pom","permalink":"https://www.zhuqiaolun.com/tags/pom/"}]},{"title":"Maven的pom","slug":"1600931110662/1600931110662","date":"2020-09-24T07:05:10.000Z","updated":"2020-09-27T08:03:49.745Z","comments":true,"path":"2020/09/1600931110662/1600931110662/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1600931110662/1600931110662/","excerpt":"Maven的pom","text":"描述pom文件定于了一个maven项目的maven配置，一般pom文件的放在项目或者模块的根目录下。 maven的遵循约定大于配置，约定了如下的目录结构： ${basedir}：存放pom.xml和所有的子目录 ${basedir}/src/main/java：项目的java源代码 ${basedir}/src/main/resources：项目的资源文件，比如说properties文件、xml文件、application.yml等 ${basedir}/src/test/java：项目的测试类，比如说Junit代码 ${basedir}/src/test/resources：测试用的资源 ${basedir}/src/main/webapp/WEB-INF：web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面，在springboot中无此目录 ${basedir}/target：打包输出目录，在IDEA中需要设置 ${basedir}/target/classes：编译输出目录 ${basedir}/target/test-classes：测试编译输出目录以下的内容属于根元素和必要配置 &lt;!-- 模型版本 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 公司或者组织的唯一标志，也是打包成jar包路径的依据 --&gt; &lt;!-- 例如com.demon.project，maven打包jar包的路径：/com/demon/project --&gt; &lt;groupId&gt;com.demon.project&lt;/groupId&gt; &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt; &lt;artifactId&gt;demo&lt;/artifactId&gt; &lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;!--项目产生的构件类型，包括jar、war、pom等 --&gt; &lt;packaging&gt;jar&lt;/packaging&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Maven","slug":"Maven","permalink":"https://www.zhuqiaolun.com/categories/Maven/"}],"tags":[{"name":"pom","slug":"pom","permalink":"https://www.zhuqiaolun.com/tags/pom/"}]},{"title":"在Windows下安装Maven环境","slug":"1600927625377/1600927625377","date":"2020-09-24T06:07:05.000Z","updated":"2020-09-24T07:08:57.528Z","comments":true,"path":"2020/09/1600927625377/1600927625377/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1600927625377/1600927625377/","excerpt":"在Windows下安装Maven环境","text":"下载Mavenmaven 官网下载地址：https://maven.apache.org/download.cgimaven 文件下载地址：https://archive.apache.org/dist/maven/maven-3/下载 Binary 版本，点击箭头所指的链接进行下载传送门：https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip 解压文件 配置Maven环境变量打开环境变量界面： 新建系统变量：MAVEN_HOME，值为maven的根目录 修改系统变量：path,点击新建添加 %MAVEN_HOME%\\bin 验证Maven环境变量然后win+R 运行cmd 输入 mvn -version，如图所示则配置成功 修改本地仓库地址在maven根目录下打开conf目录可以找到settings文件，找到第53行，这里是maven默认的仓库，默认的仓库地址为当前用户的 .m文件夹下的repository目录内，在settings文件中有一个 localRepository 标签复制第53行，将它拿到注释外并将中间的内容改成你需要的路径，如图 &lt;localRepository&gt;D:\\apache\\Repositories\\Maven&lt;/localRepository&gt;表示本地仓库地址为D盘的xxxx目录下 配置Maven镜像在maven根目录下打开conf目录可以找到settings文件，找到第147行，Maven自身默认镜像 &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt;由于默认镜像属于国外，下载jar很慢；所以需要配置国内的镜像 阿里云仓库（推荐）： &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; &lt;/mirror&gt;spring.io仓库: &lt;mirror&gt; &lt;id&gt;sprintio&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;https://repo.spring.io/libs-snapshot/&lt;/url&gt; &lt;/mirror&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://www.zhuqiaolun.com/tags/Maven/"}]},{"title":"Nginx 根据 URL 配置请求 location","slug":"1600763525872/1600763525872","date":"2020-09-22T08:32:05.000Z","updated":"2020-09-22T08:59:35.864Z","comments":true,"path":"2020/09/1600763525872/1600763525872/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1600763525872/1600763525872/","excerpt":"Nginx 根据 URL 配置请求 location","text":"说明在Nginx 中 配置 upstream 代理服务器，由于 $scheme = http （return 301 ）会导致http的请求链接跳转https请求，故在http中不用配置。 在配置路径中使用根据URL请求不通的访问，需要保持顺序问题 第一访问tomcat里面的项目名《a》 location ~* .*tomcat-a.* { proxy_pass http://tomcat; proxy_set_header Host $http_host; }第二访问tomcat里面的项目名《b》 location ~* .*tomcat-b.* { proxy_pass http://tomcat; proxy_set_header Host $http_host; }第三访问nginx里面html文件夹的内容 location / { root html; index index.html index.htm; }在https中进行代理访问需要添加 proxy_set_header Host $http_host; 配置user root; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; # 开启gzip压缩 gzip on; gzip_comp_level 5; gzip_min_length 1024; gzip_types text/plain application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png; # 隐藏nginx版本信息 server_tokens off; upstream tomcat{ server www.zhuqiaolun.com:8080; } server { listen 80; server_name www.zhuqiaolun.com; if ($scheme = http ) { return 301 https://www.zhuqiaolun.com$request_uri; } #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } # HTTPS server # server { listen 443 ssl; server_name www.zhuqiaolun.com; #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。 root html; index index.html index.htm; ssl_certificate 1_www.zhuqiaolun.com_bundle.crt; ssl_certificate_key 2_www.zhuqiaolun.com.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location ~* .*tomcat-a.* { proxy_pass http://tomcat; expires 24h; add_header Cache-Control no-store; #Proxy Settings proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Cookie $http_cookie; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; proxy_max_temp_file_size 0; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; # 上传文件限制大小 client_max_body_size 100M; client_body_buffer_size 128k; } location ~* .*tomcat-b.* { proxy_pass http://tomcat; expires 24h; add_header Cache-Control no-store; #Proxy Settings proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Cookie $http_cookie; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; proxy_max_temp_file_size 0; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; # 上传文件限制大小 client_max_body_size 100M; client_body_buffer_size 128k; } location / { root html; index index.html index.htm; expires 24h; add_header Cache-Control no-store; #Proxy Settings proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header Cookie $http_cookie; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; proxy_max_temp_file_size 0; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; # 上传文件限制大小 client_max_body_size 100M; client_body_buffer_size 128k; } } } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.zhuqiaolun.com/tags/Nginx/"}]},{"title":"tomcat配置https访问","slug":"1599632929241/1599632929241","date":"2020-09-09T06:28:49.000Z","updated":"2020-09-24T05:51:57.457Z","comments":true,"path":"2020/09/1599632929241/1599632929241/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599632929241/1599632929241/","excerpt":"tomcat配置https访问","text":"生成安全证书因为SUN公司提供了制作证书的工具keytool。在JDK 1.4以后的版本中都包含了这一工具，它的位置为\\bin\\keytool.exe。 创建证书的命令keytool -genkeypair -alias \"tomcat\" -keyalg \"RSA\" -keystore \"e:\\tomcat.keystore\" 这里密码我输的是123456，名字与姓氏为域名，其它的根据具体情况输入以上命令将生产一对非对称密钥和自我签名的证书 e:\\tomcat.keystore.将证书保存到\\conf 的目录下，注意：“名字与姓氏”应该是域名，输成了姓名，和真正运行的时候域名不符，会出问题 配置tomcat找到conf下的server.xml文件，添加以下内容， &lt;Connector port=\"8451\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"conf/tomcat.keystore\" keystorePass=\"123456\" /&gt; 端口port可自定义，keystorePass为密匙库密码 启动tomcat如换成apr模式 将protocol=”HTTP/1.1”替换为protocol=”org.apache.coyote.http11.Http11Protocol”即可 访问结果http访问 - 8080 ：http://localhost:8088/ https访问 - 8451 ：https://localhost:8451/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"}]},{"title":"tomcat开启APR运行模式，优化并发性能 - Windows","slug":"1599628352134/1599628352134","date":"2020-09-09T05:12:32.000Z","updated":"2020-09-24T05:52:12.923Z","comments":true,"path":"2020/09/1599628352134/1599628352134/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599628352134/1599628352134/","excerpt":"Windows环境中的tomcat开启APR运行模式","text":"下载软件下载tcnative-1.dll文件官网地址：https://tomcat.apache.org/download-native.cgi软件下载地址：点击下载 文件解压后，将 x64/tcnative-1.dll 文件复制到C:\\Windows\\System32目录下 配置找到下面代码 &lt;Connector connectionTimeout=\"20000\" port=\"8086\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/&gt;修改为 &lt;Connector connectionTimeout=\"20000\" port=\"8086\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" redirectPort=\"8443\"/&gt;结果 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"}]},{"title":"tomcat开启APR运行模式，优化并发性能 - Linux","slug":"1599545396773/1599545396773","date":"2020-09-08T06:09:56.000Z","updated":"2020-09-24T05:52:19.945Z","comments":true,"path":"2020/09/1599545396773/1599545396773/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599545396773/1599545396773/","excerpt":"Linux环境中的tomcat开启APR运行模式","text":"描述Tomcat支持三种接收请求的处理方式：BIO、NIO、APR BIO模式：阻塞式I/O操作，表示Tomcat使用的是传统Java I/O操作(即java.io包及其子包)。Tomcat7以下版本默认情况下是以bio模式运行的，由于每个请求都要创建一个线程来处理，线程开销较大，不能处理高并发的场景，在三种模式中性能也最低。 NIO模式：是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，它拥有比传统I/O操作(bio)更好的并发运行性能。Tomcat8以上版本，默认使用的就是NIO模式，不需要额外修改。 APR模式：简单理解，就是从操作系统级别解决异步IO问题，大幅度的提高服务器的处理和响应性能， 也是Tomcat运行高并发应用的首选模式。 安装依赖yum install -y apr-devel openssl-devel gcc make expat-devel libtool下载软件所需软件的下载地址：https://mirrors.cnnic.cn/apache/apr/https://tomcat.apache.org/download-native.cgi 点击下载：https://mirrors.cnnic.cn/apache/apr/apr-1.7.0.tar.gzhttps://mirrors.cnnic.cn/apache/apr/apr-iconv-1.2.2.tar.gzhttps://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.gzhttps://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/source/tomcat-native-1.2.25-src.tar.gz 安装软件 apr cd /usr/local/tomcat/src/apr-1.7.0 ./configure --prefix=/usr/local/tomcat/src/apr make &amp;&amp; make installapr-iconv cd /usr/local/tomcat/src/apr-iconv-1.2.2 ./configure --with-apr=/usr/local/tomcat/src/apr --prefix=/usr/local/tomcat/src/apr-iconv make &amp;&amp; make installapr-util cd apr-util-1.6.1/ ./configure --with-apr=/usr/local/tomcat/src/apr --with-apr-iconv=/usr/local/tomcat/src/apr-iconv/bin/apriconv --prefix=/usr/local/tomcat/src/apr-util make &amp;&amp; make installtomcat-native cd /usr/local/tomcat/src/tomcat-native-1.2.25-src/native ./configure --with-apr=/usr/local/tomcat/src/apr --with-java-home=/usr/local/java/jdk1.8.0_231 make &amp;&amp; make installprofile echo -e 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/tomcat/src/apr/lib\\nexport LD_RUN_PATH=$LD_RUN_PATH:/usr/local/tomcat/src/apr/lib' &gt;&gt; /etc/profile source /etc/profile配置APR打开 server.xml vim /usr/local/tomcat/apache-tomcat-9.0.27/conf/server.xml修改内容如下： &lt;Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\" maxThreads=\"300\" minSpareThreads=\"30\"/&gt; ​ &lt;Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" connectionTimeout=\"20000\" redirectPort=\"8443\" acceptCount=\"900\" disableUploadTimeout=\"true\" URIEncoding=\"UTF-8\" enableLookups=\"false\" compression=\"on\" compressionMinSize=\"1024\" /&gt; ​ &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; ##注释掉下面那行，如果不用apache &lt;!-- &lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /&gt; --&gt;结果：注：如果非root用户启动失败，把apr环境变量在当前用户的.bash_profile中写一份 配置说明Executor参数说明 name：共享线程池的名字。这是Connector为了共享线程池要引用的名字，该名字必须唯一。默认值：None； namePrefix:在JVM上，每个运行线程都可以有一个name 字符串。这一属性为线程池中每个线程的name字符串设置了一个前缀， Tomcat将把线程号追加到这一前缀的后面。默认值：catalina-exec-； maxThreads：该线程池可以容纳的最大线程数。默认值：150； maxIdleTime：在Tomcat关闭一个空闲线程之前，允许空闲线程持续的时间(以毫秒为单位)。 只有当前活跃的线程数大于minSpareThread的值，才会关闭空闲线程。默认值：60000(一分钟)。 minSpareThreads：Tomcat应该始终打开的最小不活跃线程数。默认值：4。 threadPriority：线程的等级。默认是Thread.NORM_PRIORITYConnector参数说明 maxThreads :Tomcat 使用线程来处理接收的每个请求，这个值表示 Tomcat 可创建的最大的线程数，默认值是 200 minSpareThreads：最小空闲线程数，Tomcat 启动时的初始化的线程数，表示即使没有人使用也开这么多空线程等待，默认值是 10。 maxSpareThreads：最大备用线程数，一旦创建的线程超过这个值，Tomcat 就会关闭不再需要的 socket 线程。 ​ 上边配置的参数，最大线程 500（一般服务器足以），要根据自己的实际情况合理设置，设置越大会耗费内存和 CPU， 因为 CPU 疲于线程上下文切换，没有精力提供请求服务了，最小空闲线程数 20，线程最大空闲时间 60 秒， 当然允许的最大线程连接数还受制于操作系统的内核参数设置，设置多大要根据自己的需求与环境。 当然线程可以配置在“tomcatThreadPool”中，也可以直接配置在“Connector”中，但不可以重复配置。 ​ URIEncoding：指定 Tomcat 容器的 URL 编码格式，语言编码格式这块倒不如其它 WEB 服务器软件配置方便，需要分别指定。 connnectionTimeout： 网络连接超时，单位：毫秒，设置为 0 表示永不超时，这样设置有隐患的。通常可设置为 30000 毫秒，可根据检测实际情况，适当修改。 enableLookups： 是否反查域名，以返回远程主机的主机名，取值为：true 或 false，如果设置为false，则直接返回IP地址，为了提高处理能力，应设置为 false。 disableUploadTimeout：上传时是否使用超时机制。 connectionUploadTimeout：上传超时时间，毕竟文件上传可能需要消耗更多的时间，这个根据你自己的业务需要自己调， 以使Servlet有较长的时间来完成它的执行，需要与上一个参数一起配合使用才会生效。 acceptCount：指定当所有可以使用的处理请求的线程数都被使用时，可传入连接请求的最大队列长度，超过这个数的请求将不予处理，默认为100个。 keepAliveTimeout：长连接最大保持时间（毫秒），表示在下次请求过来之前，Tomcat 保持该连接多久，默认是使用 connectionTimeout 时间，-1 为不限制超时。 maxKeepAliveRequests：表示在服务器关闭之前，该连接最大支持的请求数。 超过该请求数的连接也将被关闭，1表示禁用，-1表示不限制个数，默认100个，一般设置在100~200之间。 compression：是否对响应的数据进行 GZIP 压缩，off：表示禁止压缩；on：表示允许压缩（文本将被压缩）、force：表示所有情况下都进行压缩，默认值为off， 压缩数据后可以有效的减少页面的大小，一般可以减小1/3左右，节省带宽。 compressionMinSize：表示压缩响应的最小值，只有当响应报文大小大于这个值的时候才会对报文进行压缩，如果开启了压缩功能，默认值就是2048。 compressableMimeType：压缩类型，指定对哪些类型的文件进行数据压缩。 noCompressionUserAgents=\"gozilla, traviata\"： 对于以下的浏览器，不启用压缩。 如果已经对代码进行了动静分离，静态页面和图片等数据就不需要 Tomcat 处理了，那么也就不需要配置在 Tomcat 中配置压缩了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"}]},{"title":"配置tomcat下的conf目录下的文件","slug":"1599535661189/1599535661189","date":"2020-09-08T03:27:41.000Z","updated":"2020-09-24T05:52:23.851Z","comments":true,"path":"2020/09/1599535661189/1599535661189/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599535661189/1599535661189/","excerpt":"配置tomcat的文件","text":"启用manager1.打开conf目录下的文件 tomcat-users.xml，在尾部添加一下内容: &lt;role rolename=\"tomcat\"/&gt; &lt;role rolename=\"role1\"/&gt; &lt;role rolename=\"manager-script\"/&gt; &lt;role rolename=\"manager-gui\"/&gt; &lt;role rolename=\"manager-status\"/&gt; &lt;role rolename=\"admin-gui\"/&gt; &lt;role rolename=\"admin-script\"/&gt; &lt;user username=\"tomcat\" password=\"tomcat\" roles=\"manager-gui,manager-script,tomcat,admin-gui,admin-script\"/&gt;2.修改webapps文件夹manager和host-mananger两个项目下META-INF中的context.xml文件： vim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/host-manager/META-INF vim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/manager/META-INF/context.xml修改为（或者注释掉）： &lt;Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" /&gt;无须重启tomcat即可生效 配置日志打印打开conf目录下的文件 logging.properties；修改以下内容 1catalina.org.apache.juli.AsyncFileHandler.level = FINE 1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina. 1catalina.org.apache.juli.AsyncFileHandler.maxDays = 7 1catalina.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter 2localhost.org.apache.juli.AsyncFileHandler.level = FINE 2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost. 2localhost.org.apache.juli.AsyncFileHandler.maxDays = 7 2localhost.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter 3manager.org.apache.juli.AsyncFileHandler.level = FINE 3manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 3manager.org.apache.juli.AsyncFileHandler.prefix = manager. 3manager.org.apache.juli.AsyncFileHandler.maxDays = 7 3manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter 4host-manager.org.apache.juli.AsyncFileHandler.level = FINE 4host-manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs 4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager. 4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 7 4host-manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter java.util.logging.ConsoleHandler.level = FINE java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL [%4$s] [%3$s] %2$s %5$s %6$s%n配置日志存储&lt;Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\"&gt; &lt;Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" /&gt; &lt;Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs/localhost_access_log\" prefix=\"localhost_access_log\" suffix=\".txt\" pattern=\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\" /&gt; &lt;/Host&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"}]},{"title":"在Linux中安装Tomcat环境","slug":"1599532777229/1599532777229","date":"2020-09-08T02:39:37.000Z","updated":"2020-09-24T05:47:22.613Z","comments":true,"path":"2020/09/1599532777229/1599532777229/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599532777229/1599532777229/","excerpt":"在Linux中安装Tomcat环境","text":"下载tomcat 官网地址：http://tomcat.apache.org/tomcat 官网版本文件地址：https://archive.apache.org/dist/tomcat/tomcat 指定版本下载地址：https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/Linux在线下载： wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz 下载离线版本：点击红框区域,即可下载文件（免安装版本） 安装创建安装目录，并进入安装目录 mkdir /usr/local/tomcat cd /usr/local/tomcat/ rz apache-tomcat-9.0.27.tar.gz # 上传文件（如采用在线下载，则无需此步骤） tar -zxvf apache-tomcat-9.0.27.tar.gz # 解压文件 cd /usr/local/tomcat/apache-tomcat-9.0.27 # 进入目录命令启动： /usr/local/tomcat/apache-tomcat-9.0.27/bin/startup.sh停止： /usr/local/tomcat/apache-tomcat-9.0.27/bin/shutdown.sh实时日志 cd /usr/local/tomcat/apache-tomcat-9.0.27/logs tail -f catalina.out访问curl -I http://127.0.0.1:8080返回以下内容则表示启动成功 HTTP/1.1 200 Content-Type: text/html;charset=UTF-8 Transfer-Encoding: chunked Date: Tue, 08 Sep 2020 03:22:06 GMT上传项目cd /usr/local/tomcat/apache-tomcat-9.0.27/webapps document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"}]},{"title":"Nginx 服务器证书SSL安装","slug":"1599456487885/1599456487885","date":"2020-09-07T05:28:07.000Z","updated":"2020-09-07T06:07:10.861Z","comments":true,"path":"2020/09/1599456487885/1599456487885/","link":"","permalink":"https://www.zhuqiaolun.com/2020/09/1599456487885/1599456487885/","excerpt":"Nginx 服务器证书SSL安装,配置Https访问","text":"检测初始安装nginx的时候没有开启ssl功能 查看是否开启ssl模块 /usr/local/nginx/sbin/nginx -V当未出现红框内的内部分，则表示没有开启ssl功能 开启ssl模块找到安装的源码包(带有版本号的位置) cd /usr/local/software/nginx-1.18.0 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module make # 这里不要进行make install，否则就是覆盖安装 cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak # 备份 /usr/local/nginx/sbin/nginx -s stop # 停止服务 cp ./objs/nginx /usr/local/nginx/sbin/ # 将刚刚编译好的nginx覆盖掉原有的nginx当在此查看 /usr/local/nginx/sbin/nginx -V ，则表示开启成功 下载SSL证书将已获取到的 1.证书文件和 2.私钥文件从本地目录拷贝到 Nginx 服务器的 /usr/local/nginx/conf 目录下此处为 Nginx 默认安装目录，请根据实际情况操作 配置Httpsuser root; worker_processes 1; error_log /usr/local/nginx/logs/nginx_error.log crit; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; # 开启gzip压缩 gzip on; gzip_comp_level 5; gzip_min_length 1024; gzip_types text/plain application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png; # 隐藏nginx版本信息 server_tokens off; server { listen 80; server_name www.zhuqiaolun.com; if ($scheme = http ) { return 301 https://www.zhuqiaolun.com$request_uri; } location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } # HTTPS server server { listen 443 ssl; server_name www.zhuqiaolun.com; root html; index index.html index.htm; ssl_certificate www.zhuqiaolun.com.crt; ssl_certificate_key www.zhuqiaolun.com.key; ssl_session_timeout 10m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_session_cache shared:SSL:10m; ssl_prefer_server_ciphers on; location / { root html; index index.html index.htm; } } }扩展Nginx SSL性能调优 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.zhuqiaolun.com/tags/Nginx/"}]},{"title":"SpringBoot2.3.x 整合 freemarker","slug":"1597309130215/1597309130215","date":"2020-08-13T08:58:50.000Z","updated":"2020-11-11T07:06:02.769Z","comments":true,"path":"2020/08/1597309130215/1597309130215/","link":"","permalink":"https://www.zhuqiaolun.com/2020/08/1597309130215/1597309130215/","excerpt":"SpringBoot2.3.x 整合 freemarker 模板 访问页面以及生成静态html文件","text":"FreemarkerFreeMarker Template Language（FTL） 文件一般保存为 xxx.ftl严格依赖MVC模式，不依赖Servlet容器（不占用JVM内存）内建函数 依赖12345678910111213141516&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt; &lt;!-- 将freemarker的html内容写入生成的文件中 --&gt;&lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt; 配置yml内容： 123456789101112131415161718192021spring: application: name: spring-boot-freemarker jackson: default-property-inclusion: non_null # 配置模版引擎 freemarker: cache: false #是否启用模板缓存 enabled: true #是否启用freemarker template-loader-path: classpath:/templates/ #设定模板的加载路径，多个以逗号分隔 suffix: .ftl #设定模板的后缀 content-type: text/html check-template-location: true #是否检查模板位置是否存在 charset: UTF-8 #模板编码 #一些常用配置 allow-request-override: false #是否允许HttpServletRequest属性覆盖(隐藏)控制器生成的同名模型属性 allow-session-override: false #是否允许HttpSession属性覆盖(隐藏)控制器生成的同名模型属性 expose-request-attributes: false #设定所有request的属性在merge到模板的时候，是否要都添加到model中 expose-session-attributes: false #是否在merge模板的时候，将HttpSession属性都添加到model中 expose-spring-macro-helpers: true #设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用 prefer-file-system-access: true #是否优先从文件系统加载template，以支持热加载，默认为true 文件路径： 1234src/main/java/com/demon/freemarker/controller IndexController.javasrc/main/resources/templates index1.ftl 示例代码IndexController.java @Controller public class IndexController { /** * 路由 /index1 * 返回 index1 这里默认配置自动映射到目录(templages/)下的index1.ftl */ @GetMapping(\"/index1\") public String index(Model model){ model.addAttribute(\"content\",\"hello freemarker\"); return \"index1\"; } }index.ftl &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;freemarker&lt;/title&gt; &lt;/head&gt; &lt;body&gt; this is welcome ${content} &lt;/body&gt; &lt;/html&gt;运行示例 生成文件使用freemarker模板引擎生成静态的html文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import freemarker.template.Configuration;import freemarker.template.Template;import freemarker.template.TemplateException;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import org.springframework.stereotype.Service;import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;import javax.annotation.Resource;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.util.Map;@Servicepublic class StaticServiceImpl implements StaticService { @Resource private Configuration configuration; @Override public void createIndexHtml(String ftlName,Map&lt;String, Object&gt; params,File outFile) { InputStream inputStream = null; FileOutputStream fileOutputStream = null; try { //获取模板 Template template = configuration.getTemplate(ftlName+\".ftl\"); // 静态化页面内容 String content = FreeMarkerTemplateUtils.processTemplateIntoString(template, params); System.out.println(content); inputStream = IOUtils.toInputStream(content, \"UTF-8\"); // 输出文件 FileUtils.forceMkdirParent(outFile); fileOutputStream = new FileOutputStream(outFile); IOUtils.copy(inputStream, fileOutputStream); } catch (IOException | TemplateException e) { e.printStackTrace(); } finally { // 关闭流 if(inputStream != null){ try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } finally { if(fileOutputStream != null){ try { fileOutputStream.close(); } catch (IOException e) { e.printStackTrace(); } } } } } }} 测试： 1234567891011121314151617181920212223import org.junit.jupiter.api.Test;import org.springframework.boot.test.context.SpringBootTest;import javax.annotation.Resource;import java.io.File;import java.util.HashMap;import java.util.Map;@SpringBootTestclass FreemarkerApplicationTests { @Resource private StaticService staticService; @Test void contextLoads() { String ftlName = \"index1\"; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put(\"content\", \"这是一个freemarker生成的html文件\"); File outFile = new File(\"d:/test/page/freemarker.html\"); staticService.createIndexHtml(ftlName,params,outFile); }} 控制台的打印输出： 生成本地文件输出： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"SpringBoot2.3.x 整合 thymeleaf","slug":"1597306338000/1597306338000","date":"2020-08-13T08:12:17.000Z","updated":"2020-11-11T07:06:23.890Z","comments":true,"path":"2020/08/1597306338000/1597306338000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/08/1597306338000/1597306338000/","excerpt":"SpringBoot2.3.x 整合 thymeleaf 模板 访问页面","text":"依赖12345678910&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; Thymeleaf (主推)轻量级的模板引擎（负责逻辑业务的不推荐，解析DOM或者XML会占用多的内存）可以直接在浏览器中打开且正确显示模板页面直接是html结尾，直接编辑 配置1234567891011121314151617181920212223spring: application: name: spring-boot-thymeleaf jackson: default-property-inclusion: non_null # 配置模版引擎, 是否开启thymeleaf缓存,本地为false，生产建议为true thymeleaf: # 是否启用模板缓存,开发时关闭缓存,不然没法看到实时页面 cache: false # 是否检查模板位置是否存在。 check-template: true # 是否为Web框架启用Thymeleaf视图分辨率。 enabled: true # 编码格式, 默认UTF-8 encoding: UTF-8 # 应用于模板的模板模式。另请参阅Thymeleaf的TemplateMode枚举。 mode: HTML servlet: content-type: text/html # 后缀 默认 .html suffix: .html # 模板文件存放位置 , 默认 classpath:/templates/ prefix: classpath:/templates/ 1234src/main/java/com/demon/freemarker/controller IndexController.javasrc/main/resources/templates index2.html 示例代码IndexController.java @Controller public class IndexController { /** * 路由 /index2 * 返回 index2 这里默认配置自动映射到目录(templages/)下的index2.html */ @GetMapping(\"/index2\") public String index(Model model){ model.addAttribute(\"content\",\"hello thymeleaf\"); return \"index2\"; } }index.html &lt;!DOCTYPE html&gt; &lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Thymeleaf&lt;/title&gt; &lt;/head&gt; &lt;body&gt; this is welcome &lt;span th:text=\"${content}\"&gt;&lt;/span&gt; &lt;/body&gt; &lt;/html&gt;运行示例 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"MyCat 分库配置","slug":"1596694227482/1596694227482","date":"2020-08-06T06:10:27.000Z","updated":"2020-09-24T05:45:46.376Z","comments":true,"path":"2020/08/1596694227482/1596694227482/","link":"","permalink":"https://www.zhuqiaolun.com/2020/08/1596694227482/1596694227482/","excerpt":"MyCat分库配置（sharding-by-intfile）","text":"创建数据库分别创建三个数据库：testdb_0，testdb_1，testdb_2 MyCat配置server.xml配置不变， &lt;user name=\"root\" defaultAccount=\"true\"&gt; &lt;property name=\"password\"&gt;123456&lt;/property&gt; &lt;property name=\"schemas\"&gt;TESTDB&lt;/property&gt; &lt;/user&gt;schema.xml配置如下： &lt;!-- 设置表的存储方式.schema name=\"TESTDB\" 与 server.xml中的 TESTDB 设置一致 --&gt; &lt;schema name=\"TESTDB\" checkSQLschema=\"true\" sqlMaxLimit=\"100\"&gt; &lt;!-- 分片规则：sharding-by-intfile --&gt; &lt;table name=\"t_users\" dataNode=\"node_db00,node_db01,node_db02\" rule=\"sharding-by-intfile\"&gt;&lt;/table&gt; &lt;/schema&gt; &lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt; &lt;dataNode name=\"node_db00\" dataHost=\"dataHost01\" database=\"testdb_0\" /&gt; &lt;dataNode name=\"node_db01\" dataHost=\"dataHost01\" database=\"testdb_1\" /&gt; &lt;dataNode name=\"node_db02\" dataHost=\"dataHost01\" database=\"testdb_2\" /&gt; &lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt; &lt;dataHost name=\"dataHost01\" maxCon=\"1000\" minCon=\"10\" balance=\"1\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;writeHost host=\"hostM1\" url=\"127.0.0.1:3306\" user=\"root\" password=\"root\"/&gt; &lt;/dataHost&gt; rule.xml配置如下： &lt;tableRule name=\"sharding-by-intfile\"&gt; &lt;rule&gt; &lt;!-- columns:对应需要进行匹配规则的字段 --&gt; &lt;columns&gt;sex&lt;/columns&gt; &lt;algorithm&gt;hash-int&lt;/algorithm&gt; &lt;/rule&gt; &lt;/tableRule&gt; &lt;function name=\"hash-int\" class=\"io.mycat.route.function.PartitionByFileMap\"&gt; &lt;property name=\"mapFile\"&gt;partition-hash-int.txt&lt;/property&gt; &lt;property name=\"type\"&gt;1&lt;/property&gt; &lt;property name=\"defaultNode\"&gt;0&lt;/property&gt; &lt;/function&gt;说明：函数配置中，type默认值为0，0表示Integer，非零表示String， 所有的节点配置都是从defaultNode=0开始，及0代表第一个节点。defaultNode 默认节点:小于0表示不设置默认节点，大于等于0表示设置默认节点,默认节点的作用;枚举分片时,如果碰到不识别的枚举值，就让它路由到默认节点;如果不配置默认节点（defaultNode值小于0表示不配置默认节点），碰到不识别的枚举值就会报错; partition-hash-int.txt #10000=0 #10010=1 m=1 w=2说明：[sex=m]的数据放入node_db01，[sex=w]的数据放入node_db02，其它的数据[mw]放入node_db00，0：表示第一个dataNode[name=node_db00]节点，以下标选择1：表示第二个dataNode[name=node_db01]节点，以下标选择2：表示第三个dataNode[name=node_db02]节点，以下标选择注意以中文的分片规则，后续， 修改配置完成后，重启mycat服务，通过mycat插入数据即可看到结果 执行mysql -uroot -p123456 -P8066 -h 127.0.0.1 mysql&gt; show databases; mysql&gt; use TESTDB; mysql&gt; DROP TABLE IF EXISTS `t_users`; mysql&gt; CREATE TABLE `t_users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(50) DEFAULT NULL, `sex` varchar(10) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; mysql&gt; set names gbk; mysql&gt; insert into t_users(`name`,sex)values('张三','m'); mysql&gt; insert into t_users(`name`,sex)values('李四','w'); mysql&gt; insert into t_users(`name`,sex)values('王五','mw'); 结果分片实现 数据结果 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"MyCat","slug":"MyCat","permalink":"https://www.zhuqiaolun.com/tags/MyCat/"}]},{"title":"在Windows10中安装MyCat环境","slug":"1596610285582/1596610285582","date":"2020-08-05T06:51:25.000Z","updated":"2020-09-24T05:44:08.382Z","comments":true,"path":"2020/08/1596610285582/1596610285582/","link":"","permalink":"https://www.zhuqiaolun.com/2020/08/1596610285582/1596610285582/","excerpt":"在windows10中安装MyCat环境","text":"下载官网：Mycat数据库分库分表中间件，点击下载1.6.7.3 的Windows稳定版本链接：http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-win.tar.gz 解压目录如下： 安装由于软件本身就是绿色版本，只需放在指定目录下即可， mycat： bin：命令文件 catlet：空的,扩展 conf：配置文件(server.xml,schema.xml,rule.xml等) lib：依赖的jar包 logs：启动日志简单配置创建数据库在DB中创建数据库（test_mycat），创建表（t_user） 修改xml配置server.xml，rule.xml 不改变，schema.xml改动如下： &lt;?xml version=\"1.0\"?&gt; &lt;!DOCTYPE mycat:schema SYSTEM \"schema.dtd\"&gt; &lt;mycat:schema xmlns:mycat=\"http://io.mycat/\"&gt; &lt;!-- 设置表的存储方式.schema name=\"TESTDB\" 与 server.xml中的 TESTDB 设置一致 --&gt; &lt;schema name=\"TESTDB\" checkSQLschema=\"true\" sqlMaxLimit=\"100\"&gt; &lt;!-- auto sharding by id (long) --&gt; &lt;table name=\"t_user\" dataNode=\"dn1\"/&gt; &lt;/schema&gt; &lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt; &lt;dataNode name=\"dn1\" dataHost=\"localhost1\" database=\"test_mycat\" /&gt; &lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt; &lt;dataHost name=\"localhost1\" maxCon=\"1000\" minCon=\"10\" balance=\"0\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\" slaveThreshold=\"100\"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host=\"hostM1\" url=\"127.0.0.1:3306\" user=\"root\" password=\"root\"&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;/mycat:schema&gt;启动本地启动双击bin目录下的startup_nowrap.bat文件 出现以下界面提示则启动成功： 服务启动以管理员的模式打开CMD命令,进入根目录下 安装服务 启动服务 当出现此启动错误：则需要将 -XX:MaxPermSize=512M 移除，该参数在jdk1.8版本中已放弃使用， 服务命令mycat.bat { console : Wrapper控制台 start : 服务启动 pause : 服务暂停 resume : 服务恢复 stop : 服务停止 restart : 服务重启 install : 服务安装 remove : 服务移除 status : 服务状态 }Navicat连接默认端口：8066用户名：root密码：server.xml的user配置，本次为 123456 查看连接： 查看数据： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"MyCat","slug":"MyCat","permalink":"https://www.zhuqiaolun.com/tags/MyCat/"}]},{"title":"在Linux中安装MyCat环境","slug":"1596536908607/1596536908607","date":"2020-08-04T10:28:28.000Z","updated":"2020-09-24T05:44:36.139Z","comments":true,"path":"2020/08/1596536908607/1596536908607/","link":"","permalink":"https://www.zhuqiaolun.com/2020/08/1596536908607/1596536908607/","excerpt":"在Linux中安装MyCat环境","text":"下载官网：Mycat数据库分库分表中间件，点击下载1.6.7.3 的Linux稳定版本链接：http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz 待续··· document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"MyCat","slug":"MyCat","permalink":"https://www.zhuqiaolun.com/tags/MyCat/"}]},{"title":"Kafka使用 （SpringBoot调用）","slug":"1595654393778/1595654393778","date":"2020-07-25T05:19:53.000Z","updated":"2020-09-24T05:42:59.648Z","comments":true,"path":"2020/07/1595654393778/1595654393778/","link":"","permalink":"https://www.zhuqiaolun.com/2020/07/1595654393778/1595654393778/","excerpt":"SpringBoot调用kafka服务","text":"依赖引入1234567891011121314151617181920212223&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;!-- kafka start --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- kafka end --&gt; &lt;!-- fastjson --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.62&lt;/version&gt;&lt;/dependency&gt; yml配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950spring: # 基本配置 kafka: # 以逗号分隔的地址列表，用于建立与 Kafka 集群的初始连接 (kafka 默认的端口号为 9092) bootstrap-servers: 127.0.0.1:9092 # 定义生产者 producer: client-id: kafka.client.id # 发生错误后，消息重发的次数。 retries: 0 #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。 batch-size: 16384 # 设置生产者内存缓冲区的大小。 buffer-memory: 33554432 # 键的序列化方式 key-serializer: org.apache.kafka.common.serialization.StringSerializer # 值的序列化方式 value-serializer: org.apache.kafka.common.serialization.StringSerializer # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。 # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。 # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。 acks: 1 # 定义消费者 consumer: # 自动提交的时间间隔 在 spring boot 2.X 版本中这里采用的是值的类型为 Duration 需要符合特定的格式，如 1S,1M,2H,5D auto-commit-interval: 3S # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理： # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录） # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录 auto-offset-reset: earliest # 是否自动提交偏移量，默认值是 true,为了避免出现重复数据和数据丢失，可以把它设置为 false,然后手动提交偏移量 enable-auto-commit: true # 键的反序列化方式 key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 值的反序列化方式 value-deserializer: org.apache.kafka.common.serialization.StringDeserializer listener: # 在侦听器容器中运行的线程数(消费者个数即可) concurrency: 5 demon: #消费者配置 mqConfig: # 监听的主题topic topics: test,first,second,third topic: # 监听的主题first的消息执行类 first: com.demon.springbootkafka.listener.consumer.message.FirstMessage # 监听的主题second的消息执行类 second: com.demon.springbootkafka.listener.consumer.message.SecondMessage 类配置mq的消费者配置类： 123456789101112/** * @className: MqProperties.java * @description: mq的消费者配置类，映射 配置文件里面的值 * @author: Demon * @date 2020/6/16 18:00 */@Component@ConfigurationProperties(prefix = \"demon.mqConfig\")@Datapublic class MqConsumerTopicConfig { Map&lt;String,Class&lt;?&gt;&gt; topic;} 生产者KafKaProducerService 123456789101112131415161718192021222324252627282930313233343536373839404142package com.demon.springbootkafka.service;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;/** * @ClassName: KafKaProducerService * @Description: 生产者service * @Author: Demon * @Date: 2020/4/23 13:38 */public interface KafKaProducerService { /** * 发送标准消息没有回执 * @param topic 主题 * @param key key * @param data 内容 */ void sendStandardMessage(String topic, String key, String data); /** * 发送标准消息同步有阻塞 * @param topic 主题 * @param key key * @param data 内容 * @return 返回 * @throws InterruptedException 异常 * @throws ExecutionException 异常 * @throws TimeoutException 异常 */ Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException; /** * 发送标准消息异步无阻塞 * @param topic 主题 * @param key key * @param data 内容 */ void sendStandardMessageAsync(String topic, String key, String data);} KafKaProducerServiceImpl: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package com.demon.springbootkafka.service.impl;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.clients.producer.ProducerRecord;import org.springframework.kafka.core.KafkaTemplate;import org.springframework.kafka.support.SendResult;import org.springframework.stereotype.Service;import org.springframework.util.concurrent.ListenableFuture;import org.springframework.util.concurrent.ListenableFutureCallback;import javax.annotation.Resource;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;/** * @ClassName: KafKaProducerServiceImpl * @Description: 生产者service的实现，负责执行消息发送 * @Author: Demon * @Date: 2020/4/23 13:38 */@Slf4j@Servicepublic class KafKaProducerServiceImpl implements com.demon.springbootkafka.service.KafKaProducerService { @Resource private KafkaTemplate&lt;String, String&gt; kafkaTemplate; /** * 构建待发送的消息 * @param topic topic * @param key key * @param data data * @return 返回 */ private ProducerRecord&lt;String, String&gt; getRecord(String topic, String key, String data){ if(key == null){ return new ProducerRecord&lt;&gt;(topic,data); }else{ return new ProducerRecord&lt;&gt;(topic,key,data); } } @Override public void sendStandardMessage(String topic, String key, String data){ kafkaTemplate.send(getRecord(topic,key,data)); } @Override public Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException { SendResult&lt;String, String&gt; stringStringSendResult = kafkaTemplate.send(getRecord(topic, key, data)).get(1, TimeUnit.SECONDS); System.out.println(stringStringSendResult.getProducerRecord().timestamp()); return stringStringSendResult.getProducerRecord().timestamp(); } @Override public void sendStandardMessageAsync(String topic, String key, String data) { ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; sendResultListenableFuture = kafkaTemplate.send(getRecord(topic,key,data)); // 发送消息回调 //noinspection NullableProblems sendResultListenableFuture.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() { /** 发送成功回调方法 */ @Override public void onSuccess(SendResult&lt;String, String&gt; sendResultMap) { log.debug(\"发送消息成功：\" + sendResultMap); } /** 发送失败回调方法 */ @Override public void onFailure(Throwable throwable) { log.debug(\"发送消息失败：\"+ throwable.getMessage()); } }); }} 生产者监听KafkaSendResultHandler： 12345678910111213141516171819202122232425262728package com.demon.springbootkafka.listener.producer;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.clients.producer.ProducerRecord;import org.apache.kafka.clients.producer.RecordMetadata;import org.springframework.kafka.support.ProducerListener;import org.springframework.stereotype.Component;/** * @ClassName: KafkaSendResultHandler * @Description: 发送消息结果回调 * @Author: Demon * @Date: 2020/4/23 13:55 */@Slf4j@Componentpublic class KafkaSendResultHandler implements ProducerListener { @Override public void onSuccess(ProducerRecord producerRecord, RecordMetadata recordMetadata) { log.info(\"发送消息监听成功 : \" + producerRecord.toString()); } @Override public void onError(ProducerRecord producerRecord, Exception exception) { log.info(\"发送消息监听失败 : \" + exception); }} 消费者KafkaConsumerService： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.demon.springbootkafka.listener.consumer;import com.demon.springbootkafka.config.MqConsumerTopicConfig;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.clients.consumer.ConsumerRecord;import org.springframework.kafka.annotation.KafkaListener;import org.springframework.stereotype.Component;import javax.annotation.Resource;import java.lang.reflect.Method;/** * @ClassName: KafkaConsumerService * @Description: 消费者监听消息,通过类的反射执行topic消息处理 * @Author: Demon * @Date: 2020/4/23 14:44 */@Slf4j@Componentpublic class KafkaConsumerService { @Resource private MqConsumerTopicConfig mqConsumerTopicConfig; @KafkaListener(topics = \"#{'${demon.mqConfig.topics}'.split(',')}\", groupId = \"test-group\") public void receive(ConsumerRecord&lt;String, Object&gt; record) { String topic = record.topic(); log.info(\"------ \" + topic + \" 消费者处理消息------\"); try { if (mqConsumerTopicConfig.getTopic().containsKey(topic)) { String classPath = mqConsumerTopicConfig.getTopic().get(topic).getName(); try { Class&lt;?&gt; c1s = Class.forName(classPath); //判断是否有实现ConsumerMessageExecute消息处理接口，否则不予执行 if (c1s.getInterfaces().length &gt; 0 &amp;&amp; c1s.getInterfaces()[0].equals(ConsumerMessageExecute.class)) { //获得Class的Method对象,参数为方法名,参数列表的类型Class对象 Method method = c1s.getMethod(\"execute\", ConsumerRecord.class); //invoke方法，参数为cls实例对象，和想要调用的方法参数 Boolean value = (Boolean) method.invoke(c1s.newInstance(), record); //输出invoke方法的返回值 System.out.println(\"execute方法的返回值：\" + value); } else { log.error(\"============ 调用class：{} 错误:{}\", classPath, \"此类没有实现 MessageExecute 接口！！！\"); } } catch (Exception e) { e.printStackTrace(); log.error(\"============ 调用class：{} 异常：{}\", classPath, e); } } else { log.error(\"============ {}不存在\", topic); } } catch (Exception e) { e.printStackTrace(); } }} ConsumerMessageExecute： 1234567891011121314151617181920package com.demon.springbootkafka.listener.consumer;import org.apache.kafka.clients.consumer.ConsumerRecord;/** * 消息执行统一接口 * @ClassName: MessageExecute * @Description: 消息实现接口，必须实现此接口，否则无法执行消息处理 * @Author: Demon * @Date: 2020/5/24 12:55 */public interface ConsumerMessageExecute { /** * 消费者 消息执行方法 * @param record 消息体 * @return 返回 */ boolean execute(ConsumerRecord&lt;String, Object&gt; record);} FirstMessage: 123456789101112131415161718package com.demon.springbootkafka.listener.consumer.message;import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;import org.apache.kafka.clients.consumer.ConsumerRecord;/** * @ClassName: FirstMessage * @Description: 监听topic【first】的处理 * @Author: Demon * @Date: 2020/6/17 19:14 */public class FirstMessage implements ConsumerMessageExecute { @Override public boolean execute(ConsumerRecord&lt;String, Object&gt; record) { System.out.println(String.format(\"topic = %s, key = %s, value = %s \",record.topic(), record.key(), record.value())); return true; }} SecondMessage: 123456789101112131415161718package com.demon.springbootkafka.listener.consumer.message;import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;import org.apache.kafka.clients.consumer.ConsumerRecord;/** * @ClassName: MessageUrgent * @Description: 监听topic【second】的处理 * @Author: Demon * @Date: 2020/6/17 19:15 */public class SecondMessage implements ConsumerMessageExecute { @Override public boolean execute(ConsumerRecord&lt;String, Object&gt; record) { System.out.println(String.format(\"topic = %s, key = %s, value = %s \",record.topic(), record.key(), record.value())); return true; }} 测试SpringBootKafkaApplicationTests： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.demon.springbootkafka;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.demon.springbootkafka.service.KafKaProducerService;import org.junit.jupiter.api.Test;import org.springframework.boot.test.context.SpringBootTest;import javax.annotation.Resource;import java.util.UUID;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;@SpringBootTestclass SpringBootKafkaApplicationTests { @Resource private KafKaProducerService kafKaProducerService; @Test void contextLoads() { System.out.println(System.currentTimeMillis()); } @Test void sendStandardMessage() { String topic = \"test\"; String key = UUID.randomUUID().toString(); String data = JSON.toJSONString(new JSONObject().put(\"time\",System.currentTimeMillis())); kafKaProducerService.sendStandardMessage(topic,key,data); } @Test void sendStandardMessageAsync() { String topic = \"test\"; String key = UUID.randomUUID().toString(); String data = JSON.toJSONString(new JSONObject().put(\"time\",System.currentTimeMillis())); kafKaProducerService.sendStandardMessageAsync(topic,key,data); } @Test void sendStandardMessageSync() { String topic = \"test\"; String key = UUID.randomUUID().toString(); JSONObject jsonObject = new JSONObject(true); jsonObject.put(\"time\",System.currentTimeMillis()); String data = jsonObject.toJSONString(); try { kafKaProducerService.sendStandardMessageSync(topic, key, data); } catch (InterruptedException | TimeoutException | ExecutionException e) { e.printStackTrace(); } }} 扩展KafkaConfig: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.demon.springbootkafka.config;import org.apache.kafka.clients.admin.AdminClient;import org.apache.kafka.clients.admin.AdminClientConfig;import org.springframework.boot.autoconfigure.kafka.KafkaProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.kafka.annotation.EnableKafka;import org.springframework.kafka.core.KafkaAdmin;import javax.annotation.Resource;import java.util.HashMap;import java.util.Map;/** * @ClassName: KafkaConfig * @Description: KafkaConfig 配置,操作topic * @Author: Demon * @Date: 2020/4/23 18:28 */@Configuration@EnableKafkapublic class KafkaConfig { @Resource private KafkaProperties kafkaProperties; /** * 创建一个kafka管理类，相当于rabbitMQ的管理类rabbitAdmin, * 没有此bean无法自定义的使用adminClient创建topic * @return 返回 */ @Bean public KafkaAdmin kafkaAdmin() { Map&lt;String, Object&gt; props = new HashMap&lt;&gt;(1); //配置Kafka实例的连接地址 //kafka的地址，不是zookeeper props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers().get(0)); return new KafkaAdmin(props); } /** * kafka客户端，在spring中创建这个bean之后可以注入并且创建topic, * 用于集群环境，创建对个副本 * @return 返回 */ @Bean public AdminClient adminClient() { return AdminClient.create(kafkaAdmin().getConfig()); }} SpringBootKafkaApplicationTests_topic: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.demon.springbootkafka;import com.alibaba.fastjson.JSON;import org.apache.kafka.clients.admin.*;import org.junit.jupiter.api.Test;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.transaction.annotation.EnableTransactionManagement;import javax.annotation.Resource;import java.util.ArrayList;import java.util.Collections;import java.util.Set;import java.util.concurrent.ExecutionException;@SpringBootTest@EnableAutoConfigurationclass SpringBootKafkaApplicationTests_topic { @Resource private AdminClient adminClient; @Test void contextLoads() { System.out.println(System.currentTimeMillis()); } @Test void listTopics(){ try { ListTopicsResult listTopics = adminClient.listTopics(); Set&lt;String&gt; topics = listTopics.names().get(); for (String topic : topics) { System.out.println(topic); } } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } } @Test void createTopic() { ArrayList&lt;NewTopic&gt; topics = new ArrayList&lt;&gt;(); NewTopic newTopic = new NewTopic(\"test1\", 2, (short) 1); topics.add(newTopic); CreateTopicsResult result = adminClient.createTopics(topics); System.out.println( JSON.toJSONString(result)); } @Test void deleteTopics() { DeleteTopicsResult deleteTopicsResult = adminClient.deleteTopics(Collections.singletonList(\"test1\")); System.out.println( JSON.toJSONString(deleteTopicsResult)); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://www.zhuqiaolun.com/tags/Kafka/"}]},{"title":"Kafka使用 （Java普通调用）","slug":"1595649722982/1595649722982","date":"2020-07-25T04:02:02.000Z","updated":"2020-09-24T05:43:02.344Z","comments":true,"path":"2020/07/1595649722982/1595649722982/","link":"","permalink":"https://www.zhuqiaolun.com/2020/07/1595649722982/1595649722982/","excerpt":"Java调用kafka服务","text":"依赖引入1234567891011121314151617181920212223242526&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka_2.11&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt; &lt;version&gt;1.7.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.58&lt;/version&gt;&lt;/dependency&gt; Topic操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import java.util.ArrayList;import java.util.Collections;import java.util.Properties;import java.util.Set;import java.util.concurrent.ExecutionException;import org.apache.kafka.clients.CommonClientConfigs;import org.apache.kafka.clients.admin.AdminClient;import org.apache.kafka.clients.admin.CreateTopicsResult;import org.apache.kafka.clients.admin.DeleteTopicsResult;import org.apache.kafka.clients.admin.ListTopicsResult;import org.apache.kafka.clients.admin.NewTopic;import org.junit.After;import org.junit.Before;import org.junit.Test;import com.alibaba.fastjson.JSONObject;/** * Topic操作 */public class CreateTopics { private static AdminClient adminClient = null; /** * 初始化adminClient */ @Before public void getAdminClient() { Properties props = new Properties(); props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"127.0.0.1:9092\"); adminClient = AdminClient.create(props); } /** * 获取所有Topic */ @Test public void getTopicList() { try { ListTopicsResult listTopics = adminClient.listTopics(); Set&lt;String&gt; topics = listTopics.names().get(); for (String topic : topics) { System.out.println(topic); } } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } } /** * 创建Topic 创建了3个名为\"first\", \"second\",\"third\"，分区数为1，复制因子为1的Topic. * 创建完成，返回null */ @Test public void getCreateTopic() { ArrayList&lt;NewTopic&gt; topics = new ArrayList&lt;NewTopic&gt;(); topics.add(new NewTopic(\"test\", 4, (short) 1)); topics.add(new NewTopic(\"first\", 4, (short) 1)); topics.add(new NewTopic(\"second\", 4, (short) 1)); topics.add(new NewTopic(\"third\", 4, (short) 1)); CreateTopicsResult result = adminClient.createTopics(topics); try { System.out.println(result.all().get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } /** * 删除Topic */ @Test public void getDeleteTopic() { DeleteTopicsResult deleteTopicsResult =adminClient.deleteTopics(Collections.singleton(\"test\")); System.out.println(JSONObject.toJSONString(deleteTopicsResult)); } /** * 关闭连接 */ @After public void afterClass() { adminClient.close(); }} 生产者普通生产者1234567891011121314public static void testProducer(String topic) { Properties props = new Properties(); props.put(\"bootstrap.servers\", \"127.0.0.1:9092\"); props.put(\"acks\", \"all\"); props.put(\"retries\", 0); props.put(\"batch.size\", 16384); props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;String, String&gt;(props); for (int i = 0; i &lt; 10; i++) { producer.send(new ProducerRecord&lt;String, String&gt;(topic, Integer.toString(i), Integer.toString(i))); } producer.close();} 事务生产者12345678910111213141516171819202122232425public static void testTransactionProducer(String topic) { Properties props = new Properties(); props.put(\"bootstrap.servers\", \"127.0.0.1:9092\"); props.put(\"transactional.id\", \"my-transactional-id\"); props.put(\"acks\", \"all\"); props.put(\"batch.size\", 16384); KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props, new StringSerializer(),new StringSerializer()); producer.initTransactions(); try { producer.beginTransaction(); for (int i = 0; i &lt; 3; i++) { producer.send(new ProducerRecord&lt;&gt;(topic, Integer.toString(i), Integer.toString(i))); } producer.commitTransaction(); } catch (ProducerFencedException | OutOfOrderSequenceException | AuthorizationException e) { // We can't recover from these exceptions, so our only option is to close the // producer and exit. producer.close(); } catch (KafkaException e) { // For all other exceptions, just abort the transaction and try again. producer.abortTransaction(); } finally { producer.close(); }} 消费者1234567891011121314151617181920212223242526272829303132333435import java.time.Duration;import java.util.Arrays;import java.util.Properties;import org.apache.kafka.clients.consumer.ConsumerRecord;import org.apache.kafka.clients.consumer.ConsumerRecords;import org.apache.kafka.clients.consumer.KafkaConsumer;public class CustomConsumer { public static void main(String[] args) { Properties props = new Properties(); // 定义kakfa 服务的地址，不需要将所有broker指定上 props.put(\"bootstrap.servers\", \"127.0.0.1:9092\"); // 制定consumer group props.put(\"group.id\", \"custom_group_id\"); // 是否自动确认offset props.put(\"enable.auto.commit\", \"true\"); // 自动确认offset的时间间隔 props.put(\"auto.commit.interval.ms\", \"1000\"); // key的序列化类 props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\"); // value的序列化类 props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\"); // 定义consumer KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props); // 消费者订阅的topic, 可同时订阅多个 consumer.subscribe(Arrays.asList(\"test\",\"first\", \"second\",\"third\")); while (true) { // 读取数据，读取超时时间为100ms ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord&lt;String, String&gt; record : records) System.out.printf(\"offset = %d, key = %s, value = %s%n\", record.offset(), record.key(), record.value()); } }} 集群使用在配置中将bootstrap.servers，修改以下方式即可，需要将所有broker指定写上 1props.put(\"bootstrap.servers\", \"127.0.0.1:9092,127.0.0.2:9092,127.0.0.3:9092\"); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://www.zhuqiaolun.com/tags/Kafka/"}]},{"title":"kafka集群搭建 - 使用内置Zookeeper","slug":"1595582052033/1595582052033","date":"2020-07-24T09:14:12.000Z","updated":"2020-09-24T05:42:02.668Z","comments":true,"path":"2020/07/1595582052033/1595582052033/","link":"","permalink":"https://www.zhuqiaolun.com/2020/07/1595582052033/1595582052033/","excerpt":"kafka集群搭建 - 使用内置Zookeeper","text":"下载官网下载地址：http://kafka.apache.org/downloads.html下载完成后复制一式三份，完成集群部署至少需要三台以及三台以上的服务。 kafka版本:kafka_2.12-2.5.0三台主机IP 127.0.0.1、127.0.0.2、127.0.0.3 kafka配置第一台server.properties： 12345678# 唯一值broker.id=1listeners=PLAINTEXT://127.0.0.1:9092# 建议填写服务器的数量值num.partitions=3 # 其他zk服务的连接zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181zookeeper.connection.timeout.ms=30000 第二台server.properties： 12345678# 唯一值broker.id=2listeners=PLAINTEXT://127.0.0.2:9092# 建议填写服务器的数量值num.partitions=3 # 其他zk服务的连接zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181zookeeper.connection.timeout.ms=30000 第三台server.properties： 12345678# 唯一值broker.id=3listeners=PLAINTEXT://127.0.0.3:9092# 建议填写服务器的数量值num.partitions=3 # 其他zk服务的连接zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181zookeeper.connection.timeout.ms=30000 zookeeper配置zookeeper可统一配置，zookeeper.properties： 12345678910111213dataDir=D:\\\\kafka_2.12-2.5.0\\\\data\\\\zookeeperdataLogDir=D:\\\\kafka_2.12-2.5.0\\\\logs\\\\zookeeperclientPort=2181# maxClientCnxns = 0 # 注释掉该配置admin.enableServer=false#设置连接参数，添加如下配置tickTime=2000initLimit=10syncLimit=5#设置broker Id的服务地址server.1=127.0.0.1:2888:3888server.2=127.0.0.2:2888:3888server.3=127.0.0.3:2888:3888同时在zookeeper数据目录dataDir下添加id配置，在各台服务的zookeeper数据目录添加myid文件且无后缀名，写入各自服务broker.id属性值， document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://www.zhuqiaolun.com/tags/Kafka/"}]},{"title":"kafka单机搭建 - 使用内置Zookeeper","slug":"1595581721604/1595581721604","date":"2020-07-24T09:08:41.000Z","updated":"2020-09-24T05:41:58.900Z","comments":true,"path":"2020/07/1595581721604/1595581721604/","link":"","permalink":"https://www.zhuqiaolun.com/2020/07/1595581721604/1595581721604/","excerpt":"kafka搭建 - 使用内置Zookeeper","text":"前言在刚开始学习Kafka的时候，安装Kafka时说Kafka依赖ZooKeeper，所以想要安装Kafka必须先安装ZooKeeper。但是在下载Kafka的时候，官网上说，Kafka 0.5.x版本以上已经自带ZooKeeper，不需要自己安装ZooKeeper。但在使用自带ZooKeeper也没有啥缺陷，反倒针对特定版本人家 Kafka 已经验证过其稳定性了。 下载官网下载地址：http://kafka.apache.org/downloads.html 配置解压文件打开 kafka_2.12-2.5.0\\config从文本编辑器里打开 server.properties,添加或者修改内容 12345listeners=PLAINTEXT://10.200.47.142:9092log.dirs=D:\\\\kafka_2.12-2.5.0\\\\logs\\\\kafkanum.partitions=4zookeeper.connect=127.0.0.1:2181zookeeper.connection.timeout.ms=30000 端口号可以被任意修改。如果端口号设置为小于1024，那么kafka需要以root身份启动，不指定的话，按照默认9092【service.properties】port = 19092【connect-distributed.properties 】bootstrap.servers=localhost:19092【producer.properties 】bootstrap.servers=localhost:19092【connect-standalone.properties 】bootstrap.servers=localhost:19092【consumer.properties 】bootstrap.servers=localhost:19092 从文本编辑器里打开 zookeeper.properties,添加或者修改内容 12dataDir=D:\\\\kafka_2.12-2.5.0\\\\data\\\\zookeeperdataLogDir=D:\\\\kafka_2.12-2.5.0\\\\logs\\\\zookeeper 启动在根目录下编写bat文件启动： 1.start-zookeeper.bat内容如下： 12@echo offstart cmd /c \"title zookeeper-21810 &amp;&amp; .\\bin\\windows\\zookeeper-server-start .\\config\\zookeeper.properties\" 2.start-kafka.bat 12@echo offstart cmd /c \"title kafka_2.11-2.4.1-9092 &amp;&amp; .\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties\" 按照顺序启动，即可执行， document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://www.zhuqiaolun.com/tags/Kafka/"}]},{"title":"发布Java程序为Windows服务 （修改配置参数，新增对 jvm 的配置）","slug":"1592899073321/1592899073321","date":"2020-06-23T07:57:53.000Z","updated":"2020-09-24T05:39:44.566Z","comments":true,"path":"2020/06/1592899073321/1592899073321/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1592899073321/1592899073321/","excerpt":"使用 Java Service Wrapper 注册Windows服务（修改配置参数，新增对 jvm 的配置）","text":"前面是使用的配置会导致JVM不断重启，需要加JVM参数以及设置，同时设置服务开机启动； 配置文件新增配置参数如下： wrapper.jmx=false wrapper.on_exit.0=SHUTDOWN wrapper.on_exit.default=RESTART wrapper.ntservice.interactive = true # 服务开机启动 wrapper.ntservice.starttype=AUTO_START wrapper.tray = true # 监测JVM死锁 wrapper.java.monitor.deadlock = true wrapper.java.monitor.heap = true wrapper.java.monitor.gc.restart = true # Java Heap 初始化大小(单位：MB) wrapper.java.initmemory=128 # Java Heap 最大值(单位：MB) wrapper.java.maxmemory=128 # 32/64位选择，true为自动选择 wrapper.java.additional.auto_bits=TRUE检测JVM参数可以用jps+jmap监测即可jps:jmap -heap xxxxx document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"发布Java程序为Windows服务 （不含有Java环境）","slug":"1592898236483/1592898236483","date":"2020-06-23T07:43:56.000Z","updated":"2020-09-24T05:39:26.961Z","comments":true,"path":"2020/06/1592898236483/1592898236483/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1592898236483/1592898236483/","excerpt":"使用 Java Service Wrapper 注册Windows服务（不含有Java环境）","text":"前面在有Java环境的情况下的设置，现在假设我们不存在Java运行环境，也就是没有JRE与JDK，所以需要拷贝java安装目录下的JRE（包含bin目录和相关lib）目录到需要的服务目录下 拷贝JREJRE目录拷贝JRE目录到服务目录 修改配置文件利用拷贝过去的jre目录下的jar包和bin\\java.exe，修改wrapper.java.command的值 wrapper.java.command=../jre1.8.0_45/bin/java.exe document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"发布Java程序为Windows服务 （含有Java环境）","slug":"1592889892770/1592889892770","date":"2020-06-23T05:24:52.000Z","updated":"2020-11-11T07:55:04.275Z","comments":true,"path":"2020/06/1592889892770/1592889892770/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1592889892770/1592889892770/","excerpt":"使用 Java Service Wrapper 注册Windows服务（含有Java环境）","text":"描述有时候我们希望我们java写的程序作为服务注册到系统中，Java Service Wrapper 是目前较为流行的将Java程序部署成Windows服务的解决方案 下载serviceWrapper包网址：https://www.krenger.ch/blog/category/windows/ 下载zip压缩文件 解压serviceWrapper包解压wrapper-windows-x86-64-3.5.43.zip解压出来的文件多，但有些不是必须要的 注册一个简单的服务准备一个目录 建议在非中文且不含有空格的目录下目录结构如下：lang目录是存放支持其他语言的语言包，一般用不到mylib目录是存放我们的程序包 然后将下载的wrapper目录下的文件拷贝到我们上面建的目录: ···\\bin\\InstallTestWrapper-NT.bat -&gt; D:\\test\\java-service-hello\\bin\\InstallTestWrapper-NT.bat ···\\bin\\StartTestWrapper-NT.bat -&gt; D:\\test\\java-service-hello\\bin\\StartTestWrapper-NT.bat ···\\bin\\StopTestWrapper-NT.bat -&gt; D:\\test\\java-service-hello\\bin\\StopTestWrapper-NT.bat ···\\bin\\TestWrapper.bat -&gt; D:\\test\\java-service-hello\\bin\\TestWrapper.bat ···\\bin\\UninstallTestWrapper-NT.bat -&gt; D:\\test\\java-service-hello\\bin\\UninstallTestWrapper-NT.bat ···\\bin\\wrapper.exe -&gt; D:\\test\\java-service-hello\\bin\\wrapper.exe ···\\conf\\wrapper.conf -&gt; D:\\test\\java-service-hello\\conf\\wrapper.conf ···\\lib\\wrapper.jar -&gt; D:\\test\\java-service-hello\\lib\\wrapper.jar ···\\lib\\wrapper.dll -&gt; D:\\test\\java-service-hello\\lib\\wrapper.dlljava程序123456789101112131415161718192021222324import java.io.File;import java.util.concurrent.TimeUnit;import cn.hutool.core.date.DateUtil;import cn.hutool.core.io.file.FileAppender;import cn.hutool.core.lang.UUID;public class JarHelloApp { public static void main(String[] args) { while (true) { try { System.out.println(\"Hello World!\"); String str = UUID.fastUUID().toString(); System.out.println(str); //每隔3秒创建文件并写入内容 FileAppender appender = new FileAppender(new File(\"D:\\\\test\\\\jar\\\\\"+str+\".txt\"), 16, true); TimeUnit.SECONDS.sleep(3); appender.append(DateUtil.now()); appender.flush(); appender.toString(); } catch (Exception e) { e.printStackTrace(); } } }} 引入的依赖 12345&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;5.3.7&lt;/version&gt;&lt;/dependency&gt; java程序打包由于采用eclipse所有打包流程：项目邮件 -&gt; Export -&gt; Java/Runnable JAR file -&gt; Next 导出项目设置 导出项目文件 将程序打成的包以及自己程序依赖的包放到mylib 修改配置文件文件路径：D:\\test\\java-service-hello\\conf\\wrapper.conf内容如下： # jdk或者jre的java.exe路径，可通过环境变量获取 wrapper.java.command=%JAVA_HOME%/bin/java.exe # wrapper.java.command=C:\\Java\\jre1.8.0_45\\bin\\java # 日志级别 wrapper.java.command.loglevel=INFO wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp # 执行的程序的main方法的类的路径 wrapper.app.parameter.1=com.demon.jar_hello.JarHelloApp # 依赖的包，第一个是wrapper包，第二个是自己打的包以及程序依赖包 wrapper.java.classpath.1=../lib/wrapper.jar wrapper.java.classpath.2=../mylib/*.jar # 固定写法，依赖的wrapper的包 wrapper.java.library.path.1=../lib # 日志配置 按照日期每天创建文件 wrapper.logfile=../logs/wrapper.YYYYMMDD.log wrapper.logfile.rollmode=DATE # 服务名称以及描述信息 wrapper.console.title=jar hello Server wrapper.name=jarhelloserver wrapper.displayname=jar hello Server wrapper.description=jar hello Server # 更多配置可对 jvm 配置测试注册服务在服务目录下的bin目录下双击 TestWrapper.bat 文件，当程序执行正确时则表示可以注册服务控制台测试 注册服务在服务目录下执行（管理员模式） 注册服务命令 bin\\wrapper.exe -i ..\\conf\\wrapper.confcmd结果服务结果 启动服务命令 net start jarhelloserver 或者 bin\\wrapper.exe -t ..\\conf\\wrapper.confcmd结果服务结果 停止服务命令 net stop jarhelloserver 或者 bin\\wrapper.exe -p ..\\conf\\wrapper.conf cmd结果 服务结果 删除服务命令 sc delete jarhelloserver 或者 bin\\wrapper.exe -r ..\\conf\\wrapper.conf cmd结果 扩展 一由于使用命名操作复杂，故在服务目录创建bat文件 install-service.bat @echo off start cmd /c \"title install-service &amp;&amp; bin\\wrapper.exe -i ..\\conf\\wrapper.conf\"uninstall-service.bat @echo off start cmd /c \"title uninstall-service &amp;&amp; bin\\wrapper.exe -r ..\\conf\\wrapper.conf\"start-service.bat @echo off start cmd /c \"title start-service &amp;&amp; bin\\wrapper.exe -t ..\\conf\\wrapper.conf\"stop-service.bat @echo off start cmd /c \"title stop-service &amp;&amp; bin\\wrapper.exe -p ..\\conf\\wrapper.conf\"扩展 二我们可以用上面的service wrapper的bin包中的bat文件进行服务操作将下载解压后的wrapper-windows\\bin中的部分文件复制到我们的服务\\bin目录下我们只需要点击上面的bat文件即可实现上面的操作： 安装服务：InstallTestWrapper-NT.bat 查询服务：QueryTestWrapper-NT.bat 开启服务：StartTestWrapper-NT.bat 停止服务：StopTestWrapper-NT.bat 测试服务：TestWrapper.bat 卸载服务：UninstallTestWrapper-NT.bat document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"SpringBoot配置restTemplate访问https","slug":"1592881660483/1592881660483","date":"2020-06-23T03:07:40.000Z","updated":"2020-11-11T07:08:55.425Z","comments":true,"path":"2020/06/1592881660483/1592881660483/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1592881660483/1592881660483/","excerpt":"SpringBoot配置restTemplate访问https","text":"依赖1234567891011&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;dependency&gt; &lt;!-- 不需要版本号 --&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt;&lt;/dependency&gt; 配置123456789101112131415161718192021222324252627282930313233import org.apache.http.conn.ssl.SSLConnectionSocketFactory;import org.apache.http.conn.ssl.TrustStrategy;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;import org.springframework.web.client.RestTemplate;import javax.net.ssl.SSLContext;import java.security.KeyManagementException;import java.security.KeyStoreException;import java.security.NoSuchAlgorithmException;import java.security.cert.X509Certificate;/** * @ClassName: RestConfig * @Description: * @Author: Demon * @Date: 2020/6/1 19:12 */@Configurationclass RestTemplateConfig { @Bean public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException { TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true; SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build(); SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext); CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build(); //使用httpclient的factory HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(); requestFactory.setHttpClient(httpClient); return new RestTemplate(requestFactory); }} 测试123456789101112@Slf4j@SpringBootTestclass SpringBootApiApplicationTests { @Resource private RestTemplate restTemplate; @Test void contextLoads(){ String url = \"https://www.baidu.com/\"; String resp = restTemplate.getForObject(url, String.class); System.out.println(resp); }} 结果 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"RabbitMq：使用交换机topic+routingKey的模式 - 优先级 (spring-boot)","slug":"1591944668470/1591944668470","date":"2020-06-12T06:51:08.000Z","updated":"2020-09-24T05:36:56.195Z","comments":true,"path":"2020/06/1591944668470/1591944668470/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1591944668470/1591944668470/","excerpt":"使用交换机topic+routingKey的模式 - 优先级 (spring-boot)","text":"引入的maven依赖12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt; &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;&lt;/dependency&gt; yml配置12345678910111213141516171819202122232425262728spring: rabbitmq: addresses: 127.0.0.1:5672 username: guest password: guest connection-timeout: 15000 virtual-host: / # 开启消息发送到交换器（Exchange）后触发回调 publisher-confirm-type: simple # 开启消息发送到队列（Queue）后触发回调 publisher-returns: true listener: direct: # 开启ACK acknowledge-mode: manual # 开启手动 ，否则confirm自动确认 simple: # 开启ACK # 消息接收确认，可选模式：NONE（不确认）、AUTO（自动确认）、MANUAL（手动确认） acknowledge-mode: manual # 最小线程数量 concurrency: 10 # 最大线程数量 max-concurrency: 10 # 每个消费者可能未完成的最大未确认消息数量 prefetch: 1 template: # 交换机找不到QUEUE时，会调用Basic.Return 命令将消息返回给生产者 mandatory: true 声明绑定关系123456789101112131415161718192021222324252627282930313233343536373839404142/** * 初始化项目 就会创建 交换器，路由，队列，如果在服务中存在交换器的属性或者队列的属性不同，则会出现异常 * @return 返回 */@Configurationpublic class RabbitMqConfig { private static final String PRIORITY_QUEUE_NAME = \"priority.topic_demo\"; private static final String PRIORITY_TOPIC_ROUTING_KEY = \"priority.topic.routingKey\"; private static final String PRIORITY_EXCHANGE_NAME = \"priority.topic.exchange.name\"; /** * 声明消息队列 * @return 返回 */ @Bean(PRIORITY_QUEUE_NAME) public Queue priorityTopicDemo(){ Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;(1); arguments.put(\"x-max-priority\", 255); return new Queue(PRIORITY_QUEUE_NAME,true, false, false,arguments); } /** * 声明了一个Topic类型的交换机，durable是持久化（重启rabbitmq这个交换机不会被自动删除） * @return 返回 */ @Bean(PRIORITY_EXCHANGE_NAME) public Exchange priorityTopicExchangeName(){ return ExchangeBuilder.topicExchange(PRIORITY_EXCHANGE_NAME).durable(true).build(); } /** * 声明队列和交换机绑定关系，并且指定RoutingKey * @param queue 队列 * @param exchange 交换机 * @return 返回 */ @Bean public Binding queueBindingTopic(@Qualifier(PRIORITY_QUEUE_NAME) Queue queue,@Qualifier(PRIORITY_EXCHANGE_NAME) Exchange exchange){ return BindingBuilder.bind(queue).to(exchange).with(PRIORITY_TOPIC_ROUTING_KEY).noargs(); }} 生产者123456789101112131415161718192021222324252627@Component@Slf4jpublic class HelloSender { @Resource private RabbitTemplate rabbitTemplate; /** * 通过exchange和routingKey的方式 * rabbitTemplate.sendAndReceive(String exchange, String routingKey, Message message) * @param messageId 消息ID * @param exchange 交换机 * @param routingKey 路由 * @param priority 优先级 * @param content 内容 */ public void sendAndReceive(String messageId, String exchange, String routingKey, Integer priority, String content) { Message message = MessageBuilder.withBody(content.getBytes(Charset.forName(\"UTF-8\"))) .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN) .setMessageId(messageId) .setPriority(priority) .build(); CorrelationData correlationData = new CorrelationData(); correlationData.setId(messageId); this.rabbitTemplate.convertAndSend(exchange, routingKey, message,correlationData); }} 消费者123456789101112131415161718192021222324252627@Component@Slf4jpublic class HelloReceiver { /** * @param message 队列消息对象 */ @RabbitListener(queues = TopicData.PRIORITY_QUEUE_NAME) public void queueNameTest1(Channel channel, Message message) { try { String stringBuilder = \"消息ID: \" + message.getMessageProperties().getMessageId() + \"；\" + \"优先级: \" + message.getMessageProperties().getPriority() + \"；\" + \"消息内容: \" + new String(message.getBody(), StandardCharsets.UTF_8); //告诉服务器收到这条消息 已经被我消费了 可以在队列删掉 这样以后就不会再发了 否则消息服务器以为这条消息没处理掉 后续还会在发 channel.basicAck(message.getMessageProperties().getDeliveryTag(),true); log.info(stringBuilder); } catch (IOException e) { e.printStackTrace(); try { //当发生异常时丢弃这条消息，或者 另行处理 channel.basicNack(message.getMessageProperties().getDeliveryTag(), false,false); System.out.println(\"receiver fail\"); } catch (IOException e1) { e1.printStackTrace(); } } }} 回调自定义 RabbitTemplate.ConfirmCallback 实现类 1234567891011@Slf4jpublic class RabbitConfirmCallBack implements RabbitTemplate.ConfirmCallback{ @Override public void confirm(CorrelationData correlationData, boolean ack, String cause) { log.info(\"收到回调，成功发送到broker\"); log.info(\"消息唯一标识: {}\", correlationData.getId()); log.info(\"确认状态: {}\", ack); log.info(\"造成原因: {}\", cause); }} 自定义 RabbitTemplate.ConfirmCallback 实现类 12345678910111213@Slf4jpublic class RabbitReturnCallback implements RabbitTemplate.ReturnCallback{ @Override public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) { log.info(\"收到回调，交换机找不到队列\"); log.info(\"消息主体: {}\", message); log.info(\"回复编码: {}\", replyCode); log.info(\"回复内容: {}\", replyText); log.info(\"交换器: {}\", exchange); log.info(\"路由键: {}\", routingKey); }} 添加回调，配置 rabbitTemplate 123456789101112@Component@AllArgsConstructorpublic class RabbitTemplateInitializingBean implements InitializingBean { private final RabbitTemplate rabbitTemplate; @Override public void afterPropertiesSet(){ rabbitTemplate.setConfirmCallback(new RabbitConfirmCallBack()); rabbitTemplate.setReturnCallback(new RabbitReturnCallback()); }} 测试123456789101112131415161718@SpringBootTestclass SpringBootRabbitmqExampleApplicationTest { @Resource private HelloSender helloSender; @Test void content(){ Random r = new Random(); int number = 1; for (int i = 0; i &lt; number ; i++) { String messageId = UUID.randomUUID().toString().replace(\"-\",\"\"); String exchange = \"priority.topic.exchange.name\"; String routingKey = \"priority.topic.routingKey\"; Integer priority = r.nextInt(255); String content = \"这是第[\"+i+\"]个消息\"; helloSender.sendAndReceive(messageId, exchange, routingKey, priority, content); } }} 结果： 当删除交换机时的执行错误 当删除队列时的执行错误 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"RabbitMq","slug":"RabbitMq","permalink":"https://www.zhuqiaolun.com/tags/RabbitMq/"}]},{"title":"RabbitMq：使用交换机topic+routingKey的模式 - 优先级","slug":"1591941634146/1591941634146","date":"2020-06-12T06:00:34.000Z","updated":"2020-09-24T05:36:24.702Z","comments":true,"path":"2020/06/1591941634146/1591941634146/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1591941634146/1591941634146/","excerpt":"使用交换机topic+routingKey的模式 - 优先级","text":"引入的maven依赖 123456789101112131415&lt;dependency&gt; &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt; &lt;artifactId&gt;amqp-client&lt;/artifactId&gt; &lt;version&gt;5.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.30&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.30&lt;/version&gt;&lt;/dependency&gt; 生产者123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import com.rabbitmq.client.AMQP;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.UUID;import java.util.concurrent.TimeoutException;public class PriorityProducer { public final static String QUEUENAME = \"priority.topic_demo\";// 队列名称 public final static String HOST = \"localhost\"; // 主机名 public final static String USERNAME = \"guest\"; //用户名 public final static String PASSWORD = \"guest\"; //密码 public final static String EXCHANGE_NAME = \"priority.topic.exchange.name\"; //交换机 public final static String ROUTING_KEY = \"priority.topic.routingKey\"; //路由 public static void main(String[] arggs) throws IOException, TimeoutException { ConnectionFactory connectionFactory = new ConnectionFactory(); connectionFactory.setPassword(USERNAME); connectionFactory.setUsername(PASSWORD); connectionFactory.setPort(5672); connectionFactory.setHost(HOST); Connection connection = connectionFactory.newConnection(); Channel channel = connection.createChannel(); // 创建交换机 channel.exchangeDeclare(EXCHANGE_NAME, \"topic\", true); // 创建优先级 Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;(); args.put(\"x-max-priority\", 255);//定义优先级最大值 channel.queueDeclare(QUEUENAME, true, false, false, args); channel.queueBind(QUEUENAME, EXCHANGE_NAME, ROUTING_KEY); // 发送优先级消息 for (int i = 0; i &lt; 10; i++) { AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties.Builder(); builder.messageId(UUID.randomUUID().toString()); if (i % 2 != 0) { builder.priority(i); //判断 新增 优先级 }else{ builder.priority(0); } AMQP.BasicProperties properties = builder.build(); System.out.println( (\"messages-\" + i)); channel.basicPublish(EXCHANGE_NAME, ROUTING_KEY, properties, (\"messages-\" + i).getBytes()); } channel.close(); connection.close(); System.out.println(\"客户端信息发送完毕！\"); }} 消费者1234567891011121314151617181920212223242526272829303132333435import com.rabbitmq.client.AMQP.BasicProperties;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import com.rabbitmq.client.DefaultConsumer;import com.rabbitmq.client.Envelope;import java.io.IOException;import java.util.concurrent.TimeoutException;public class PriorityConsumer { public final static String QUEUENAME = \"priority.topic_demo\";// 队列名称 public final static String HOST = \"localhost\"; // 主机名 public final static String USERNAME = \"guest\"; public final static String PASSWORD = \"guest\"; public final static String EXCHANGE_NAME = \"priority.topic.exchange.name\"; public final static String ROUTING_KEY = \"priority.topic.routingKey\"; public static void main(String[] args) throws IOException, TimeoutException, InterruptedException { ConnectionFactory connectionFactory = new ConnectionFactory(); connectionFactory.setPassword(PASSWORD); connectionFactory.setUsername(USERNAME); connectionFactory.setPort(5672); connectionFactory.setHost(HOST); Connection connection = connectionFactory.newConnection(); Channel channel = connection.createChannel(); DefaultConsumer c = new DefaultConsumer(channel) { @Override public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body) throws IOException { System.out.println(properties.getMessageId()+\" - \"+properties.getPriority()+\" - \"+ new String(body)); } }; channel.basicConsume(QUEUENAME, true, c); System.out.println(\"消费端开启···\"); }} 结果：生产者： 消费者：当生产者在适度发送消息消费时 (没有消息积累) 当生产者在过度发送消息消费时 (有消息积累) 具有优先级的先执行操作，先进后出。消费者可多个，当交换机和路由和队列名相同时则不会进行重复消费，在生产者发出消息后会进行轮询分发消费。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"RabbitMq","slug":"RabbitMq","permalink":"https://www.zhuqiaolun.com/tags/RabbitMq/"}]},{"title":"在Windows下安装RabbitMQ及配置","slug":"1591869892000/1591869892000","date":"2020-06-11T10:04:52.000Z","updated":"2020-09-24T05:34:59.837Z","comments":true,"path":"2020/06/1591869892000/1591869892000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1591869892000/1591869892000/","excerpt":"Windows下RabbitMQ安装及配置","text":"介绍rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。 安装 Erlang下载地址：​https://www.erlang.org/downloads，下载与系统对应的版本文件安装时，一路 next 即可安装完成设置环境变量， &nbsp;&nbsp;变量名：ERLANG_HOME &nbsp;&nbsp;变量值：D:\\erl-23.0（安装根目录） 修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\\bin;打开cmd命令框，输入erl至此，Erlang 安装完成 安装 RabbitMq下载地址：https://www.rabbitmq.com/install-windows-manual.html本文选择解压缩安装 rabbitmq-server-windows-3.8.4.zip配置环境变量： &nbsp;&nbsp;变量名：RABBITMQ_SERVER &nbsp;&nbsp;变量值：D:\\rabbitmq_server-3.8.4（安装根目录）打开cmd命令框，进入 安装目录安装插件，命令：rabbitmq-plugins.bat enable rabbitmq_management启动：rabbitmq-server.batrabbitmq启动成功，浏览器中http://localhost:15672，输入guest,guest进入rabbitMQ管理控制台：至此，rabbitMQ安装部署完成。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"RabbitMq","slug":"RabbitMq","permalink":"https://www.zhuqiaolun.com/tags/RabbitMq/"}]},{"title":"修改hexo创建文章名称规则","slug":"1591760460000/1591760460000","date":"2020-06-10T03:41:00.000Z","updated":"2020-09-25T09:06:38.802Z","comments":true,"path":"2020/06/1591760460000/1591760460000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/06/1591760460000/1591760460000/","excerpt":"修改hexo创建文章名称规则","text":"打开 根目录下的 node_modules 找到 hexo 添加前缀时间戳新增文章操作： hexo new helloINFO Created: D:\\workspace-webstorm\\demon\\blog\\myblog\\source_posts\\1591933260490-hello.md 添加前缀路径 新增文章操作： $ hexo new helloD:\\workspace-webstorm\\demon\\blog\\myblog\\source_posts\\1601024145664/1601024145664INFO Created: D:\\workspace-webstorm\\demon\\blog\\myblog\\source_posts\\1601024145664\\1601024145664.md document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zhuqiaolun.com/categories/hexo/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://www.zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"如何让hexo博客被百度收录","slug":"1590766728000/1590766728000","date":"2020-05-29T15:38:48.000Z","updated":"2020-09-24T05:33:18.516Z","comments":true,"path":"2020/05/1590766728000/1590766728000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590766728000/1590766728000/","excerpt":"hexo博客被百度收录","text":"​前言​博客，分享才是真理。 HTTPS认证​找到 百度站长平台 -&gt; HTTPS认证认证似乎能加速百度收录速度在认证中，需要下载百度的专属识别文件，放在项目根目录，然后进行测试验证即可配置301 server { listen 80; server_name www.zhuqiaolun.com; if ($scheme = http ) { return 301 https://www.zhuqiaolun.com$request_uri; } location / { root html; index index.html index.htm; } }认证结果： 安装网站地图插件先安装sitemap插件，生成网站地图 npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save12修改配置文件​修改博客根路径下的_config.yml配置文件中的url站点地址 url: https://www.zhuqiaolun.com/ # 在这儿填写你的博客域名 root: / permalink: :year/:month/:day/:title/ permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks验证xml文件​执行命令 hexo s 完之后就会在博客路径下生成 sitemap.xml 文件和 baidusitemap.xml 文件，可以通过 https://www.zhuqiaolun.com/baidusitemap.xml 查看该文件是否生成sitemap.xml文件是搜索引擎通用的文件baidusitemap.xml是百度专用的sitemap文件 向百度提交链接​找到 百度站长平台-&gt;普通收录 -&gt; 资源提交 -&gt; sitemap在其中填写百度专用的baidusitemap.xml的请求路径 https://www.zhuqiaolun.com/baidusitemap.xml 收录结果通过认证之后进入baidusitemap提交，响应速度超快，不到5分钟就把链接收录完成 查询收录结果访问 百度站长工具 输入网址地址，点击查询，即可看到结果 快捷查看百度网站 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zhuqiaolun.com/categories/hexo/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://www.zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"在Linux中安装nginx环境","slug":"1590376771000/1590376771000","date":"2020-05-25T03:19:31.000Z","updated":"2020-09-24T06:19:15.690Z","comments":true,"path":"2020/05/1590376771000/1590376771000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590376771000/1590376771000/","excerpt":"在Linux中安装nginx环境","text":"下载nginxnginx 官网下载地址：http://nginx.org/en/download.htmlnginx 文件下载地址：https://nginx.org/download/下载稳定（Stable version）版本即可；传送门：http://nginx.org/download/nginx-1.18.0.zip 上传nginxmkdir /usr/local/software # 创建软件安装目录 cd /usr/local/software # 进入软件安装目录 rz # 上传nginx文件，需要安装 yum install lrzsz ll # 查看上传文件 tar -zxvf nginx-1.18.0.tar.gz # 解压文件到当前目录 检测nginx环境在安装nginx前首先要确认系统中安装了gcc、zlib 、zlib-devel、pcre、pcre-devel、openssl、openssl-develLinux下检查是否安装过某软件包： yum list installed | grep gcc # 查看是否安装了gcc yum list installed | grep pcre yum list installed | grep pcre-devel yum list installed | grep zlib yum list installed | grep zlib-devel yum list installed | grep openssl yum list installed | grep openssl-devel 在此发现只安装了gcc和openssl，其他都没有安装，所以需要安装前置环境，输入以下命令： yum -y install zlib zlib-devel pcre pcre-devel openssl openssl-devel # 一键安装 至此前置软件安装结束，下面进入正式安装nginx 安装nginxcd /usr/local/software/nginx-1.18.0 # 进入nginx的安装根目录 配置nginx安装目录./configure --prefix=/usr/local/nginx # 配置nginx安装目录，执行完成后不会产生nginx目录执行完成后会出现一个 Makefile 的文件 编译并安装make &amp;&amp; make install # 编译、安装，执行完成后会产生nginx目录 cd /usr/local/nginx/ # 进入nginx目录nginx目录内容 测试是否安装成功./sbin/nginx -t出现 test is successful 表示安装成功，同时会生成一些文件 启动nginxcd /usr/local/nginx/sbin # 进入启动目录 ./nginx # 启动nginx，默认读取 /usr/local/nginx/conf 目录下的 nginx.conf 配置文件 ps -ef | grep nginx # 查看nginx是否启动当出现 worker process 则表示运行成功 另 执行命令： ps -A | grep nginx ，如果返回结果的话，也说明有nginx在运行，服务已经启动 访问nginxcurl http://localhost # 默认端口为：80当出现 Welcome to nginx! 则表示访问成功 修改nginx.confcd /usr/local/nginx/conf/ # 进入nginx配置文件目录 vim nginx.conf # 进入编辑文件模式 1234567location / { autoindex on; #打开目录列表 autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位 autoindex_localtime on; #显示文件服务器时间，off显示GMT时间 root html; index index.html index.htm;} 修改完成后使用 /usr/local/nginx/sbin/nginx -t 命令检测语句是否修改正确，如出现 test is successful，则表示正确 扩展/usr/local/nginx/sbin/nginx # 启动服务 /usr/local/nginx/sbin/nginx -s stop # 停止服务 /usr/local/nginx/sbin/nginx -s reload # 重启服务 /usr/local/nginx/sbin/nginx -t # 检测语句 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.zhuqiaolun.com/tags/Nginx/"}]},{"title":"使本地git与Github连接","slug":"1590309165000/1590309165000","date":"2020-05-24T08:32:45.000Z","updated":"2020-09-24T05:31:06.190Z","comments":true,"path":"2020/05/1590309165000/1590309165000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590309165000/1590309165000/","excerpt":"使本地git与Github连接","text":"创建github账号在 github 中创建一个账号，如有账号则不需创建 配置github账户安装成功后打开Git Bash Here，执行命令 git config –global -e 操作进入全局配置文件 1git config --global -e 按 i 进行编辑以下内容： [user] name = zhuqiaolun # github的Username email =zhuqlchina@163.com # github的Email按下ESC，输入 :wq 保存退出 输入以下命令禁用自动转换，防止 Git 提交时报错warning: LF will be replaced by CRLF in 1git config --global core.autocrlf false 输入以下命令查看配置 1git config -l 生成ssh认证输入以下命令，回车会让你输入存放保存ssh key的地址，它给了一个默认地址就是括号了那里，再回车就是你选择了默认地址，然后会让你输入密码并且确认密码，ok生成了，过程如下图 1ssh-keygen -t rsa -C \"zhuqlchina@163.com\" # github的Email 按照你存放ssk key的地址，去复制key，比如我的在下图这个位置，打开id_rsa.pub,复制里面的key 配置ssh认证登录 github ,setting -&gt; SSH and GPG keys -&gt; new SSH key输入key后 点击 Add SSH key 完成 验证ssh认证在git bash 下输入命令，如在前面设置过密码则会提示输入密码，那输入设置的密码即可 1ssh -T git@github.com 拉去github文件到本地仓库 选好本地仓库的目录，进去鼠标右键-&gt;Git Bash Here,输入以下命令拉去github上面的代码并进入拉去的代码目录 1git clone https://github.com/zhuqiaolun/spring-boot-code # repositories的url 修改内容后则需要提交文件 提交代码到远程仓库输入命令，查看修改了哪些文件，出现的红色字则为修改了内容的文件 1git status 修改文件状态，将本地文件更新全部提交到暂缓区 1.全部修改 1git add . # 更新文件状态，将文件添加到暂存区，注意后面一个点 2.修改只提交的文件 1touch .gitignore # 创建忽略提交的文件 在里面添加 不必要提交的文件路径或者文件名，过滤文件夹设置：.idea 表示过滤这个文件夹过滤文件设置：*.iml 输入命令： 1git add .gitignore # 更新单个文件状态 当前需要的文件变成绿色后，就可以提交了，先提交本地在提交远程，中间有可能要输入用户密码验证 12git commit -m '相关注释文字' #提交到本地仓库git push origin master #提交到远程仓库 查看远程github 扩展从本地上传代码到github上操作：在git bash 下输入命令1、仓库初始化git init2、连接仓库，没有则需新建git remote add origin 仓库地址3、查看状态git status4、将文件添加到暂存区git add 状态里的新文件5、将文件添加到仓库git commit -m’相关注释文字’6、将本地代码提交到远程仓库git push origin master ssh和https提交代码时其实都需要验证，ssh用的是key， https用的是登录名和密码的方式 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://www.zhuqiaolun.com/tags/Github/"}]},{"title":"Java反射机制","slug":"1590300096000/1590300096000","date":"2020-05-24T06:01:36.000Z","updated":"2020-11-11T07:07:57.699Z","comments":true,"path":"2020/05/1590300096000/1590300096000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590300096000/1590300096000/","excerpt":"Java反射机制","text":"什么是反射JAVA反射机制是在运行状态中，对于任意一个类。都能都知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称之为java语言的反射机制； 反射的作用反射类： java.lang.reflect反编译： .class –à .java通过反射机制可以访问java对象中的属性，方法，构造方法，自定义方法 创建Class对象的三种方式实例对象： 1234567891011121314public class Person { private String name; private int age ; // 构造方法（无参，有参） // get 方法·· // set 方法·· // 自定义一个执行方法，方法名称：execute， // 参数1：name，类型：String.class // 参数2：age，类型：int.class public String execute(String name, int age) { return \"姓名:\" + name + \"；年龄：\"+ age; }} 创建Class对象的方式一对象.getClass()，获取Person类中的字节码文件 1Class&lt;?&gt; class1 = new Person().getClass(); 创建Class对象的方式二.class，一个明确的类，任意一个类型都有一个静态的class属性 1Class&lt;?&gt; class2 = Person.class; 创建Class对象的方式三 （推荐）必须是全路径名称，如：com.demon.hello.Person，如找不到则出现异常：ClassNotFoundException 12345try { Class&lt;?&gt; class3 = Class.forName(classPath); } catch (ClassNotFoundException e) { e.printStackTrace(); } 获取类的实例获取class类型之后，可以创建该类型的对象，如：class3.newInstance() 执行类的方法获得class类型的Method对象，根据方法参数定义填写参数类型说明 参数类型与需要反射的类的参数类型保持一致，如int.class不要写成Integer.classinvoke方法，参数为cls实例对象，和想要调用的方法参数输出invoke方法的返回值(返回值类型可为方法定义的返回值类型，强制转化即可) // 第一个参数为方法名,第二个参数为参数name的类型Class对象，第三个参数为参数age的类型Class对象 Method method2 = class3.getMethod(\"execute\", String.class, int.class); Object obj = method1.invoke(c1s.newInstance(), \"张三\", 30); System.out.println(\"execute方法的返回值：\" + value); // 姓名:张三；年龄：30扩展在获取创建类型的对象后，获取根据类的方法判断该执行类是否满足执行条件，如是否有实现接口：c1s.getInterfaces()，返回是一个数组，是否有注解类：c1s.getAnnotation(aCls.class)，参数为注解类.class，更多查看 api ··· document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"在Linux中安装Java环境","slug":"1590236390000/1590236390000","date":"2020-05-23T12:19:50.000Z","updated":"2020-09-24T05:28:21.843Z","comments":true,"path":"2020/05/1590236390000/1590236390000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590236390000/1590236390000/","excerpt":"在Linux中安装Java环境","text":"下载JDK由于是安装在服务器，所以只需jre即可，选择对应的系统版本点击下载，没有登陆则跳转登陆页面，此提供一位同学账号： `2028056560@qq.com/Oracle1234 方便使用 （感谢同学） 上传JDK到服务器安装命令 yum install -y lrzsz 工具，此为在Xshell下使用，rz:上传，sz:下载在local下创建java目录，在弹出的窗口中选择要上传的jdk压缩文件，上传文件到Linux上java安装目录并解压，此时安装目录为：/usr/local/java/jdk1.8.0_231 mkdir /use/local/java # 创建目录 cd /use/local/java # 进入目录 rz # 上传文件 tar -zxvf jdk-8u231-linux-x64.tar.gz # 解压文件 配置JDK环境变量使用 vim /etc/profile 命令进入编辑器，添加以下内容： set java environment JAVA_HOME=/usr/local/java/jdk1.8.0_231 JRE_HOME=$JAVA_HOME/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH使用 Esc wq 对内容保存并退出使用 source /etc/profile 让内容生效 验证JDK环境变量使用 java -version 查看环境是否安装完全 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"}]},{"title":"在idea中创建项目与github关联","slug":"1590142873000/1590142873000","date":"2020-05-22T10:21:13.000Z","updated":"2020-09-24T05:49:32.092Z","comments":true,"path":"2020/05/1590142873000/1590142873000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590142873000/1590142873000/","excerpt":"在idea中创建项目与github关联","text":"在IDEA中配置git在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git ，git安装环境变量成功会自动识别安装路径，点击Test，测试是否设置成功 在IDEA中连接github中心在IDEA中，File–&gt;Setting-&gt;Version Control–&gt;GibHub，点击右侧 “ + “ 按钮，建议在Server的中添加[https://]，Login为Github的账户，Password为Github的密码，点击Log In，成功则显示， 创建本地仓库在IDEA中，VCS–&gt;Import into Version Control–&gt;Create Git Repository 在弹窗中选择项目所在的位置 点击OK，此时项目文件全部变成红色，同时在项目目录下生成一个隐藏的.git的文件目录 上传文件到本地仓库在IDEA中，选择项目鼠标右键–&gt; git –&gt; Add，此时项目文件变成绿色，此时文件只处于本地库的暂存区，并没有同步到github版本库中 同步到本地github版本在IDEA中，选择项目鼠标右键–&gt; git –&gt; Commit Directory，出现提交弹窗，在弹窗勾掉.idea排除不必要的文件，在弹窗中输入Commit Message，否则不允许提交，点击commit，此时项目文件从暂存区真正进入本地github版本库中，项目文件变成白色 上传项目到GitHub中在IDEA中，选择项目，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中自动输入仓库名，输入描述，选择要Share的链接， 点击Share，即可上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示 同步结束此至，可访问github上查看 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Idea","slug":"Idea","permalink":"https://www.zhuqiaolun.com/tags/Idea/"}]},{"title":"在Windows上安装git-v2.26.2","slug":"1590132000000/1590132000000","date":"2020-05-22T07:20:00.000Z","updated":"2020-09-24T05:49:15.108Z","comments":true,"path":"2020/05/1590132000000/1590132000000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590132000000/1590132000000/","excerpt":"在Windows上安装git-v2.26.2","text":"下载git下载并安装 git 进入自动识别系统， 点击自动弹出下载窗口 安装git下载结束后，双击进行安装，如已安装点击运行则为修复版本 是否显示桌面图，可不勾选，在安装结束后鼠标右键有选项显示 此项完全不修改PATH变量值，仅在Git Bash中使用Git，绝对安全，所以cmd的git –version 无效 Git命令与Linux一样，所以最好在OpenSSL中操作命令 启用文件缓存 在桌面或者文件目录空白处点击鼠标右键，选择 Git Bash Here 选项，即可打开命令界面 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.zhuqiaolun.com/tags/Git/"}]},{"title":"(图)王者荣耀 - 武则天 - 女帝","slug":"1590066158000/1590066158000","date":"2020-05-21T11:21:02.000Z","updated":"2020-11-23T05:13:52.833Z","comments":false,"path":"2020/05/1590066158000/1590066158000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590066158000/1590066158000/","excerpt":"奉我为主！叫我女王陛下！","text":"历史上的TA武则天，名曌(zhào)，这个字，是她自己为自己造的，取明月当空之意。中国历史上的女主不少，但称帝当皇帝的，只有她一个。武则天最初是唐太宗的才人，后与太宗的儿子李治相恋，李治登基后，封为昭仪，进一步被封为皇后。高宗多病，武则天临朝听政，宫中并称二圣。高宗死后，几经折腾，先后废掉两个儿子，武则天剪除了忠于李唐的朝中势力，改国号为周，自立为帝。武则天虽然任用酷吏，鼓励告密，杀了不少朝臣，但为政还算清明，在她当政期间，国家强盛，民众安泰。临死因传位问题无法解决，最终把天下又还给了李家。 女帝 东方不败 海洋之心 链接嬴政 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"游戏","slug":"游戏","permalink":"https://www.zhuqiaolun.com/categories/%E6%B8%B8%E6%88%8F/"}],"tags":[{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://www.zhuqiaolun.com/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"}]},{"title":"(图)王者荣耀 - 嬴政 - 王者独尊","slug":"1590059618000/1590059618000","date":"2020-05-21T11:13:38.000Z","updated":"2020-11-23T05:13:24.966Z","comments":false,"path":"2020/05/1590059618000/1590059618000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1590059618000/1590059618000/","excerpt":"向所有人显现的东西，才叫公正。黑色，光明的预演。","text":"历史上的TA嬴政又称秦王政，秦始皇。他是秦朝第一个皇帝，也是秦国的最后一个国王。关于他的出身，有很传奇的经历。他的父亲，本是秦国被遗弃在外的王子，因为赵国富商吕不韦的运作，才得以回国接班。所以，秦王政即位时，称吕不韦为亚父。但是，作为枭雄的嬴政，很快就运用铁腕，从吕不韦的手中夺过了大权，囚禁了信任宦官、秽乱宫廷的母后，放手任用法家信徒，把军国主义政治推向极致，终于灭了六国，一统天下。他是中国大一统帝制王朝的开创者，也是以吏为师的专制文化的倡导者。 王者独尊 摇滚巨星 暗夜贵公子 优雅恋人 白昼王子 链接武则天 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"游戏","slug":"游戏","permalink":"https://www.zhuqiaolun.com/categories/%E6%B8%B8%E6%88%8F/"}],"tags":[{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://www.zhuqiaolun.com/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"}]},{"title":"关于使用macleaya主题的修改","slug":"1589770224000/1589770224000","date":"2020-05-18T02:50:24.000Z","updated":"2020-09-27T07:50:55.292Z","comments":true,"path":"2020/05/1589770224000/1589770224000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1589770224000/1589770224000/","excerpt":"在hexo主题中选择macleaya主题并应用","text":"前言在 hexo 主题中选择 macleaya 主题并应用 字段描述 变量 名字 描述 title 网站标题 浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到 keywords 关键词 作用是告诉搜索引擎本页内容是围绕哪些词展开的 description 内容摘要 一个网页的简要内容概况，描述内容要和页面内容相关 type 网站内容 类型 date 网站内容 时间，由生成页面时自动生成，默认格式为：YYYY-MM-DD author 网站内容 作者 excerpt 网站内容 文章列表时的简介 categories 网站内容 类别 tags 网站内容 标签 内容修改时间显示修改当前默认格式为：YYYY-MM-DD，想要修改为 YYYY-MM-DD HH:mm:ss，则需在将date(page.date) 改为 date(page.date,’YYYY-MM-DD HH:mm:ss’)即可 head.ejs修改在应用过程中发现 layout/_partial/head.ejs的文件中page.content值与page.description重合，当设置content字段时页面内容则变成content的内容，无法显示正常内容，故 page.content 改为：page.description footer.ejs修改此部分修改一些页脚显示，显示自己需要显示的内容 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zhuqiaolun.com/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"https://www.zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"}]},{"title":"Hello World","slug":"1589344022000/1589344022000","date":"2020-05-13T04:27:02.000Z","updated":"2020-09-24T05:18:54.918Z","comments":true,"path":"2020/05/1589344022000/1589344022000/","link":"","permalink":"https://www.zhuqiaolun.com/2020/05/1589344022000/1589344022000/","excerpt":"『你好,世界』","text":"『你好,世界』Java1234567public class HelloWorld{ public static void main(String[] args) { System.out.println( \"Hello, World!\" ); }} C12345#include &lt;stdio.h&gt;int main(){ printf(\"Hello, World!\");} Python 31print(\"Hello, World!\") 可以使用单引号’’，双引号”” 或三引号””” “””或’’’ ‘’’ C++123456#include &lt;iostream&gt;using namespace std;int main(){ cout&lt;&lt;\"Hello, World!\"&lt;&lt;endl;} C#12345678910namespace HelloWorld{ class Program { static void Main(string[] args) { System.Console.Write(\"Hello, World!\"); } }} VB12345Module MainFrm Sub Main() System.Console.WriteLine(\"Hello, World!\") End SubEnd Module JavaScript1alert (\"Hello, World!\"); 1document.write(\"Hello, World!\"); PHP123&lt;?php echo 'Hello, world!';?&gt; SQL1SELECT 列名称 FROM 表名称 Object-C12345#import &lt;stdio.h&gt;int main(int argc,const char *argv[]){ printf(\"Hello World\");} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://www.zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"}]}],"categories":[{"name":"J-Tools","slug":"J-Tools","permalink":"https://www.zhuqiaolun.com/categories/J-Tools/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.zhuqiaolun.com/categories/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://www.zhuqiaolun.com/categories/MyBatis/"},{"name":"工具","slug":"工具","permalink":"https://www.zhuqiaolun.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"服务器","slug":"服务器","permalink":"https://www.zhuqiaolun.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/categories/Redis/"},{"name":"环境配置","slug":"环境配置","permalink":"https://www.zhuqiaolun.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"Jackson","slug":"Jackson","permalink":"https://www.zhuqiaolun.com/categories/Jackson/"},{"name":"Maven","slug":"Maven","permalink":"https://www.zhuqiaolun.com/categories/Maven/"},{"name":"中间件","slug":"中间件","permalink":"https://www.zhuqiaolun.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"hexo","slug":"hexo","permalink":"https://www.zhuqiaolun.com/categories/hexo/"},{"name":"游戏","slug":"游戏","permalink":"https://www.zhuqiaolun.com/categories/%E6%B8%B8%E6%88%8F/"},{"name":"编程语言","slug":"编程语言","permalink":"https://www.zhuqiaolun.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.zhuqiaolun.com/tags/Java/"},{"name":"Redis","slug":"Redis","permalink":"https://www.zhuqiaolun.com/tags/Redis/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.zhuqiaolun.com/tags/Nginx/"},{"name":"pom","slug":"pom","permalink":"https://www.zhuqiaolun.com/tags/pom/"},{"name":"Maven","slug":"Maven","permalink":"https://www.zhuqiaolun.com/tags/Maven/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://www.zhuqiaolun.com/tags/Tomcat/"},{"name":"MyCat","slug":"MyCat","permalink":"https://www.zhuqiaolun.com/tags/MyCat/"},{"name":"Kafka","slug":"Kafka","permalink":"https://www.zhuqiaolun.com/tags/Kafka/"},{"name":"RabbitMq","slug":"RabbitMq","permalink":"https://www.zhuqiaolun.com/tags/RabbitMq/"},{"name":"其他","slug":"其他","permalink":"https://www.zhuqiaolun.com/tags/%E5%85%B6%E4%BB%96/"},{"name":"Github","slug":"Github","permalink":"https://www.zhuqiaolun.com/tags/Github/"},{"name":"Idea","slug":"Idea","permalink":"https://www.zhuqiaolun.com/tags/Idea/"},{"name":"Git","slug":"Git","permalink":"https://www.zhuqiaolun.com/tags/Git/"},{"name":"王者荣耀","slug":"王者荣耀","permalink":"https://www.zhuqiaolun.com/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"},{"name":"hexo主题","slug":"hexo主题","permalink":"https://www.zhuqiaolun.com/tags/hexo%E4%B8%BB%E9%A2%98/"}]}