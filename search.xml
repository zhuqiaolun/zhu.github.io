<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/1589344022000/1589344022000/</url>
    <content><![CDATA[<h2 id="『你好-世界』"><a href="#『你好-世界』" class="headerlink" title="『你好,世界』"></a>『你好,世界』</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">public class HelloWorld</span><br><span class="line">{</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    { </span><br><span class="line">      System.out.println( <span class="string">"Hello, World!"</span> );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>可以使用单引号’’，双引号”” 或三引号””” “””或’’’ ‘’’</p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    cout&lt;&lt;<span class="string">"Hello, World!"</span>&lt;&lt;endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">namespace HelloWorld</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            System.Console.Write(<span class="string">"Hello, World!"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">Module MainFrm</span><br><span class="line">    Sub Main()</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello, World!"</span>)</span><br><span class="line">    End Sub</span><br><span class="line">End Module</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">alert (<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">document.write(<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?php    </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'Hello, world!'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line">SELECT 列名称 FROM 表名称</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#import &lt;stdio.h&gt;</span></span><br><span class="line">int main(int argc,const char *argv[])</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>世界</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows上安装git-v2.26.2</title>
    <url>/2020/05/1590132000000/1590132000000/</url>
    <content><![CDATA[<h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>下载并安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 进入自动识别系统， 点击自动弹出下载窗口<br><img src="/2020/05/1590132000000/1590132000000/20200524135151.png" alt="20200524135151"></p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载结束后，双击进行安装，如已安装点击运行则为修复版本<br><img src="/2020/05/1590132000000/1590132000000/20200524154530.png" alt="20200524154530"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524154634.png" alt="20200524154634"></p>
<p>是否显示桌面图，可不勾选，在安装结束后鼠标右键有选项显示<br><img src="/2020/05/1590132000000/1590132000000/20200524154845.png" alt="20200524154845"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524154934.png" alt="20200524154934"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524155123.png" alt="20200524155123"></p>
<p>此项完全不修改PATH变量值，仅在Git Bash中使用Git，绝对安全，所以cmd的git –version 无效<br> <img src="/2020/05/1590132000000/1590132000000/20200524155406.png" alt="20200524155406"></p>
<p>Git命令与Linux一样，所以最好在OpenSSL中操作命令<br><img src="/2020/05/1590132000000/1590132000000/20200524155810.png" alt="20200524155810"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524155830.png" alt="20200524155830"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524155858.png" alt="20200524155858"></p>
<p> 启用文件缓存<br><img src="/2020/05/1590132000000/1590132000000/20200524155947.png" alt="20200524155947"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524160043.png" alt="20200524160043"></p>
<p><img src="/2020/05/1590132000000/1590132000000/20200524160043.png" alt="20200524160043"></p>
<p>在桌面或者文件目录空白处点击鼠标右键，选择 Git Bash Here 选项，即可打开命令界面<br><img src="/2020/05/1590132000000/1590132000000/20200524160313.png" alt="20200524160313"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>在idea中创建项目与github关联</title>
    <url>/2020/05/1590142873000/1590142873000/</url>
    <content><![CDATA[<h3 id="在IDEA中配置git"><a href="#在IDEA中配置git" class="headerlink" title="在IDEA中配置git"></a>在IDEA中配置git</h3><p>在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git ，git安装环境变量成功会自动识别安装路径，点击Test，测试是否设置成功<br><img src="/2020/05/1590142873000/1590142873000/20200522184825.png" alt="20200522184825"></p>
<h3 id="在IDEA中连接github中心"><a href="#在IDEA中连接github中心" class="headerlink" title="在IDEA中连接github中心"></a>在IDEA中连接github中心</h3><p>在IDEA中，File–&gt;Setting-&gt;Version Control–&gt;GibHub，点击右侧 “ + “ 按钮，建议在Server的中添加[https://]，Login为Github的账户，Password为Github的密码，点击Log In，成功则显示，<br><img src="/2020/05/1590142873000/1590142873000/20200522190224.png" alt="20200522190224"></p>
<h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>在IDEA中，VCS–&gt;Import into Version Control–&gt;Create Git Repository<br><img src="/2020/05/1590142873000/1590142873000/20200522201913.png" alt="20200522201913"></p>
<p>在弹窗中选择项目所在的位置<br><img src="/2020/05/1590142873000/1590142873000/20200522210238.png" alt="20200522210238"></p>
<p>点击OK，此时项目文件全部变成红色，同时在项目目录下生成一个隐藏的.git的文件目录<br><img src="/2020/05/1590142873000/1590142873000/20200522211507.png" alt="20200522211507"></p>
<h3 id="上传文件到本地仓库"><a href="#上传文件到本地仓库" class="headerlink" title="上传文件到本地仓库"></a>上传文件到本地仓库</h3><p>在IDEA中，选择项目鼠标右键–&gt; git –&gt; Add，此时项目文件变成绿色，<span style="color:red">此时文件只处于本地库的暂存区，并没有同步到github版本库中</span><br><img src="/2020/05/1590142873000/1590142873000/20200522212221.png" alt="20200522212221"></p>
<p><img src="/2020/05/1590142873000/1590142873000/20200522212334.png" alt="20200522212334"></p>
<h3 id="同步到本地github版本"><a href="#同步到本地github版本" class="headerlink" title="同步到本地github版本"></a>同步到本地github版本</h3><p>在IDEA中，选择项目鼠标右键–&gt; git –&gt; Commit Directory，出现提交弹窗，在弹窗勾掉.idea排除不必要的文件，在弹窗中输入Commit Message，否则不允许提交，点击commit，此时项目文件从暂存区真正进入本地github版本库中，项目文件变成白色<br><img src="/2020/05/1590142873000/1590142873000/20200522213206.png" alt="20200522213206"></p>
<p><img src="/2020/05/1590142873000/1590142873000/20200522214833.png" alt="20200522214833"></p>
<p><img src="/2020/05/1590142873000/1590142873000/20200522215358.png" alt="20200522215358"></p>
<h3 id="上传项目到GitHub中"><a href="#上传项目到GitHub中" class="headerlink" title="上传项目到GitHub中"></a>上传项目到GitHub中</h3><p>在IDEA中，选择项目，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中自动输入仓库名，输入描述，选择要Share的链接， 点击Share，即可上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示<br><img src="/2020/05/1590142873000/1590142873000/20200522223429.png" alt="20200522223429"></p>
<p><img src="/2020/05/1590142873000/1590142873000/20200522223534.png" alt="20200522223534"></p>
<h3 id="同步结束"><a href="#同步结束" class="headerlink" title="同步结束"></a>同步结束</h3><p>此至，可访问github上查看<br><img src="/2020/05/1590142873000/1590142873000/20200522223633.png" alt="20200522223633"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中安装Java环境</title>
    <url>/2020/05/1590236390000/1590236390000/</url>
    <content><![CDATA[<h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>由于是安装在服务器，所以只需jre即可，选择对应的系统版本点击<a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/server-jre-8u251-linux-x64.tar.gz" target="_blank" rel="noopener">下载</a>，没有登陆则跳转登陆页面，<br>此提供一位同学账号： `2028056560@qq.com/Oracle1234 方便使用 （感谢同学）</p>
<h3 id="上传JDK到服务器"><a href="#上传JDK到服务器" class="headerlink" title="上传JDK到服务器"></a>上传JDK到服务器</h3><p>安装命令 yum install -y lrzsz 工具，此为在Xshell下使用，rz:上传，sz:下载<br>在local下创建java目录，在弹出的窗口中选择要上传的jdk压缩文件，上传文件到Linux上java安装目录并解压，此时安装目录为：/usr/local/java/jdk1.8.0_231</p>
<pre><code>mkdir /use/local/java   # 创建目录
cd /use/local/java  # 进入目录
rz  # 上传文件
tar -zxvf jdk-8u231-linux-x64.tar.gz    # 解压文件</code></pre><p><img src="/2020/05/1590236390000/1590236390000/20200523211855.png" alt="20200523211855"></p>
<h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><p>使用 vim /etc/profile 命令进入编辑器，添加以下内容：</p>
<pre><code>set java environment
JAVA_HOME=/usr/local/java/jdk1.8.0_231
JRE_HOME=$JAVA_HOME/jre     
CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
export JAVA_HOME JRE_HOME CLASS_PATH PATH</code></pre><p><img src="/2020/05/1590236390000/1590236390000/20200523212145.png" alt="20200523212145"><br>使用 Esc wq 对内容保存并退出<br>使用 source /etc/profile 让内容生效 </p>
<h3 id="验证JDK环境变量"><a href="#验证JDK环境变量" class="headerlink" title="验证JDK环境变量"></a>验证JDK环境变量</h3><p>使用 java -version 查看环境是否安装完全<br><img src="/2020/05/1590236390000/1590236390000/20200523221606.png" alt="20200523221606"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制</title>
    <url>/2020/05/1590300096000/1590300096000/</url>
    <content><![CDATA[<h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>JAVA反射机制是在运行状态中，对于任意一个类。都能都知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称之为java语言的反射机制；</p>
<h3 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h3><p>反射类： java.lang.reflect<br>反编译： .class –à .java<br>通过反射机制可以访问java对象中的属性，方法，构造方法，自定义方法</p>
<h3 id="创建Class对象的三种方式"><a href="#创建Class对象的三种方式" class="headerlink" title="创建Class对象的三种方式"></a>创建Class对象的三种方式</h3><p>实例对象：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">public class Person {</span><br><span class="line">   private String name;</span><br><span class="line">   private int age ;</span><br><span class="line">   // 构造方法（无参，有参）</span><br><span class="line">   // get 方法··</span><br><span class="line">   // set 方法··</span><br><span class="line">   </span><br><span class="line">   // 自定义一个执行方法，方法名称：execute，</span><br><span class="line">   // 参数1：name，类型：String.class</span><br><span class="line">   // 参数2：age，类型：int.class</span><br><span class="line">   public String execute(String name, int age) {</span><br><span class="line">       return "姓名:" + name + "；年龄："+ age;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="创建Class对象的方式一"><a href="#创建Class对象的方式一" class="headerlink" title="创建Class对象的方式一"></a>创建Class对象的方式一</h4><p>对象.getClass()，获取Person类中的字节码文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = new Person().getClass();</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="创建Class对象的方式二"><a href="#创建Class对象的方式二" class="headerlink" title="创建Class对象的方式二"></a>创建Class对象的方式二</h4><p>.class，一个明确的类，任意一个类型都有一个静态的class属性</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">Class&lt;?&gt; class2 = Person.class;</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="创建Class对象的方式三-（推荐）"><a href="#创建Class对象的方式三-（推荐）" class="headerlink" title="创建Class对象的方式三 （推荐）"></a>创建Class对象的方式三 （推荐）</h4><p>必须是全路径名称，如：com.demon.hello.Person，如找不到则出现异常：ClassNotFoundException</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">try {</span><br><span class="line">    Class&lt;?&gt; class3 = Class.forName(classPath);</span><br><span class="line">  } catch (ClassNotFoundException e) {</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="获取类的实例"><a href="#获取类的实例" class="headerlink" title="获取类的实例"></a>获取类的实例</h3><p>获取class类型之后，可以创建该类型的对象，如：class3.newInstance()</p>
<h3 id="执行类的方法"><a href="#执行类的方法" class="headerlink" title="执行类的方法"></a>执行类的方法</h3><p>获得class类型的Method对象，根据方法参数定义填写参数类型<br>说明 参数类型与需要反射的类的参数类型保持一致，如int.class不要写成Integer.class<br>invoke方法，参数为cls实例对象，和想要调用的方法参数<br>输出invoke方法的返回值(返回值类型可为方法定义的返回值类型，强制转化即可)</p>
<pre><code>// 第一个参数为方法名,第二个参数为参数name的类型Class对象，第三个参数为参数age的类型Class对象
Method method2 = class3.getMethod("execute", String.class, int.class);  
Object obj = method1.invoke(c1s.newInstance(), "张三", 30);
System.out.println("execute方法的返回值：" + value);   // 姓名:张三；年龄：30</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在获取创建类型的对象后，获取根据类的方法判断该执行类是否满足执行条件，如<br>是否有实现接口：c1s.getInterfaces()，返回是一个数组，<br>是否有注解类：c1s.getAnnotation(aCls.class)，参数为注解类.class，<br>更多查看 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener">api</a> ···</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使本地git与Github连接</title>
    <url>/2020/05/1590309165000/1590309165000/</url>
    <content><![CDATA[<h3 id="创建github账号"><a href="#创建github账号" class="headerlink" title="创建github账号"></a>创建github账号</h3><p>在 <a href="https://github.com/join?source=login" target="_blank" rel="noopener">github</a> 中创建一个账号，如有账号则不需创建</p>
<h3 id="配置github账户"><a href="#配置github账户" class="headerlink" title="配置github账户"></a>配置github账户</h3><p>安装成功后打开Git Bash Here，执行命令 git config –global -e 操作进入全局配置文件  </p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></tbody></table></figure></div>
<p>按 i 进行编辑以下内容：</p>
<pre><code>[user]
name = zhuqiaolun     # github的Username
email =zhuqlchina@163.com     # github的Email</code></pre><p>按下ESC，输入 :wq 保存退出</p>
<p>输入以下命令禁用自动转换，防止 Git 提交时报错warning: LF will be replaced by CRLF in</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></tbody></table></figure></div>

<p>输入以下命令查看配置</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生成ssh认证"><a href="#生成ssh认证" class="headerlink" title="生成ssh认证"></a>生成ssh认证</h3><p>输入以下命令，回车会让你输入存放保存ssh key的地址，它给了一个默认地址就是括号了那里，再回车就是你选择了默认地址，<br>然后会让你输入密码并且确认密码，ok生成了，过程如下图</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "zhuqlchina@163.com"            # github的Email</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524170915.png" alt="20200524170915"></p>
<p>按照你存放ssk key的地址，去复制key，比如我的在下图这个位置，打开id_rsa.pub,复制里面的key<br><img src="/2020/05/1590309165000/1590309165000/20200524182540.png" alt="20200524182540"></p>
<h3 id="配置ssh认证"><a href="#配置ssh认证" class="headerlink" title="配置ssh认证"></a>配置ssh认证</h3><p>登录 <a href="https://github.com/login" target="_blank" rel="noopener">github</a>  ,setting -&gt; SSH and GPG keys -&gt; new SSH key<br><img src="/2020/05/1590309165000/1590309165000/20200524183321.png" alt="20200524183321"><br>输入key后 点击 Add SSH key 完成<br><img src="/2020/05/1590309165000/1590309165000/20200524183322.png" alt="20200524183322"></p>
<h3 id="验证ssh认证"><a href="#验证ssh认证" class="headerlink" title="验证ssh认证"></a>验证ssh认证</h3><p>在git bash 下输入命令，如在前面设置过密码则会提示输入密码，那输入设置的密码即可</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524183707.png" alt="20200524183707"></p>
<h3 id="拉去github文件到本地仓库"><a href="#拉去github文件到本地仓库" class="headerlink" title="拉去github文件到本地仓库"></a>拉去github文件到本地仓库</h3><div>
<p>选好本地仓库的目录，进去鼠标右键-&gt;Git Bash Here,输入以下命令拉去github上面的代码并进入拉去的代码目录</p>

<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/zhuqiaolun/spring-boot-code  # repositories的url</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524195556.png" alt="20200524195556"></p>
<p><img src="/2020/05/1590309165000/1590309165000/20200524195557.png" alt="20200524195557"><br>修改内容后则需要提交文件</p>
<h3 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h3><p>输入命令，查看修改了哪些文件，出现的红色字则为修改了内容的文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524200142.png" alt="20200524200142"><br>修改文件状态，将本地文件更新全部提交到暂缓区</p>
<p>1.全部修改</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git add .  # 更新文件状态，将文件添加到暂存区，注意后面一个点</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524203126.png" alt="20200524203126"></p>
<p>2.修改只提交的文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">touch .gitignore   # 创建忽略提交的文件</span><br></pre></td></tr></tbody></table></figure></div>

<p>在里面添加 不必要提交的文件路径或者文件名，<br>过滤文件夹设置：<br>.idea 表示过滤这个文件夹<br>过滤文件设置：<br>*.iml</p>
<p>输入命令：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git add .gitignore      # 更新单个文件状态</span><br></pre></td></tr></tbody></table></figure></div>
<p>当前需要的文件变成绿色后，就可以提交了，先提交本地在提交远程，中间有可能要输入用户密码验证<br><img src="/2020/05/1590309165000/1590309165000/20200524203127.png" alt="20200524203127"></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m '相关注释文字'        #提交到本地仓库</span><br><span class="line">git push origin master              #提交到远程仓库</span><br></pre></td></tr></tbody></table></figure></div>
<p><img src="/2020/05/1590309165000/1590309165000/20200524203743.png" alt="20200524203743"></p>
<p>查看远程github<br><img src="/2020/05/1590309165000/1590309165000/20200524203946.png" alt="20200524203946"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>从本地上传代码到github上操作：<br>在git bash 下输入命令<br>1、仓库初始化<br>git init<br>2、连接仓库，没有则需新建<br>git remote add origin 仓库地址<br>3、查看状态<br>git status<br>4、将文件添加到暂存区<br>git add 状态里的新文件<br>5、将文件添加到仓库<br>git commit -m’相关注释文字’<br>6、将本地代码提交到远程仓库<br>git push origin master</p>
<p>ssh和https提交代码时其实都需要验证，ssh用的是key， https用的是登录名和密码的方式</p>
</div><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中安装Nginx环境</title>
    <url>/2020/05/1590376771000/1590376771000/</url>
    <content><![CDATA[<h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><p>nginx 官网下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a><br>nginx 文件下载地址：<a href="https://nginx.org/download/" target="_blank" rel="noopener">https://nginx.org/download/</a><br>下载稳定（Stable version）版本即可；传送门：<a href="http://nginx.org/download/nginx-1.18.0.zip" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.18.0.zip</a><br><img src="/2020/05/1590376771000/1590376771000/20200525112627.png" alt="20200525112627"></p>
<h3 id="上传nginx"><a href="#上传nginx" class="headerlink" title="上传nginx"></a>上传nginx</h3><pre><code>mkdir /usr/local/software           # 创建软件安装目录
cd /usr/local/software              # 进入软件安装目录
rz                                  # 上传nginx文件，需要安装 yum install lrzsz
ll                                  # 查看上传文件
tar -zxvf nginx-1.18.0.tar.gz       # 解压文件到当前目录</code></pre><p><img src="/2020/05/1590376771000/1590376771000/20200525130653.png" alt="20200525130653"></p>
<h3 id="检测nginx环境"><a href="#检测nginx环境" class="headerlink" title="检测nginx环境"></a>检测nginx环境</h3><p>在安装nginx前首先要确认系统中安装了gcc、zlib 、zlib-devel、pcre、pcre-devel、openssl、openssl-devel<br>Linux下检查是否安装过某软件包：</p>
<pre><code>yum list installed | grep gcc                     # 查看是否安装了gcc
yum list installed | grep pcre
yum list installed | grep pcre-devel
yum list installed | grep zlib
yum list installed | grep zlib-devel
yum list installed | grep openssl
yum list installed | grep openssl-devel      </code></pre><p><img src="/2020/05/1590376771000/1590376771000/20200525132249.png" alt="20200525132249">    </p>
<p>在此发现只安装了gcc和openssl，其他都没有安装，所以需要安装前置环境，输入以下命令：</p>
<pre><code>yum -y install zlib zlib-devel pcre pcre-devel openssl openssl-devel   # 一键安装</code></pre><p><img src="/2020/05/1590376771000/1590376771000/20200525133307.png" alt="20200525133307"></p>
<p>至此前置软件安装结束，下面进入正式安装nginx</p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>cd /usr/local/software/nginx-1.18.0             # 进入nginx的安装根目录</code></pre><p><img src="/2020/05/1590376771000/1590376771000/20200525133513.png" alt="20200525133513"></p>
<h4 id="配置nginx安装目录"><a href="#配置nginx安装目录" class="headerlink" title="配置nginx安装目录"></a>配置nginx安装目录</h4><pre><code>./configure --prefix=/usr/local/nginx           # 配置nginx安装目录，执行完成后不会产生nginx目录</code></pre><p>执行完成后会出现一个 Makefile 的文件<br><img src="/2020/05/1590376771000/1590376771000/20200525134359.png" alt="20200525134359"> </p>
<h4 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h4><pre><code>make &amp;&amp; make install                             # 编译、安装，执行完成后会产生nginx目录
cd /usr/local/nginx/                             # 进入nginx目录</code></pre><p>nginx目录内容<br><img src="/2020/05/1590376771000/1590376771000/20200525143235.png" alt="20200525143235"> </p>
<h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><pre><code>./sbin/nginx -t</code></pre><p>出现 test is successful 表示安装成功，同时会生成一些文件<br><img src="/2020/05/1590376771000/1590376771000/20200525144949.png" alt="20200525144949"> </p>
<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre><code>cd /usr/local/nginx/sbin                        # 进入启动目录
./nginx                                         # 启动nginx，默认读取 /usr/local/nginx/conf 目录下的 nginx.conf 配置文件
ps -ef | grep nginx                             # 查看nginx是否启动</code></pre><p>当出现 worker process 则表示运行成功<br><img src="/2020/05/1590376771000/1590376771000/20200525145522.png" alt="20200525145522"></p>
<p>另 执行命令： ps -A | grep nginx ，如果返回结果的话，也说明有nginx在运行，服务已经启动<br><img src="/2020/05/1590376771000/1590376771000/20200525150655.png" alt="20200525150655"></p>
<h3 id="访问nginx"><a href="#访问nginx" class="headerlink" title="访问nginx"></a>访问nginx</h3><pre><code>curl http://localhost                           # 默认端口为：80</code></pre><p>当出现 Welcome to nginx! 则表示访问成功<br><img src="/2020/05/1590376771000/1590376771000/20200525150656.png" alt="20200525150656"></p>
<h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><pre><code>cd /usr/local/nginx/conf/                       # 进入nginx配置文件目录
vim nginx.conf                                  # 进入编辑文件模式</code></pre><p><img src="/2020/05/1590376771000/1590376771000/20200525152109.png" alt="20200525152109">   </p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="code"><pre><span class="line">location / {</span><br><span class="line">    autoindex on; #打开目录列表</span><br><span class="line">    autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位</span><br><span class="line">    autoindex_localtime on; #显示文件服务器时间，off显示GMT时间</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>修改完成后使用 /usr/local/nginx/sbin/nginx -t 命令检测语句是否修改正确，如出现 test is successful，则表示正确<br><img src="/2020/05/1590376771000/1590376771000/20200525152320.png" alt="20200525152320"> </p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><pre><code>/usr/local/nginx/sbin/nginx                     # 启动服务
/usr/local/nginx/sbin/nginx -s stop             # 停止服务
/usr/local/nginx/sbin/nginx -s reload           # 重启服务
/usr/local/nginx/sbin/nginx -t                  # 检测语句</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让hexo博客被百度收录</title>
    <url>/2020/05/1590766728000/1590766728000/</url>
    <content><![CDATA[<h3 id="​前言"><a href="#​前言" class="headerlink" title="​前言"></a>​前言</h3><p>​博客，分享才是真理。</p>
<h3 id="HTTPS认证"><a href="#HTTPS认证" class="headerlink" title="HTTPS认证"></a>HTTPS认证</h3><p>​找到 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a> -&gt; HTTPS认证<br><img src="/2020/05/1590766728000/1590766728000/20200529235838.png" alt="20200529235838"><br><span style="color:red;">认证似乎能加速百度收录速度</span><br>在认证中，需要下载百度的专属识别文件，放在项目根目录，然后进行测试验证即可<br>配置301</p>
<pre><code>server {
    listen       80;
    server_name  www.zhuqiaolun.com;
    if ($scheme = http ) {
        return 301 https://www.zhuqiaolun.com$request_uri;
    }
    location / {
        root   html;
        index  index.html index.htm;
    }
}</code></pre><p>认证结果：<br><img src="/2020/05/1590766728000/1590766728000/20200529235839.png" alt="20200529235839"></p>
<h3 id="安装网站地图插件"><a href="#安装网站地图插件" class="headerlink" title="安装网站地图插件"></a>安装网站地图插件</h3><p>先安装sitemap插件，生成网站地图</p>
<pre><code>npm install hexo-generator-sitemap --save     
npm install hexo-generator-baidu-sitemap --save12</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>​修改博客根路径下的_config.yml配置文件中的url站点地址</p>
<pre><code>url: https://www.zhuqiaolun.com/                    # 在这儿填写你的博客域名
root: /
permalink: :year/:month/:day/:title/
permalink_defaults:
pretty_urls:
  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks
  trailing_html: true # Set to false to remove trailing '.html' from permalinks</code></pre><h3 id="验证xml文件"><a href="#验证xml文件" class="headerlink" title="验证xml文件"></a>验证xml文件</h3><p>​执行命令 hexo s 完之后就会在博客路径下生成 sitemap.xml 文件和 baidusitemap.xml 文件，可以通过 <a href="https://www.zhuqiaolun.com/baidusitemap.xml">https://www.zhuqiaolun.com/baidusitemap.xml</a> 查看该文件是否生成<br>sitemap.xml文件是搜索引擎通用的文件<br>baidusitemap.xml是百度专用的sitemap文件</p>
<h3 id="向百度提交链接"><a href="#向百度提交链接" class="headerlink" title="向百度提交链接"></a>向百度提交链接</h3><p>​找到 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>-&gt;普通收录 -&gt; 资源提交 -&gt; sitemap<br><img src="/2020/05/1590766728000/1590766728000/20200530000410.png" alt="20200530000410"><br>在其中填写百度专用的baidusitemap.xml的请求路径 <a href="https://www.zhuqiaolun.com/baidusitemap.xml">https://www.zhuqiaolun.com/baidusitemap.xml</a><br><img src="/2020/05/1590766728000/1590766728000/20200530001048.png" alt="20200530001048"></p>
<h3 id="收录结果"><a href="#收录结果" class="headerlink" title="收录结果"></a>收录结果</h3><p><img src="/2020/05/1590766728000/1590766728000/20200530001050.png" alt="20200530001050"><br>通过认证之后进入baidusitemap提交，响应速度超快，不到5分钟就把链接收录完成</p>
<h3 id="查询收录结果"><a href="#查询收录结果" class="headerlink" title="查询收录结果"></a>查询收录结果</h3><p>访问 <a href="https://tool.chinaz.com/baidu/" target="_blank" rel="noopener">百度站长工具</a> 输入网址地址，点击查询，即可看到结果<br><img src="/2020/05/1590766728000/1590766728000/20200530004503.png" alt="20200530004503"></p>
<p><a href="https://tool.chinaz.com/baidu/?lm=0&amp;wd=www.zhuqiaolun.com&amp;pn=0&amp;rn=10&amp;btime=&amp;etime=" target="_blank" rel="noopener">快捷查看</a><br><a href="https://www.baidu.com/s?ie=utf-8&amp;csq=1&amp;pstg=20&amp;mod=2&amp;isbd=1&amp;wd=site%3Awww.zhuqiaolun.com&amp;oq=site%www.zhuqiaolun.com&amp;ie=utf-8&amp;usm=1&amp;rsv_idx=1&amp;bs=www.zhuqiaolun.com&amp;pn=0&amp;rn=10&amp;gpc=stf=,|stftype=2" target="_blank" rel="noopener">百度网站</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>修改hexo文章目录位置</title>
    <url>/2020/06/1591760460000/1591760460000/</url>
    <content><![CDATA[<p>打开 根目录下的 node_modules 找到 hexo<br><img src="/2020/06/1591760460000/1591760460000/20200612114143.png" alt="20200612114143"></p>
<p><span style="color:red;">添加前缀时间戳</span><br><img src="/2020/06/1591760460000/1591760460000/20200612114144.png" alt="20200612114144"><br>新增文章操作： hexo new hello<br>INFO  Created: D:\workspace-webstorm\demon\blog\myblog\source_posts\1591933260490-hello.md</p>
<p><span style="color:red;">添加前缀路径</span><br><img src="/2020/06/1591760460000/1591760460000/20200925165826.png" alt="20200925165826"><br>新增文章操作： $ hexo new hello<br>D:\workspace-webstorm\demon\blog\myblog\source_posts\1601024145664/1601024145664<br>INFO  Created: D:\workspace-webstorm\demon\blog\myblog\source_posts\1601024145664\1601024145664.md</p>
<p><span style="color:red;">添加年月前缀路径</span><br><img src="/2020/06/1591760460000/1591760460000/20210311134100.png" alt="20210311134100"><br>新增文章操作： $ hexo new hello<br>D:\workspace-webstorm\demon\blog\myblog\source_posts\2021\03\1615440974493/1615440974493<br>INFO  Created: D:\workspace-webstorm\demon\blog\myblog\source_posts\2021\03\1615440974493\1615440974493.md</p>
<p>创建<br><img src="/2020/06/1591760460000/1591760460000/20200925165711.png" alt="20200925165711"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows下安装RabbitMQ及配置</title>
    <url>/2020/06/1591869892000/1591869892000/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。</p>
<h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><p>下载地址：​<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">https://www.erlang.org/downloads</a>，下载与系统对应的版本文件<br><img src="/2020/06/1591869892000/1591869892000/20200611182450.png" alt="20200611182450"><br>安装时，一路 next 即可安装完成<br>设置环境变量，<br>    &nbsp;&nbsp;变量名：ERLANG_HOME<br>    &nbsp;&nbsp;变量值：D:\erl-23.0（安装根目录）<br><img src="/2020/06/1591869892000/1591869892000/20200611182941.png" alt="20200611182941"></p>
<p>修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\bin;<br>打开cmd命令框，输入erl<br><img src="/2020/06/1591869892000/1591869892000/20200611183057.png" alt="20200611183057"><br>至此，Erlang 安装完成</p>
<h3 id="安装-RabbitMq"><a href="#安装-RabbitMq" class="headerlink" title="安装 RabbitMq"></a>安装 RabbitMq</h3><p>下载地址：<a href="https://www.rabbitmq.com/install-windows-manual.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-windows-manual.html</a><br>本文选择解压缩安装 <a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.4/rabbitmq-server-windows-3.8.4.zip" target="_blank" rel="noopener">rabbitmq-server-windows-3.8.4.zip</a><br>配置环境变量：<br>    &nbsp;&nbsp;变量名：RABBITMQ_SERVER<br>    &nbsp;&nbsp;变量值：D:\rabbitmq_server-3.8.4（安装根目录）<br>打开cmd命令框，进入 安装目录<br>安装插件，命令：rabbitmq-plugins.bat enable rabbitmq_management<br>启动：rabbitmq-server.bat<br><img src="/2020/06/1591869892000/1591869892000/20200611183733.png" alt="20200611183733"><br>rabbitmq启动成功，浏览器中<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，<br><img src="/2020/06/1591869892000/1591869892000/20200611183828.png" alt="20200611183828"><br>输入guest,guest进入rabbitMQ管理控制台：<br><img src="/2020/06/1591869892000/1591869892000/20200611183930.png" alt="20200611183930"><br>至此，rabbitMQ安装部署完成。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>RabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq：使用交换机topic+routingKey的模式 - 优先级</title>
    <url>/2020/06/1591941634146/1591941634146/</url>
    <content><![CDATA[<p>引入的maven依赖</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import com.rabbitmq.client.AMQP;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class PriorityProducer {</span><br><span class="line">	public final static String QUEUENAME = "priority.topic_demo";// 队列名称</span><br><span class="line">	public final static String HOST = "localhost"; // 主机名</span><br><span class="line">	public final static String USERNAME = "guest"; //用户名</span><br><span class="line">	public final static String PASSWORD = "guest"; //密码</span><br><span class="line">	public final static String EXCHANGE_NAME = "priority.topic.exchange.name"; //交换机</span><br><span class="line">	public final static String ROUTING_KEY = "priority.topic.routingKey"; //路由</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] arggs) throws IOException, TimeoutException {</span><br><span class="line">		ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">		connectionFactory.setPassword(USERNAME);</span><br><span class="line">		connectionFactory.setUsername(PASSWORD);</span><br><span class="line">		connectionFactory.setPort(5672);</span><br><span class="line">		connectionFactory.setHost(HOST);</span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		Channel channel = connection.createChannel();</span><br><span class="line">		// 创建交换机</span><br><span class="line">		channel.exchangeDeclare(EXCHANGE_NAME, "topic", true);</span><br><span class="line">		// 创建优先级</span><br><span class="line">		Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> args = new HashMap<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span>();</span><br><span class="line">		args.put("x-max-priority", 255);//定义优先级最大值</span><br><span class="line">		channel.queueDeclare(QUEUENAME, true, false, false, args);</span><br><span class="line">		channel.queueBind(QUEUENAME, EXCHANGE_NAME, ROUTING_KEY);</span><br><span class="line">		// 发送优先级消息</span><br><span class="line">		for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">			<span class="attr">AMQP.BasicProperties.Builder</span> <span class="attr">builder</span> = <span class="string">new</span> <span class="attr">AMQP.BasicProperties.Builder</span>();</span></span><br><span class="line"><span class="tag">            <span class="attr">builder.messageId</span>(<span class="attr">UUID.randomUUID</span>()<span class="attr">.toString</span>());</span></span><br><span class="line"><span class="tag">            <span class="attr">if</span> (<span class="attr">i</span> % <span class="attr">2</span> != <span class="string">0)</span> {</span></span><br><span class="line"><span class="tag">                <span class="attr">builder.priority</span>(<span class="attr">i</span>); 	//判断 新增 优先级</span></span><br><span class="line"><span class="tag">            }<span class="attr">else</span>{</span></span><br><span class="line"><span class="tag">                <span class="attr">builder.priority</span>(<span class="attr">0</span>);</span></span><br><span class="line"><span class="tag">            }</span></span><br><span class="line"><span class="tag">			<span class="attr">AMQP.BasicProperties</span> <span class="attr">properties</span> = <span class="string">builder.build();</span></span></span><br><span class="line"><span class="tag">			<span class="attr">System.out.println</span>( ("<span class="attr">messages-</span>" + <span class="attr">i</span>));</span></span><br><span class="line"><span class="tag">			<span class="attr">channel.basicPublish</span>(<span class="attr">EXCHANGE_NAME</span>, <span class="attr">ROUTING_KEY</span>, <span class="attr">properties</span>, ("<span class="attr">messages-</span>" + <span class="attr">i</span>)<span class="attr">.getBytes</span>());</span></span><br><span class="line"><span class="tag">		}</span></span><br><span class="line"><span class="tag">		<span class="attr">channel.close</span>();</span></span><br><span class="line"><span class="tag">		<span class="attr">connection.close</span>();</span></span><br><span class="line"><span class="tag">		<span class="attr">System.out.println</span>("客户端信息发送完毕！");</span></span><br><span class="line"><span class="tag">	}</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import com.rabbitmq.client.AMQP.BasicProperties;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import com.rabbitmq.client.DefaultConsumer;</span><br><span class="line">import com.rabbitmq.client.Envelope;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">public class PriorityConsumer {</span><br><span class="line">	public final static String QUEUENAME = "priority.topic_demo";// 队列名称</span><br><span class="line">	public final static String HOST = "localhost"; // 主机名</span><br><span class="line">	public final static String USERNAME = "guest";</span><br><span class="line">	public final static String PASSWORD = "guest";</span><br><span class="line">	public final static String EXCHANGE_NAME = "priority.topic.exchange.name";</span><br><span class="line">	public final static String ROUTING_KEY = "priority.topic.routingKey";</span><br><span class="line">	public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {</span><br><span class="line">		ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">		connectionFactory.setPassword(PASSWORD);</span><br><span class="line">		connectionFactory.setUsername(USERNAME);</span><br><span class="line">		connectionFactory.setPort(5672);</span><br><span class="line">		connectionFactory.setHost(HOST);</span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		Channel channel = connection.createChannel();</span><br><span class="line">		DefaultConsumer c = new DefaultConsumer(channel) {</span><br><span class="line">			@Override</span><br><span class="line">			public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</span><br><span class="line">					throws IOException {</span><br><span class="line">				System.out.println(properties.getMessageId()+" - "+properties.getPriority()+" - "+ new String(body));</span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">		channel.basicConsume(QUEUENAME, true, c);</span><br><span class="line">		System.out.println("消费端开启···");</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果：<br>生产者：<br><img src="/2020/06/1591941634146/1591941634146/20200612143312.png" alt="20200612143312"></p>
<p>消费者：<br>当生产者在适度发送消息消费时 <span style="color:red">(没有消息积累)</span><br><img src="/2020/06/1591941634146/1591941634146/20200612143421.png" alt="20200612143421"></p>
<p>当生产者在过度发送消息消费时 <span style="color:red">(有消息积累)</span><br><img src="/2020/06/1591941634146/1591941634146/20200612144440.png" alt="20200612143421"></p>
<p>具有优先级的先执行操作，先进后出。<br>消费者可多个，当交换机和路由和队列名相同时则不会进行重复消费，在生产者发出消息后会进行轮询分发消费。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>RabbitMq</category>
      </categories>
      <tags>
        <tag>rabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMq：使用交换机topic+routingKey的模式 - 优先级 (spring-boot)</title>
    <url>/2020/06/1591944668470/1591944668470/</url>
    <content><![CDATA[<h3 id="引入的maven依赖"><a href="#引入的maven依赖" class="headerlink" title="引入的maven依赖"></a>引入的maven依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    addresses: 127.0.0.1:5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    connection-timeout: 15000</span><br><span class="line">    virtual-host: /</span><br><span class="line">    # 开启消息发送到交换器（Exchange）后触发回调</span><br><span class="line">    publisher-confirm-type: simple</span><br><span class="line">    # 开启消息发送到队列（Queue）后触发回调</span><br><span class="line">    publisher-returns: true</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        acknowledge-mode: manual  # 开启手动 ，否则confirm自动确认</span><br><span class="line">      simple:</span><br><span class="line">        # 开启ACK</span><br><span class="line">        # 消息接收确认，可选模式：NONE（不确认）、AUTO（自动确认）、MANUAL（手动确认）</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">        # 最小线程数量</span><br><span class="line">        concurrency: 10</span><br><span class="line">        # 最大线程数量</span><br><span class="line">        max-concurrency: 10</span><br><span class="line">        # 每个消费者可能未完成的最大未确认消息数量</span><br><span class="line">        prefetch: 1</span><br><span class="line">    template:</span><br><span class="line">      # 交换机找不到QUEUE时，会调用Basic.Return 命令将消息返回给生产者</span><br><span class="line">      mandatory: true</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="声明绑定关系"><a href="#声明绑定关系" class="headerlink" title="声明绑定关系"></a>声明绑定关系</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 初始化项目 就会创建 交换器，路由，队列，如果在服务中存在交换器的属性或者队列的属性不同，则会出现异常</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig {</span><br><span class="line"></span><br><span class="line">    private static final String PRIORITY_QUEUE_NAME = "priority.topic_demo";</span><br><span class="line">    private static final String PRIORITY_TOPIC_ROUTING_KEY = "priority.topic.routingKey";</span><br><span class="line">    private static final String PRIORITY_EXCHANGE_NAME = "priority.topic.exchange.name";</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明消息队列</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_QUEUE_NAME)</span><br><span class="line">    public Queue priorityTopicDemo(){</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> arguments = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        arguments.put("x-max-priority", 255);</span><br><span class="line">        return new Queue(PRIORITY_QUEUE_NAME,true, false, false,arguments);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明了一个Topic类型的交换机，durable是持久化（重启rabbitmq这个交换机不会被自动删除）</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean(PRIORITY_EXCHANGE_NAME)</span><br><span class="line">    public Exchange priorityTopicExchangeName(){</span><br><span class="line">        return ExchangeBuilder.topicExchange(PRIORITY_EXCHANGE_NAME).durable(true).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明队列和交换机绑定关系，并且指定RoutingKey</span><br><span class="line">     * @param queue 队列</span><br><span class="line">     * @param exchange 交换机</span><br><span class="line">     * @return  返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding queueBindingTopic(@Qualifier(PRIORITY_QUEUE_NAME) Queue queue,@Qualifier(PRIORITY_EXCHANGE_NAME) Exchange exchange){</span><br><span class="line">        return BindingBuilder.bind(queue).to(exchange).with(PRIORITY_TOPIC_ROUTING_KEY).noargs();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloSender {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过exchange和routingKey的方式</span><br><span class="line">     * rabbitTemplate.sendAndReceive(String exchange, String routingKey, Message message)</span><br><span class="line">     * @param messageId  消息ID</span><br><span class="line">     * @param exchange  交换机</span><br><span class="line">     * @param routingKey 路由</span><br><span class="line">     * @param priority 优先级</span><br><span class="line">     * @param content 内容</span><br><span class="line">     */</span><br><span class="line">    public void sendAndReceive(String messageId, String exchange, String routingKey, Integer priority, String content) {</span><br><span class="line">        Message message = MessageBuilder.withBody(content.getBytes(Charset.forName("UTF-8")))</span><br><span class="line">              .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class="line">              .setMessageId(messageId)</span><br><span class="line">              .setPriority(priority)</span><br><span class="line">              .build();</span><br><span class="line">        CorrelationData correlationData = new CorrelationData();</span><br><span class="line">        correlationData.setId(messageId);</span><br><span class="line">        this.rabbitTemplate.convertAndSend(exchange, routingKey, message,correlationData);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class HelloReceiver {</span><br><span class="line">      /**</span><br><span class="line">        * @param message 队列消息对象</span><br><span class="line">        */</span><br><span class="line">       @RabbitListener(queues = TopicData.PRIORITY_QUEUE_NAME)</span><br><span class="line">       public void queueNameTest1(Channel channel, Message message) {</span><br><span class="line">           try {</span><br><span class="line">               String stringBuilder = "消息ID: " + message.getMessageProperties().getMessageId() + "；" +</span><br><span class="line">                       "优先级: " + message.getMessageProperties().getPriority() + "；" +</span><br><span class="line">                       "消息内容: " + new String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">               //告诉服务器收到这条消息 已经被我消费了 可以在队列删掉 这样以后就不会再发了 否则消息服务器以为这条消息没处理掉 后续还会在发</span><br><span class="line">               channel.basicAck(message.getMessageProperties().getDeliveryTag(),true);</span><br><span class="line">               log.info(stringBuilder);</span><br><span class="line">           } catch (IOException e) {</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               try {</span><br><span class="line">                   //当发生异常时丢弃这条消息，或者 另行处理</span><br><span class="line">                   channel.basicNack(message.getMessageProperties().getDeliveryTag(), false,false);</span><br><span class="line">                   System.out.println("receiver fail");</span><br><span class="line">               } catch (IOException e1) {</span><br><span class="line">                   e1.printStackTrace();</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>自定义 RabbitTemplate.ConfirmCallback 实现类</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitConfirmCallBack implements RabbitTemplate.ConfirmCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void confirm(CorrelationData correlationData, boolean ack, String cause) {</span><br><span class="line">        log.info("收到回调，成功发送到broker");</span><br><span class="line">        log.info("消息唯一标识: {}", correlationData.getId());</span><br><span class="line">        log.info("确认状态: {}", ack);</span><br><span class="line">        log.info("造成原因: {}", cause);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>自定义 RabbitTemplate.ConfirmCallback 实现类</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class RabbitReturnCallback  implements RabbitTemplate.ReturnCallback{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {</span><br><span class="line">        log.info("收到回调，交换机找不到队列");</span><br><span class="line">        log.info("消息主体: {}", message);</span><br><span class="line">        log.info("回复编码: {}", replyCode);</span><br><span class="line">        log.info("回复内容: {}", replyText);</span><br><span class="line">        log.info("交换器: {}", exchange);</span><br><span class="line">        log.info("路由键: {}", routingKey);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>添加回调，配置 rabbitTemplate</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class RabbitTemplateInitializingBean implements InitializingBean {</span><br><span class="line"></span><br><span class="line">    private final RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet(){</span><br><span class="line">        rabbitTemplate.setConfirmCallback(new RabbitConfirmCallBack());</span><br><span class="line">        rabbitTemplate.setReturnCallback(new RabbitReturnCallback());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootRabbitmqExampleApplicationTest {</span><br><span class="line">    @Resource</span><br><span class="line">    private HelloSender helloSender;</span><br><span class="line">    @Test</span><br><span class="line">    void content(){</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        int number = 1;</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">number</span> ; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">messageId</span> = <span class="string">UUID.randomUUID().toString().replace(</span>"<span class="attr">-</span>","");</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">exchange</span> = <span class="string">"priority.topic.exchange.name"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">routingKey</span> = <span class="string">"priority.topic.routingKey"</span>;</span></span><br><span class="line"><span class="tag">            <span class="attr">Integer</span> <span class="attr">priority</span> = <span class="string">r.nextInt(255);</span></span></span><br><span class="line"><span class="tag">            <span class="attr">String</span> <span class="attr">content</span> = <span class="string">"这是第["</span>+<span class="attr">i</span>+"]个消息";</span></span><br><span class="line"><span class="tag">            <span class="attr">helloSender.sendAndReceive</span>(<span class="attr">messageId</span>, <span class="attr">exchange</span>, <span class="attr">routingKey</span>, <span class="attr">priority</span>, <span class="attr">content</span>);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>结果：<br><img src="/2020/06/1591944668470/1591944668470/20200612180958.png" alt="20200612180958"></p>
<p>当删除交换机时的执行错误<br><img src="/2020/06/1591944668470/1591944668470/20200615110247.png" alt="20200615110247"></p>
<p>当删除队列时的执行错误<br><img src="/2020/06/1591944668470/1591944668470/20200615111036.png" alt="20200615111036"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>RabbitMq</category>
      </categories>
      <tags>
        <tag>rabbitMq</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置restTemplate访问https</title>
    <url>/2020/06/1592881660483/1592881660483/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  不需要版本号  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.security.KeyManagementException;</span><br><span class="line">import java.security.KeyStoreException;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">/**</span><br><span class="line"> * @ClassName: RestConfig</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/1 19:12</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">class RestTemplateConfig {</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {</span><br><span class="line">        TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true;</span><br><span class="line">        SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();</span><br><span class="line">        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();</span><br><span class="line">        //使用httpclient的factory</span><br><span class="line">        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setHttpClient(httpClient);</span><br><span class="line">        return new RestTemplate(requestFactory);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootApiApplicationTests {</span><br><span class="line">    @Resource</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads(){</span><br><span class="line">        String url = "https://www.baidu.com/";</span><br><span class="line">        String resp = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2020/06/1592881660483/1592881660483/20200623115758.png" alt="20200623115758"></p>
<p><a href="/2021/03/1614741214844/1614741214844/">RestTemplate更多使用</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>发布Java程序为Windows服务 （含有Java环境）一</title>
    <url>/2020/06/1592889892770/1592889892770/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>有时候我们希望我们java写的程序作为服务注册到系统中，Java Service Wrapper 是目前较为流行的将Java程序部署成Windows服务的解决方案</p>
<h3 id="下载serviceWrapper包"><a href="#下载serviceWrapper包" class="headerlink" title="下载serviceWrapper包"></a>下载serviceWrapper包</h3><p>网址：<a href="https://www.krenger.ch/blog/category/windows/" target="_blank" rel="noopener">https://www.krenger.ch/blog/category/windows/</a><br><img src="/2020/06/1592889892770/1592889892770/20200623133038.png" alt="20200623133038"></p>
<p>下载zip压缩文件<br><img src="/2020/06/1592889892770/1592889892770/20200623133123.png" alt="20200623133123"></p>
<h3 id="解压serviceWrapper包"><a href="#解压serviceWrapper包" class="headerlink" title="解压serviceWrapper包"></a>解压serviceWrapper包</h3><p>解压wrapper-windows-x86-64-3.5.43.zip<br><img src="/2020/06/1592889892770/1592889892770/20200623133832.png" alt="20200623133832"><br>解压出来的文件多，但有些不是必须要的</p>
<h3 id="注册一个简单的服务"><a href="#注册一个简单的服务" class="headerlink" title="注册一个简单的服务"></a>注册一个简单的服务</h3><p>准备一个目录 建议在非中文且不含有空格的目录下<br>目录结构如下：<br><img src="/2020/06/1592889892770/1592889892770/20200623134921.png" alt="20200623134921"><br>lang目录是存放支持其他语言的语言包，一般用不到<br>mylib目录是存放我们的程序包</p>
<p>然后将下载的wrapper目录下的文件拷贝到我们上面建的目录:</p>
<pre><code>···\bin\InstallTestWrapper-NT.bat           -&gt; D:\test\java-service-hello\bin\InstallTestWrapper-NT.bat
···\bin\StartTestWrapper-NT.bat             -&gt; D:\test\java-service-hello\bin\StartTestWrapper-NT.bat
···\bin\StopTestWrapper-NT.bat              -&gt; D:\test\java-service-hello\bin\StopTestWrapper-NT.bat
···\bin\TestWrapper.bat                     -&gt; D:\test\java-service-hello\bin\TestWrapper.bat
···\bin\UninstallTestWrapper-NT.bat         -&gt; D:\test\java-service-hello\bin\UninstallTestWrapper-NT.bat
···\bin\wrapper.exe                         -&gt; D:\test\java-service-hello\bin\wrapper.exe
···\conf\wrapper.conf                       -&gt; D:\test\java-service-hello\conf\wrapper.conf
···\lib\wrapper.jar                         -&gt; D:\test\java-service-hello\lib\wrapper.jar
···\lib\wrapper.dll                         -&gt; D:\test\java-service-hello\lib\wrapper.dll</code></pre><h3 id="java程序"><a href="#java程序" class="headerlink" title="java程序"></a>java程序</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.io.file.FileAppender;</span><br><span class="line">import cn.hutool.core.lang.UUID;</span><br><span class="line">public class JarHelloApp {</span><br><span class="line">	public static void main(String[] args) {</span><br><span class="line">		while (true) {</span><br><span class="line">			try {</span><br><span class="line">				System.out.println("Hello World!");</span><br><span class="line">				String str = UUID.fastUUID().toString();</span><br><span class="line">				System.out.println(str);</span><br><span class="line">				//每隔3秒创建文件并写入内容</span><br><span class="line">				FileAppender appender = new FileAppender(new File("D:\\test\\jar\\"+str+".txt"), 16, true);</span><br><span class="line">				TimeUnit.SECONDS.sleep(3);</span><br><span class="line">				appender.append(DateUtil.now());</span><br><span class="line">				appender.flush();</span><br><span class="line">				appender.toString();</span><br><span class="line">			} catch (Exception e) {</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>引入的依赖</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="java程序打包"><a href="#java程序打包" class="headerlink" title="java程序打包"></a>java程序打包</h3><p>由于采用eclipse所有打包流程：项目邮件 -&gt; Export -&gt; Java/Runnable JAR file -&gt; Next<br><img src="/2020/06/1592889892770/1592889892770/20200623142924.png" alt="20200623142924"></p>
<p>导出项目设置<br><img src="/2020/06/1592889892770/1592889892770/20200623143420.png" alt="20200623143420"></p>
<p>导出项目文件<br><img src="/2020/06/1592889892770/1592889892770/20200623144319.png" alt="20200623144319"></p>
<p>将程序打成的包以及自己程序依赖的包放到mylib<br><img src="/2020/06/1592889892770/1592889892770/20200623144449.png" alt="20200623144449"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>文件路径：D:\test\java-service-hello\conf\wrapper.conf<br>内容如下：</p>
<pre><code># jdk或者jre的java.exe路径，可通过环境变量获取
wrapper.java.command=%JAVA_HOME%/bin/java.exe
# wrapper.java.command=C:\Java\jre1.8.0_45\bin\java
# 日志级别
wrapper.java.command.loglevel=INFO
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp
# 执行的程序的main方法的类的路径
wrapper.app.parameter.1=com.demon.jar_hello.JarHelloApp
# 依赖的包，第一个是wrapper包，第二个是自己打的包以及程序依赖包
wrapper.java.classpath.1=../lib/wrapper.jar
wrapper.java.classpath.2=../mylib/*.jar
# 固定写法，依赖的wrapper的包
wrapper.java.library.path.1=../lib
# 日志配置 按照日期每天创建文件
wrapper.logfile=../logs/wrapper.YYYYMMDD.log
wrapper.logfile.rollmode=DATE
# 服务名称以及描述信息
wrapper.console.title=jar hello Server
wrapper.name=jarhelloserver
wrapper.displayname=jar hello Server
wrapper.description=jar hello Server
# 更多配置可对 jvm 配置</code></pre><h3 id="测试注册服务"><a href="#测试注册服务" class="headerlink" title="测试注册服务"></a>测试注册服务</h3><p>在服务目录下的bin目录下双击 TestWrapper.bat 文件，当程序执行正确时则表示可以注册服务<br>控制台测试<br><img src="/2020/06/1592889892770/1592889892770/20200623150257.png" alt="20200623150257"></p>
<h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><p>在服务目录下执行（管理员模式）</p>
<pre><code>注册服务命令
bin\wrapper.exe -i ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151136.png" alt="20200623151136"><br>服务结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151201.png" alt="20200623151201"></p>
<pre><code>启动服务命令
net start jarhelloserver
或者
bin\wrapper.exe -t ..\conf\wrapper.conf</code></pre><p>cmd结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151449.png" alt="20200623151449"><br>服务结果<br><img src="/2020/06/1592889892770/1592889892770/20200623151518.png" alt="20200623151518"></p>
<pre><code>停止服务命令
net stop jarhelloserver
或者
bin\wrapper.exe -p ..\conf\wrapper.conf</code></pre><p> cmd结果<br> <img src="/2020/06/1592889892770/1592889892770/20200623151717.png" alt="20200623151717"><br> 服务结果<br> <img src="/2020/06/1592889892770/1592889892770/20200623151743.png" alt="20200623151743">  </p>
<pre><code>删除服务命令
sc delete jarhelloserver
或者
bin\wrapper.exe -r ..\conf\wrapper.conf</code></pre><p>  cmd结果<br>  <img src="/2020/06/1592889892770/1592889892770/20200623151956.png" alt="20200623151956"></p>
<h3 id="扩展-一"><a href="#扩展-一" class="headerlink" title="扩展 一"></a>扩展 一</h3><p>由于使用命名操作复杂，故在服务目录创建bat文件</p>
<p>install-service.bat</p>
<pre><code>@echo off
start cmd /c "title install-service &amp;&amp; bin\wrapper.exe -i ..\conf\wrapper.conf"</code></pre><p>uninstall-service.bat</p>
<pre><code>@echo off
start cmd /c "title uninstall-service &amp;&amp; bin\wrapper.exe -r ..\conf\wrapper.conf"</code></pre><p>start-service.bat</p>
<pre><code>@echo off
start cmd /c "title start-service &amp;&amp; bin\wrapper.exe -t ..\conf\wrapper.conf"</code></pre><p>stop-service.bat</p>
<pre><code>@echo off
start cmd /c "title stop-service &amp;&amp; bin\wrapper.exe -p ..\conf\wrapper.conf"</code></pre><h3 id="扩展-二"><a href="#扩展-二" class="headerlink" title="扩展 二"></a>扩展 二</h3><p>我们可以用上面的service wrapper的bin包中的bat文件进行服务操作<br>将下载解压后的wrapper-windows\bin中的部分文件复制到我们的服务\bin目录下<br><img src="/2020/06/1592889892770/1592889892770/20200623161942.png" alt="20200623161942"><br>我们只需要点击上面的bat文件即可实现上面的操作：</p>
<pre><code>安装服务：InstallTestWrapper-NT.bat
查询服务：QueryTestWrapper-NT.bat
开启服务：StartTestWrapper-NT.bat
停止服务：StopTestWrapper-NT.bat
测试服务：TestWrapper.bat
卸载服务：UninstallTestWrapper-NT.bat</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/06/1592898236483/1592898236483/">发布Java程序为Windows服务 （不含有Java环境）二</a><br><a href="/2020/06/1592899073321/1592899073321/">发布Java程序为Windows服务 （修改配置参数，新增对 jvm 的配置）三</a><br><a href="/2020/11/1604299054941/1604299054941/">发布Java程序为Windows服务 - Windows Service Wrapper 四</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>发布Java程序为Windows服务 （不含有Java环境）二</title>
    <url>/2020/06/1592898236483/1592898236483/</url>
    <content><![CDATA[<p>前面在有Java环境的情况下的设置，现在假设我们不存在Java运行环境，也就是没有JRE与JDK，<br>所以需要拷贝java安装目录下的JRE（包含bin目录和相关lib）目录到需要的服务目录下</p>
<h3 id="拷贝JRE"><a href="#拷贝JRE" class="headerlink" title="拷贝JRE"></a>拷贝JRE</h3><p>JRE目录<br><img src="/2020/06/1592898236483/1592898236483/20200623154737.png" alt="20200623154737"><br>拷贝JRE目录到服务目录<br><img src="/2020/06/1592898236483/1592898236483/20200623154926.png" alt="20200623154926"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>利用拷贝过去的jre目录下的jar包和bin\java.exe，修改wrapper.java.command的值</p>
<pre><code>wrapper.java.command=../jre1.8.0_45/bin/java.exe</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/06/1592889892770/1592889892770/">发布Java程序为Windows服务 （含有Java环境）一</a><br><a href="/2020/06/1592899073321/1592899073321/">发布Java程序为Windows服务 （修改配置参数，新增对 jvm 的配置）三</a><br><a href="/2020/11/1604299054941/1604299054941/">发布Java程序为Windows服务 - Windows Service Wrapper 四</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>发布Java程序为Windows服务 （修改配置参数，新增对 jvm 的配置）三</title>
    <url>/2020/06/1592899073321/1592899073321/</url>
    <content><![CDATA[<p>前面是使用的配置会导致JVM不断重启，需要加JVM参数以及设置，同时设置服务开机启动；</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新增配置参数如下：</p>
<pre><code>wrapper.jmx=false
wrapper.on_exit.0=SHUTDOWN
wrapper.on_exit.default=RESTART
wrapper.ntservice.interactive = true
# 服务开机启动
wrapper.ntservice.starttype=AUTO_START
wrapper.tray = true
# 监测JVM死锁
wrapper.java.monitor.deadlock = true
wrapper.java.monitor.heap = true
wrapper.java.monitor.gc.restart = true
# Java Heap 初始化大小(单位：MB)
wrapper.java.initmemory=128
# Java Heap 最大值(单位：MB)
wrapper.java.maxmemory=128
# 32/64位选择，true为自动选择
wrapper.java.additional.auto_bits=TRUE</code></pre><h3 id="检测JVM参数"><a href="#检测JVM参数" class="headerlink" title="检测JVM参数"></a>检测JVM参数</h3><p>可以用jps+jmap监测即可<br>jps:<br><img src="/2020/06/1592899073321/1592899073321/20200623161416.png" alt="20200623161416"><br>jmap -heap xxxxx<br><img src="/2020/06/1592899073321/1592899073321/20200623161506.png" alt="20200623161506"></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/06/1592889892770/1592889892770/">发布Java程序为Windows服务 （含有Java环境）一</a><br><a href="/2020/06/1592898236483/1592898236483/">发布Java程序为Windows服务 （不含有Java环境）二</a><br><a href="/2020/11/1604299054941/1604299054941/">发布Java程序为Windows服务 - Windows Service Wrapper 四</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka单机搭建 - 使用内置Zookeeper</title>
    <url>/2020/07/1595581721604/1595581721604/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在刚开始学习Kafka的时候，安装Kafka时说Kafka依赖ZooKeeper，所以想要安装Kafka必须先安装ZooKeeper。<br>但是在下载Kafka的时候，官网上说，Kafka 0.5.x版本以上已经自带ZooKeeper，不需要自己安装ZooKeeper。<br>但在使用自带ZooKeeper也没有啥缺陷，反倒针对特定版本人家 Kafka 已经验证过其稳定性了。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br><img src="/2020/07/1595581721604/1595581721604/20200724172452.png" alt="20200724172452"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压文件<br>打开 kafka_2.12-2.5.0\config<br>从文本编辑器里打开 server.properties,添加或者修改内容</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">listeners=PLAINTEXT://10.200.47.142:9092</span><br><span class="line">log.dirs=D:\\kafka_2.12-2.5.0\\logs\\kafka</span><br><span class="line">num.partitions=4</span><br><span class="line">zookeeper.connect=127.0.0.1:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure></div>
<p>端口号可以被任意修改。如果端口号设置为小于1024，那么kafka需要以root身份启动，不指定的话，按照默认9092<br>【service.properties】port = 19092<br>【connect-distributed.properties 】bootstrap.servers=localhost:19092<br>【producer.properties 】bootstrap.servers=localhost:19092<br>【connect-standalone.properties 】bootstrap.servers=localhost:19092<br>【consumer.properties 】bootstrap.servers=localhost:19092</p>
<p>从文本编辑器里打开 zookeeper.properties,添加或者修改内容</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在根目录下编写bat文件启动：</p>
<p>1.start-zookeeper.bat内容如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title zookeeper-21810 &amp;&amp; .\bin\windows\zookeeper-server-start .\config\zookeeper.properties"</span><br></pre></td></tr></tbody></table></figure></div>
<p>2.start-kafka.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start cmd /c "title kafka_2.11-2.4.1-9092 &amp;&amp; .\bin\windows\kafka-server-start.bat .\config\server.properties"</span><br></pre></td></tr></tbody></table></figure></div>
<p>按照顺序启动，即可执行，</p>
<p><img src="/2020/07/1595581721604/1595581721604/20200724175212.png" alt="20200724175212"><br><img src="/2020/07/1595581721604/1595581721604/20200724175232.png" alt="20200724175232"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka集群搭建 - 使用内置Zookeeper</title>
    <url>/2020/07/1595582052033/1595582052033/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br>下载完成后复制一式三份，完成集群部署至少需要三台以及三台以上的服务。</p>
<p>kafka版本:kafka_2.12-2.5.0<br>三台主机IP 127.0.0.1、127.0.0.2、127.0.0.3</p>
<h3 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka配置</h3><h4 id="第一台"><a href="#第一台" class="headerlink" title="第一台"></a>第一台</h4><p>server.properties：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="第二台"><a href="#第二台" class="headerlink" title="第二台"></a>第二台</h4><p>server.properties：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://127.0.0.2:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="第三台"><a href="#第三台" class="headerlink" title="第三台"></a>第三台</h4><p>server.properties：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"># 唯一值</span><br><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://127.0.0.3:9092</span><br><span class="line"># 建议填写服务器的数量值</span><br><span class="line">num.partitions=3 </span><br><span class="line"># 其他zk服务的连接</span><br><span class="line">zookeeper.connect=127.0.0.1:2181,127.0.0.2:2181,127.0.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=30000</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="zookeeper配置"><a href="#zookeeper配置" class="headerlink" title="zookeeper配置"></a>zookeeper配置</h3><p>zookeeper可统一配置，zookeeper.properties：<br> </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">dataDir=D:\\kafka_2.12-2.5.0\\data\\zookeeper</span><br><span class="line">dataLogDir=D:\\kafka_2.12-2.5.0\\logs\\zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line"># maxClientCnxns = 0 # 注释掉该配置</span><br><span class="line">admin.enableServer=false</span><br><span class="line">#设置连接参数，添加如下配置</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">#设置broker Id的服务地址</span><br><span class="line">server.1=127.0.0.1:2888:3888</span><br><span class="line">server.2=127.0.0.2:2888:3888</span><br><span class="line">server.3=127.0.0.3:2888:3888</span><br></pre></td></tr></tbody></table></figure></div><br>同时在zookeeper数据目录dataDir下添加id配置，在各台服务的zookeeper数据目录添加myid文件且无后缀名，写入各自服务broker.id属性值，<br><img src="/2020/07/1595582052033/1595582052033/20200725114405.png" alt="20200725114405"><br><img src="/2020/07/1595582052033/1595582052033/20200725114520.png" alt="20200725114520"><br><img src="/2020/07/1595582052033/1595582052033/20200725114552.png" alt="20200725114552"><p></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka使用 （Java普通调用）</title>
    <url>/2020/07/1595649722982/1595649722982/</url>
    <content><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="Topic操作"><a href="#Topic操作" class="headerlink" title="Topic操作"></a>Topic操作</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.CommonClientConfigs;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.CreateTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.DeleteTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.ListTopicsResult;</span><br><span class="line">import org.apache.kafka.clients.admin.NewTopic;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Topic操作</span><br><span class="line"> */</span><br><span class="line">public class CreateTopics {</span><br><span class="line">	private static AdminClient adminClient = null;</span><br><span class="line">	/**</span><br><span class="line">	 * 初始化adminClient</span><br><span class="line">	 */</span><br><span class="line">	@Before</span><br><span class="line">	public  void getAdminClient() {</span><br><span class="line">		Properties props = new Properties();</span><br><span class="line">		props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");</span><br><span class="line">		adminClient = AdminClient.create(props);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获取所有Topic</span><br><span class="line">	 */</span><br><span class="line">	@Test</span><br><span class="line">	public void getTopicList() {</span><br><span class="line">		try {</span><br><span class="line">			ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">			Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">			for (String topic : topics) {</span><br><span class="line">				System.out.println(topic);</span><br><span class="line">			}</span><br><span class="line">		} catch (InterruptedException | ExecutionException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 创建Topic 创建了3个名为"first", "second","third"，分区数为1，复制因子为1的Topic.</span><br><span class="line">	 * 创建完成，返回null</span><br><span class="line">	 */</span><br><span class="line">	@Test</span><br><span class="line">	public  void getCreateTopic() {</span><br><span class="line">		ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span>();</span><br><span class="line">		topics.add(new NewTopic("test", 4, (short) 1));</span><br><span class="line">        topics.add(new NewTopic("first", 4, (short) 1));</span><br><span class="line">		topics.add(new NewTopic("second", 4, (short) 1));</span><br><span class="line">		topics.add(new NewTopic("third", 4, (short) 1));</span><br><span class="line">		CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">		try {</span><br><span class="line">			System.out.println(result.all().get());</span><br><span class="line">		} catch (InterruptedException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		} catch (ExecutionException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 删除Topic</span><br><span class="line">	 */</span><br><span class="line">	@Test</span><br><span class="line">	public  void getDeleteTopic() {</span><br><span class="line">		DeleteTopicsResult deleteTopicsResult =adminClient.deleteTopics(Collections.singleton("test"));</span><br><span class="line">		System.out.println(JSONObject.toJSONString(deleteTopicsResult));</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 关闭连接</span><br><span class="line">	 */</span><br><span class="line">	@After</span><br><span class="line">	public  void afterClass() {</span><br><span class="line">		adminClient.close();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="普通生产者"><a href="#普通生产者" class="headerlink" title="普通生产者"></a>普通生产者</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">public static void testProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("retries", 0);</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span>(props);</span><br><span class="line">    for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">        producer.send(new ProducerRecord&lt;String, String&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">    }</span><br><span class="line">    producer.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="事务生产者"><a href="#事务生产者" class="headerlink" title="事务生产者"></a>事务生产者</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">public static void testTransactionProducer(String topic) {</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">    props.put("transactional.id", "my-transactional-id");</span><br><span class="line">    props.put("acks", "all");</span><br><span class="line">    props.put("batch.size", 16384);</span><br><span class="line">    KafkaProducer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> producer = new KafkaProducer<span class="tag">&lt;&gt;</span>(props, new StringSerializer(),new StringSerializer());</span><br><span class="line">    producer.initTransactions();</span><br><span class="line">    try {</span><br><span class="line">        producer.beginTransaction();</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">3</span>; <span class="attr">i</span>++) {</span></span><br><span class="line">            producer.send(new ProducerRecord&lt;&gt;(topic, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        }</span><br><span class="line">        producer.commitTransaction();</span><br><span class="line">    } catch (ProducerFencedException | OutOfOrderSequenceException | AuthorizationException e) {</span><br><span class="line">        // We can't recover from these exceptions, so our only option is to close the</span><br><span class="line">        // producer and exit.</span><br><span class="line">        producer.close();</span><br><span class="line">    } catch (KafkaException e) {</span><br><span class="line">        // For all other exceptions, just abort the transaction and try again.</span><br><span class="line">        producer.abortTransaction();</span><br><span class="line">    } finally {</span><br><span class="line">        producer.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer {</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) {</span><br><span class="line">		Properties props = new Properties();</span><br><span class="line">		// 定义kakfa 服务的地址，不需要将所有broker指定上 </span><br><span class="line">		props.put("bootstrap.servers", "127.0.0.1:9092");</span><br><span class="line">		// 制定consumer group </span><br><span class="line">		props.put("group.id", "custom_group_id");</span><br><span class="line">		// 是否自动确认offset </span><br><span class="line">		props.put("enable.auto.commit", "true");</span><br><span class="line">		// 自动确认offset的时间间隔 </span><br><span class="line">		props.put("auto.commit.interval.ms", "1000");</span><br><span class="line">		// key的序列化类</span><br><span class="line">		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">		// value的序列化类 </span><br><span class="line">		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><br><span class="line">		// 定义consumer </span><br><span class="line">		KafkaConsumer<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> consumer = new KafkaConsumer<span class="tag">&lt;&gt;</span>(props);</span><br><span class="line">		// 消费者订阅的topic, 可同时订阅多个 </span><br><span class="line">		consumer.subscribe(Arrays.asList("test","first", "second","third"));</span><br><span class="line">		while (true) {</span><br><span class="line">			// 读取数据，读取超时时间为100ms </span><br><span class="line">			ConsumerRecords<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> records = consumer.poll(Duration.ofMillis(100));</span><br><span class="line">			for (ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> record : records)</span><br><span class="line">				System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="集群使用"><a href="#集群使用" class="headerlink" title="集群使用"></a>集群使用</h3><p>在配置中将bootstrap.servers，修改以下方式即可，需要将所有broker指定写上<br> </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">props.put("bootstrap.servers", "127.0.0.1:9092,127.0.0.2:9092,127.0.0.3:9092");</span><br></pre></td></tr></tbody></table></figure></div><p></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中安装MyCat环境</title>
    <url>/2020/08/1596536908607/1596536908607/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="http://www.mycat.org.cn/" target="_blank" rel="noopener">Mycat数据库分库分表中间件</a>，点击下载1.6.7.3 的Linux稳定版本<br>链接：<a href="http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz" target="_blank" rel="noopener">http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz</a></p>
<p>待续···</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>MyCat</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows10中安装MyCat环境</title>
    <url>/2020/08/1596610285582/1596610285582/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="http://www.mycat.org.cn/" target="_blank" rel="noopener">Mycat数据库分库分表中间件</a>，点击下载1.6.7.3 的Windows稳定版本<br>链接：<a href="http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-win.tar.gz" target="_blank" rel="noopener">http://dl.mycat.org.cn/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-win.tar.gz</a></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>目录如下：<br><img src="/2020/08/1596610285582/1596610285582/20200806110425.png" alt="20200806110425"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于软件本身就是绿色版本，只需放在指定目录下即可，</p>
<pre><code>mycat：
    bin：命令文件
    catlet：空的,扩展
    conf：配置文件(server.xml,schema.xml,rule.xml等)
    lib：依赖的jar包
    logs：启动日志</code></pre><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在DB中创建数据库（test_mycat），创建表（t_user）<br><img src="/2020/08/1596610285582/1596610285582/20200806113753.png" alt="20200806113753"></p>
<h4 id="修改xml配置"><a href="#修改xml配置" class="headerlink" title="修改xml配置"></a>修改xml配置</h4><p>server.xml，rule.xml 不改变，<br>schema.xml改动如下：</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;
&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;

    &lt;!-- 设置表的存储方式.schema name="TESTDB" 与 server.xml中的 TESTDB 设置一致  --&gt;  
    &lt;schema name="TESTDB" checkSQLschema="true" sqlMaxLimit="100"&gt;
        &lt;!-- auto sharding by id (long) --&gt;
        &lt;table name="t_user" dataNode="dn1"/&gt;
    &lt;/schema&gt;

    &lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt;  
    &lt;dataNode name="dn1" dataHost="localhost1" database="test_mycat" /&gt;

    &lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt;  
    &lt;dataHost name="localhost1" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100"&gt;
        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;
        &lt;!-- can have multi write hosts --&gt;
        &lt;writeHost host="hostM1" url="127.0.0.1:3306" user="root"  password="root"&gt;

        &lt;/writeHost&gt;
    &lt;/dataHost&gt;

&lt;/mycat:schema&gt;</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h4><p>双击bin目录下的startup_nowrap.bat文件<br><img src="/2020/08/1596610285582/1596610285582/20200806112437.png" alt="20200806112437"></p>
<p>出现以下界面提示则启动成功：<br><img src="/2020/08/1596610285582/1596610285582/20200806112633.png" alt="20200806112633"></p>
<h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><p>以管理员的模式打开CMD命令,进入根目录下<br><img src="/2020/08/1596610285582/1596610285582/20200806130746.png" alt="20200806130746"></p>
<h5 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h5><p><img src="/2020/08/1596610285582/1596610285582/20200806130757.png" alt="20200806130757"></p>
<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p><img src="/2020/08/1596610285582/1596610285582/20200806135609.png" alt="20200806135609"></p>
<p>当出现此启动错误：<br><img src="/2020/08/1596610285582/1596610285582/20200806135125.png" alt="20200806135125"><br>则需要将 -XX:MaxPermSize=512M 移除，该参数在jdk1.8版本中已放弃使用，<br><img src="/2020/08/1596610285582/1596610285582/20200806135305.png" alt="20200806135305"></p>
<h5 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h5><pre><code>mycat.bat { 
    console :       Wrapper控制台
    start :         服务启动
    pause :         服务暂停
    resume :        服务恢复
    stop :          服务停止
    restart :       服务重启
    install :       服务安装
    remove :        服务移除
    status :        服务状态
}</code></pre><h3 id="Navicat连接"><a href="#Navicat连接" class="headerlink" title="Navicat连接"></a>Navicat连接</h3><p>默认端口：8066<br>用户名：root<br>密码：server.xml的user配置，本次为 123456<br><img src="/2020/08/1596610285582/1596610285582/20200806114232.png" alt="20200806114232"></p>
<p>查看连接：<br><img src="/2020/08/1596610285582/1596610285582/20200806114126.png" alt="20200806114126"></p>
<p>查看数据：<br><img src="/2020/08/1596610285582/1596610285582/20200806130103.png" alt="20200806130103"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>MyCat</tag>
      </tags>
  </entry>
  <entry>
    <title>MyCat 分库配置</title>
    <url>/2020/08/1596694227482/1596694227482/</url>
    <content><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>分别创建三个数据库：testdb_0，testdb_1，testdb_2</p>
<h3 id="MyCat配置"><a href="#MyCat配置" class="headerlink" title="MyCat配置"></a>MyCat配置</h3><p>server.xml配置不变，</p>
<pre><code>&lt;user name="root" defaultAccount="true"&gt;
    &lt;property name="password"&gt;123456&lt;/property&gt;
    &lt;property name="schemas"&gt;TESTDB&lt;/property&gt;
&lt;/user&gt;</code></pre><p>schema.xml配置如下：</p>
<pre><code>&lt;!-- 设置表的存储方式.schema name="TESTDB" 与 server.xml中的 TESTDB 设置一致  --&gt;  
&lt;schema name="TESTDB" checkSQLschema="true" sqlMaxLimit="100"&gt;  
    &lt;!-- 分片规则：sharding-by-intfile  --&gt;  
    &lt;table name="t_users" dataNode="node_db00,node_db01,node_db02" rule="sharding-by-intfile"&gt;&lt;/table&gt;
&lt;/schema&gt;  

&lt;!-- 设置dataNode 对应的数据库,及 mycat 连接的地址dataHost --&gt;  
&lt;dataNode name="node_db00" dataHost="dataHost01" database="testdb_0" /&gt;  
&lt;dataNode name="node_db01" dataHost="dataHost01" database="testdb_1" /&gt;  
&lt;dataNode name="node_db02" dataHost="dataHost01" database="testdb_2" /&gt; 

&lt;!-- mycat 逻辑主机dataHost对应的物理主机.其中也设置对应的mysql登陆信息 --&gt;  
&lt;dataHost name="dataHost01" maxCon="1000" minCon="10" balance="1" writeType="0" dbType="mysql" dbDriver="native"&gt;  
        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  
        &lt;writeHost host="hostM1" url="127.0.0.1:3306" user="root" password="root"/&gt;
&lt;/dataHost&gt;  </code></pre><p>rule.xml配置如下：</p>
<pre><code>&lt;tableRule name="sharding-by-intfile"&gt;
    &lt;rule&gt;
        &lt;!-- columns:对应需要进行匹配规则的字段  --&gt;  
        &lt;columns&gt;sex&lt;/columns&gt;
        &lt;algorithm&gt;hash-int&lt;/algorithm&gt;
    &lt;/rule&gt;
&lt;/tableRule&gt;

&lt;function name="hash-int" class="io.mycat.route.function.PartitionByFileMap"&gt;
    &lt;property name="mapFile"&gt;partition-hash-int.txt&lt;/property&gt;
    &lt;property name="type"&gt;1&lt;/property&gt; 
    &lt;property name="defaultNode"&gt;0&lt;/property&gt;
&lt;/function&gt;</code></pre><p>说明：函数配置中，type默认值为0，0表示Integer，非零表示String， 所有的节点配置都是从defaultNode=0开始，及0代表第一个节点。<br>defaultNode 默认节点:小于0表示不设置默认节点，大于等于0表示设置默认节点,默认节点的作用;<br>枚举分片时,如果碰到不识别的枚举值，就让它路由到默认节点;<br>如果不配置默认节点（defaultNode值小于0表示不配置默认节点），碰到不识别的枚举值就会报错;</p>
<p>partition-hash-int.txt</p>
<pre><code>#10000=0
#10010=1
m=1
w=2</code></pre><p>说明：[sex=m]的数据放入node_db01，[sex=w]的数据放入node_db02，其它的数据[mw]放入node_db00，<br>0：表示第一个dataNode[name=node_db00]节点，以下标选择<br>1：表示第二个dataNode[name=node_db01]节点，以下标选择<br>2：表示第三个dataNode[name=node_db02]节点，以下标选择<br>注意以中文的分片规则，后续，</p>
<p>修改配置完成后，重启mycat服务，通过mycat插入数据即可看到结果</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><pre><code>mysql -uroot -p123456 -P8066 -h 127.0.0.1</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151330.png" alt="20200806151330"></p>
<pre><code>mysql&gt; show databases;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151352.png" alt="20200806151352"></p>
<pre><code>mysql&gt;  use TESTDB;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151541.png" alt="20200806151541"></p>
<pre><code>mysql&gt; DROP TABLE IF EXISTS `t_users`;
mysql&gt; CREATE TABLE `t_users` (
   `id` int(11) NOT NULL AUTO_INCREMENT,
   `name` varchar(50) DEFAULT NULL,
   `sex` varchar(10) DEFAULT NULL,
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151603.png" alt="20200806151603">   </p>
<pre><code>mysql&gt; set names gbk;
mysql&gt; insert into t_users(`name`,sex)values('张三','m');
mysql&gt; insert into t_users(`name`,sex)values('李四','w');
mysql&gt; insert into t_users(`name`,sex)values('王五','mw');</code></pre><p><img src="/2020/08/1596694227482/1596694227482/20200806151636.png" alt="20200806151636">  </p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>分片实现<br><img src="/2020/08/1596694227482/1596694227482/20200806155344.png" alt="20200806155344"></p>
<p>数据结果<br><img src="/2020/08/1596694227482/1596694227482/20200806154946.png" alt="20200806154946"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MyCat</category>
      </categories>
      <tags>
        <tag>myCat</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.3.x 整合 thymeleaf</title>
    <url>/2020/08/1597306338000/1597306338000/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>Thymeleaf (主推)<br>轻量级的模板引擎（负责逻辑业务的不推荐，解析DOM或者XML会占用多的内存）<br>可以直接在浏览器中打开且正确显示模板页面<br>直接是html结尾，直接编辑</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-thymeleaf</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br><span class="line">  # 配置模版引擎, 是否开启thymeleaf缓存,本地为false，生产建议为true</span><br><span class="line">  thymeleaf: </span><br><span class="line">    # 是否启用模板缓存,开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">    cache: false</span><br><span class="line">    # 是否检查模板位置是否存在。</span><br><span class="line">    check-template: true</span><br><span class="line">    # 是否为Web框架启用Thymeleaf视图分辨率。</span><br><span class="line">    enabled: true</span><br><span class="line">    # 编码格式, 默认UTF-8</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    # 应用于模板的模板模式。另请参阅Thymeleaf的TemplateMode枚举。</span><br><span class="line">    mode: HTML</span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">    # 后缀 默认 .html</span><br><span class="line">    suffix: .html</span><br><span class="line">    # 模板文件存放位置  , 默认 classpath:/templates/</span><br><span class="line">    prefix: classpath:/templates/</span><br></pre></td></tr></tbody></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">src/main/java/com/demon/freemarker/controller</span><br><span class="line">    IndexController.java</span><br><span class="line">src/main/resources/templates</span><br><span class="line">    index2.html</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>IndexController.java</p>
<pre><code>@Controller
public class IndexController {
    /**
     * 路由 /index2
     * 返回 index2 这里默认配置自动映射到目录(templages/)下的index2.html
     */
    @GetMapping("/index2")
    public String index(Model model){
        model.addAttribute("content","hello thymeleaf");
        return "index2";
    }
}</code></pre><p>index.html</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Thymeleaf&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
this is welcome &lt;span th:text="${content}"&gt;&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p><img src="/2020/08/1597306338000/1597306338000/20200813175610.png" alt="20200813175610"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.3.x 整合 freemarker</title>
    <url>/2020/08/1597309130215/1597309130215/</url>
    <content><![CDATA[<p>Freemarker<br>FreeMarker Template Language（FTL）  文件一般保存为 xxx.ftl<br>严格依赖MVC模式，不依赖Servlet容器（不占用JVM内存）<br>内建函数</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 将freemarker的html内容写入生成的文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>yml内容：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-freemarker</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br><span class="line">  # 配置模版引擎</span><br><span class="line">  freemarker:</span><br><span class="line">    cache: false #是否启用模板缓存</span><br><span class="line">    enabled: true #是否启用freemarker</span><br><span class="line">    template-loader-path: classpath:/templates/ #设定模板的加载路径，多个以逗号分隔</span><br><span class="line">    suffix: .ftl #设定模板的后缀</span><br><span class="line">    content-type: text/html</span><br><span class="line">    check-template-location: true #是否检查模板位置是否存在</span><br><span class="line">    charset: UTF-8 #模板编码</span><br><span class="line">    #一些常用配置</span><br><span class="line">    allow-request-override: false #是否允许HttpServletRequest属性覆盖(隐藏)控制器生成的同名模型属性</span><br><span class="line">    allow-session-override: false #是否允许HttpSession属性覆盖(隐藏)控制器生成的同名模型属性</span><br><span class="line">    expose-request-attributes: false #设定所有request的属性在merge到模板的时候，是否要都添加到model中</span><br><span class="line">    expose-session-attributes: false #是否在merge模板的时候，将HttpSession属性都添加到model中</span><br><span class="line">    expose-spring-macro-helpers: true #设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用</span><br><span class="line">    prefer-file-system-access: true #是否优先从文件系统加载template，以支持热加载，默认为true</span><br></pre></td></tr></tbody></table></figure></div>

<p>文件路径：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">src/main/java/com/demon/freemarker/controller</span><br><span class="line">    IndexController.java</span><br><span class="line">src/main/resources/templates</span><br><span class="line">    index1.ftl</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>IndexController.java</p>
<pre><code>@Controller
public class IndexController {
    /**
     * 路由 /index1
     * 返回 index1 这里默认配置自动映射到目录(templages/)下的index1.ftl
     */
    @GetMapping("/index1")
    public String index(Model model){
        model.addAttribute("content","hello freemarker");
        return "index1";
    }
}</code></pre><p>index.ftl</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;freemarker&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
this is welcome ${content}
&lt;/body&gt;
&lt;/html&gt;</code></pre><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p><img src="/2020/08/1597309130215/1597309130215/20200813175553.png" alt="20200813175553"></p>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用freemarker模板引擎生成静态的html文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import freemarker.template.Configuration;</span><br><span class="line">import freemarker.template.Template;</span><br><span class="line">import freemarker.template.TemplateException;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class StaticServiceImpl implements StaticService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Configuration configuration;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void createIndexHtml(String ftlName,Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params,File outFile) {</span><br><span class="line">        InputStream inputStream = null;</span><br><span class="line">        FileOutputStream fileOutputStream = null;</span><br><span class="line">        try {</span><br><span class="line">            //获取模板</span><br><span class="line">            Template template = configuration.getTemplate(ftlName+".ftl");</span><br><span class="line">            // 静态化页面内容</span><br><span class="line">            String content = FreeMarkerTemplateUtils.processTemplateIntoString(template, params);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">            inputStream = IOUtils.toInputStream(content, "UTF-8");</span><br><span class="line">            // 输出文件</span><br><span class="line">            FileUtils.forceMkdirParent(outFile);</span><br><span class="line">            fileOutputStream = new FileOutputStream(outFile);</span><br><span class="line">            IOUtils.copy(inputStream, fileOutputStream);</span><br><span class="line">        } catch (IOException | TemplateException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } finally {</span><br><span class="line">            // 关闭流</span><br><span class="line">            if(inputStream != null){</span><br><span class="line">                try {</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                } finally {</span><br><span class="line">                    if(fileOutputStream != null){</span><br><span class="line">                        try {</span><br><span class="line">                            fileOutputStream.close();</span><br><span class="line">                        } catch (IOException e) {</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>测试：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class FreemarkerApplicationTests {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private StaticService staticService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        String ftlName = "index1";</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        params.put("content", "这是一个freemarker生成的html文件");</span><br><span class="line">        File outFile = new File("d:/test/page/freemarker.html");</span><br><span class="line">        staticService.createIndexHtml(ftlName,params,outFile);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>控制台的打印输出：<br><img src="/2020/08/1597309130215/1597309130215/20200813180652.png" alt="20200813180652"></p>
<p>生成本地文件输出：<br><img src="/2020/08/1597309130215/1597309130215/20200813181255.png" alt="20200813181255"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 服务器证书SSL安装</title>
    <url>/2020/09/1599456487885/1599456487885/</url>
    <content><![CDATA[<h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>初始安装nginx的时候没有开启ssl功能 </p>
<p>查看是否开启ssl模块</p>
<pre><code>/usr/local/nginx/sbin/nginx -V</code></pre><p><img src="/2020/09/1599456487885/1599456487885/20200907133809.png" alt="20200907133809"><br>当未出现红框内的内部分，则表示没有开启ssl功能 </p>
<h3 id="开启ssl模块"><a href="#开启ssl模块" class="headerlink" title="开启ssl模块"></a>开启ssl模块</h3><p>找到安装的源码包(带有版本号的位置)</p>
<pre><code>cd /usr/local/software/nginx-1.18.0
./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
make    # 这里不要进行make install，否则就是覆盖安装
cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak       # 备份
/usr/local/nginx/sbin/nginx -s stop # 停止服务
cp ./objs/nginx /usr/local/nginx/sbin/  # 将刚刚编译好的nginx覆盖掉原有的nginx</code></pre><p><img src="/2020/09/1599456487885/1599456487885/20200907135626.png" alt="20200907135626"><br>当在此查看 /usr/local/nginx/sbin/nginx -V ，则表示开启成功</p>
<h3 id="下载SSL证书"><a href="#下载SSL证书" class="headerlink" title="下载SSL证书"></a>下载SSL证书</h3><p>将已获取到的 1.证书文件和 2.私钥文件从本地目录拷贝到 Nginx 服务器的 /usr/local/nginx/conf 目录下<br>此处为 Nginx 默认安装目录，请根据实际情况操作</p>
<h3 id="配置Https"><a href="#配置Https" class="headerlink" title="配置Https"></a>配置Https</h3><pre><code>user  root;
worker_processes  1;
error_log /usr/local/nginx/logs/nginx_error.log crit; 
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    # 开启gzip压缩
    gzip  on;
    gzip_comp_level  5;
    gzip_min_length  1024;
    gzip_types   text/plain application/x-javascript text/css application/xml text/javascript  image/jpeg image/gif image/png;
    # 隐藏nginx版本信息
    server_tokens off;

    server {
        listen       80;
        server_name  www.zhuqiaolun.com;

        if ($scheme = http ) {
            return  301 https://www.zhuqiaolun.com$request_uri;
        }
        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   html;
        }

    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name    www.zhuqiaolun.com;
        root html; 
        index index.html index.htm;   
        ssl_certificate www.zhuqiaolun.com.crt;
        ssl_certificate_key www.zhuqiaolun.com.key;
        ssl_session_timeout    10m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache shared:SSL:10m;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Nginx SSL性能调优</p>
<pre><code>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中安装Tomcat环境</title>
    <url>/2020/09/1599532777229/1599532777229/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>tomcat 官网地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a><br>tomcat 官网版本文件地址：<a href="https://archive.apache.org/dist/tomcat/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/</a><br>tomcat 指定版本下载地址：<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/</a><br>Linux在线下载：</p>
<pre><code>wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</code></pre><p><img src="/2020/09/1599532777229/1599532777229/20200908111621.png" alt="20200908111621"></p>
<p>下载离线版本：<br>点击红框区域,即可下载文件（免安装版本）<br><img src="/2020/09/1599532777229/1599532777229/20200908110142.png" alt="20200908110142"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>创建安装目录，并进入安装目录</p>
<pre><code>mkdir /usr/local/tomcat
cd /usr/local/tomcat/
rz apache-tomcat-9.0.27.tar.gz # 上传文件（如采用在线下载，则无需此步骤）
tar -zxvf apache-tomcat-9.0.27.tar.gz # 解压文件
cd /usr/local/tomcat/apache-tomcat-9.0.27 # 进入目录</code></pre><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>启动：</p>
<pre><code>/usr/local/tomcat/apache-tomcat-9.0.27/bin/startup.sh</code></pre><p>停止：</p>
<pre><code>/usr/local/tomcat/apache-tomcat-9.0.27/bin/shutdown.sh</code></pre><p>实时日志</p>
<pre><code>cd /usr/local/tomcat/apache-tomcat-9.0.27/logs
tail -f catalina.out</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><pre><code>curl -I http://127.0.0.1:8080</code></pre><p>返回以下内容则表示启动成功</p>
<pre><code>HTTP/1.1 200 
Content-Type: text/html;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 08 Sep 2020 03:22:06 GMT</code></pre><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><pre><code>cd /usr/local/tomcat/apache-tomcat-9.0.27/webapps</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>配置tomcat下的conf目录下的文件</title>
    <url>/2020/09/1599535661189/1599535661189/</url>
    <content><![CDATA[<h3 id="启用manager"><a href="#启用manager" class="headerlink" title="启用manager"></a>启用manager</h3><p>1.打开conf目录下的文件 tomcat-users.xml，在尾部添加一下内容:</p>
<pre><code>&lt;role rolename="tomcat"/&gt;
&lt;role rolename="role1"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-status"/&gt; 
&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt; 
&lt;user username="tomcat" password="tomcat" roles="manager-gui,manager-script,tomcat,admin-gui,admin-script"/&gt;</code></pre><p>2.修改webapps文件夹manager和host-mananger两个项目下META-INF中的context.xml文件：</p>
<pre><code>vim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/host-manager/META-INF
vim /usr/local/tomcat/apache-tomcat-9.0.27/webapps/manager/META-INF/context.xml</code></pre><p>修改为（或者注释掉）： </p>
<pre><code>&lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" /&gt;</code></pre><p>无须重启tomcat即可生效</p>
<h3 id="配置日志打印"><a href="#配置日志打印" class="headerlink" title="配置日志打印"></a>配置日志打印</h3><p>打开conf目录下的文件 logging.properties；修改以下内容</p>
<pre><code>1catalina.org.apache.juli.AsyncFileHandler.level = FINE
1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.
1catalina.org.apache.juli.AsyncFileHandler.maxDays = 7
1catalina.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter

2localhost.org.apache.juli.AsyncFileHandler.level = FINE
2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost.
2localhost.org.apache.juli.AsyncFileHandler.maxDays = 7
2localhost.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter

3manager.org.apache.juli.AsyncFileHandler.level = FINE
3manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
3manager.org.apache.juli.AsyncFileHandler.prefix = manager.
3manager.org.apache.juli.AsyncFileHandler.maxDays = 7
3manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter

4host-manager.org.apache.juli.AsyncFileHandler.level = FINE
4host-manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager.
4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 7
4host-manager.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL [%4$s] [%3$s] %2$s %5$s %6$s%n</code></pre><h3 id="配置日志存储"><a href="#配置日志存储" class="headerlink" title="配置日志存储"></a>配置日志存储</h3><pre><code>&lt;Host name="localhost"  appBase="webapps"  unpackWARs="true" autoDeploy="true"&gt;
       &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
       &lt;Valve className="org.apache.catalina.valves.AccessLogValve" 
           directory="logs/localhost_access_log" prefix="localhost_access_log" suffix=".txt" 
           pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt;
 &lt;/Host&gt;</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat开启APR运行模式，优化并发性能 - Windows</title>
    <url>/2020/09/1599628352134/1599628352134/</url>
    <content><![CDATA[<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>下载tcnative-1.dll文件<br>官网地址：<a href="https://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-native.cgi</a><br>软件下载地址：<a href="https://mirror.bit.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/binaries/tomcat-native-1.2.25-openssl-1.1.1g-win32-bin.zip" target="_blank" rel="noopener">点击下载</a><br><img src="/2020/09/1599628352134/1599628352134/20200909131752.png" alt="20200909131752"></p>
<p>文件解压后，将 x64/tcnative-1.dll 文件复制到C:\Windows\System32目录下<br><img src="/2020/09/1599628352134/1599628352134/20200909132118.png" alt="20200909132118"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>找到下面代码</p>
<pre><code>&lt;Connector connectionTimeout="20000" port="8086" protocol="HTTP/1.1" redirectPort="8443"/&gt;</code></pre><p>修改为</p>
<pre><code>&lt;Connector connectionTimeout="20000" port="8086" protocol="org.apache.coyote.http11.Http11AprProtocol" redirectPort="8443"/&gt;</code></pre><p>结果<br><img src="/2020/09/1599628352134/1599628352134/20200909133359.png" alt="20200909133359"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat配置https访问</title>
    <url>/2020/09/1599632929241/1599632929241/</url>
    <content><![CDATA[<h3 id="生成安全证书"><a href="#生成安全证书" class="headerlink" title="生成安全证书"></a>生成安全证书</h3><p>因为SUN公司提供了制作证书的工具keytool。<br>在JDK 1.4以后的版本中都包含了这一工具，它的位置为<java_home>\bin\keytool.exe。</java_home></p>
<h3 id="创建证书的命令"><a href="#创建证书的命令" class="headerlink" title="创建证书的命令"></a>创建证书的命令</h3><pre><code>keytool -genkeypair -alias "tomcat" -keyalg "RSA" -keystore "e:\tomcat.keystore"  </code></pre><p>这里密码我输的是123456，名字与姓氏为域名，其它的根据具体情况输入<br>以上命令将生产一对非对称密钥和自我签名的证书 e:\tomcat.keystore.<br>将证书保存到<tomcat_home>\conf 的目录下，<br>注意：“名字与姓氏”应该是域名，输成了姓名，和真正运行的时候域名不符，会出问题<br><img src="/2020/09/1599632929241/1599632929241/20200909144433.png" alt="20200909144433"></tomcat_home></p>
<h3 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h3><p>找到conf下的server.xml文件，添加以下内容，</p>
<pre><code>&lt;Connector port="8451" protocol="HTTP/1.1" SSLEnabled="true"  
              maxThreads="150" scheme="https" secure="true"  
              clientAuth="false" sslProtocol="TLS"   
       keystoreFile="conf/tomcat.keystore"  
       keystorePass="123456" 
 /&gt; </code></pre><p>端口port可自定义，keystorePass为密匙库密码</p>
<p>启动tomcat<br><img src="/2020/09/1599632929241/1599632929241/20200909161043.png" alt="20200909161043"><br>如换成apr模式 将protocol=”HTTP/1.1”替换为protocol=”org.apache.coyote.http11.Http11Protocol”即可</p>
<h3 id="访问结果"><a href="#访问结果" class="headerlink" title="访问结果"></a>访问结果</h3><p>http访问 - 8080 ：<a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a><br><img src="/2020/09/1599632929241/1599632929241/20200909160048.png" alt="20200909160048"></p>
<p>https访问 - 8451 ：<a href="https://localhost:8451/" target="_blank" rel="noopener">https://localhost:8451/</a><br><img src="/2020/09/1599632929241/1599632929241/20200909160135.png" alt="20200909160135"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 根据 URL 配置请求 location</title>
    <url>/2020/09/1600763525872/1600763525872/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在Nginx 中 配置 upstream 代理服务器，<br>由于  $scheme = http （return  301 ）会导致http的请求链接跳转https请求，故在http中不用配置。</p>
<p>在配置路径中使用根据URL请求不通的访问，需要保持顺序问题</p>
<p>第一访问tomcat里面的项目名《a》</p>
<pre><code>location ~* .*tomcat-a.* {
    proxy_pass http://tomcat;
    proxy_set_header Host $http_host;
}</code></pre><p>第二访问tomcat里面的项目名《b》</p>
<pre><code>location ~* .*tomcat-b.* { 
    proxy_pass http://tomcat;
    proxy_set_header Host $http_host;
}</code></pre><p>第三访问nginx里面html文件夹的内容</p>
<pre><code>location / { 
    root   html;
    index  index.html index.htm;
}</code></pre><p>在https中进行代理访问需要添加 proxy_set_header Host $http_host; </p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>user  root;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    # 开启gzip压缩
    gzip  on;
    gzip_comp_level  5;
    gzip_min_length  1024;
    gzip_types   text/plain application/x-javascript text/css application/xml text/javascript  image/jpeg image/gif image/png;

    # 隐藏nginx版本信息
    server_tokens off;

    upstream tomcat{
        server www.zhuqiaolun.com:8080;
    }

    server {
        listen       80;
        server_name  www.zhuqiaolun.com;

        if ($scheme = http ) {
            return  301 https://www.zhuqiaolun.com$request_uri;
        }

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   html;
        }

    }

    # HTTPS server
    #
    server {
        listen 443 ssl;
        server_name    www.zhuqiaolun.com;
        #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。
        root html; 
        index index.html index.htm;   
        ssl_certificate 1_www.zhuqiaolun.com_bundle.crt;
        ssl_certificate_key 2_www.zhuqiaolun.com.key;
        ssl_session_timeout    5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers  on;

        location ~* .*tomcat-a.* {

            proxy_pass http://tomcat;

            expires 24h;
            add_header Cache-Control no-store;
            #Proxy Settings 
            proxy_redirect off; 

            proxy_set_header Host $http_host; 
            proxy_set_header Cookie $http_cookie; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 

            proxy_set_header X-Forwarded-Proto $scheme;             
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; 
            proxy_max_temp_file_size 0; 
            proxy_connect_timeout 90; 
            proxy_send_timeout 90; 
            proxy_read_timeout 90; 
            proxy_buffer_size 4k; 
            proxy_buffers 4 32k; 
            proxy_busy_buffers_size 64k; 
            proxy_temp_file_write_size 64k;
            # 上传文件限制大小
            client_max_body_size 100M;
            client_body_buffer_size 128k;
        }

        location ~* .*tomcat-b.* {

            proxy_pass http://tomcat;

            expires 24h;
            add_header Cache-Control no-store;
            #Proxy Settings 
            proxy_redirect off; 

            proxy_set_header Host $http_host; 
            proxy_set_header Cookie $http_cookie; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 

            proxy_set_header X-Forwarded-Proto $scheme;             
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; 
            proxy_max_temp_file_size 0; 
            proxy_connect_timeout 90; 
            proxy_send_timeout 90; 
            proxy_read_timeout 90; 
            proxy_buffer_size 4k; 
            proxy_buffers 4 32k; 
            proxy_busy_buffers_size 64k; 
            proxy_temp_file_write_size 64k;
            # 上传文件限制大小
            client_max_body_size 100M;
            client_body_buffer_size 128k;
        }


        location / {

            root   html;
            index  index.html index.htm;

            expires 24h;
            add_header Cache-Control no-store;
            #Proxy Settings 
            proxy_redirect off; 

            proxy_set_header Host $http_host; 
            proxy_set_header Cookie $http_cookie; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 

            proxy_set_header X-Forwarded-Proto $scheme;             
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; 
            proxy_max_temp_file_size 0; 
            proxy_connect_timeout 90; 
            proxy_send_timeout 90; 
            proxy_read_timeout 90; 
            proxy_buffer_size 4k; 
            proxy_buffers 4 32k; 
            proxy_busy_buffers_size 64k; 
            proxy_temp_file_write_size 64k;
            # 上传文件限制大小
            client_max_body_size 100M;
            client_body_buffer_size 128k;
        }
    }

}</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows下安装Maven环境</title>
    <url>/2020/09/1600927625377/1600927625377/</url>
    <content><![CDATA[<h3 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h3><p>maven 官网下载地址：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a><br>maven 文件下载地址：<a href="https://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener">https://archive.apache.org/dist/maven/maven-3/</a><br>下载 Binary 版本，点击箭头所指的链接进行下载<br>传送门：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip</a><br><img src="/2020/09/1600927625377/1600927625377/20200924141314.png" alt="20200924141314"></p>
<h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><p><img src="/2020/09/1600927625377/1600927625377/20200924142131.png" alt="20200924142131"></p>
<h3 id="配置Maven环境变量"><a href="#配置Maven环境变量" class="headerlink" title="配置Maven环境变量"></a>配置Maven环境变量</h3><p>打开环境变量界面：</p>
<p>新建系统变量：MAVEN_HOME，值为maven的根目录<br><img src="/2020/09/1600927625377/1600927625377/20200924143005.png" alt="20200924143005"></p>
<p>修改系统变量：path,点击新建添加  %MAVEN_HOME%\bin<br><img src="/2020/09/1600927625377/1600927625377/20200924143243.png" alt="20200924143243"></p>
<h3 id="验证Maven环境变量"><a href="#验证Maven环境变量" class="headerlink" title="验证Maven环境变量"></a>验证Maven环境变量</h3><p>然后win+R 运行cmd 输入 mvn -version，如图所示则配置成功<br><img src="/2020/09/1600927625377/1600927625377/20200924143311.png" alt="20200924143311"></p>
<h3 id="修改本地仓库地址"><a href="#修改本地仓库地址" class="headerlink" title="修改本地仓库地址"></a>修改本地仓库地址</h3><p>在maven根目录下打开conf目录可以找到settings文件，找到第53行，这里是maven默认的仓库，默认的仓库地址为当前用户的 .m文件夹下的repository目录内，<br>在settings文件中有一个 localRepository 标签<br><img src="/2020/09/1600927625377/1600927625377/20200924144010.png" alt="20200924144010"><br>复制第53行，将它拿到注释外并将中间的内容改成你需要的路径，如图<br><img src="/2020/09/1600927625377/1600927625377/20200924144258.png" alt="20200924144258"></p>
<pre><code>&lt;localRepository&gt;D:\apache\Repositories\Maven&lt;/localRepository&gt;</code></pre><p>表示本地仓库地址为D盘的xxxx目录下</p>
<h3 id="配置Maven镜像"><a href="#配置Maven镜像" class="headerlink" title="配置Maven镜像"></a>配置Maven镜像</h3><p>在maven根目录下打开conf目录可以找到settings文件，找到第147行，Maven自身默认镜像<br><img src="/2020/09/1600927625377/1600927625377/20200924150053.png" alt="20200924150053"></p>
<pre><code>&lt;mirror&gt;
  &lt;id&gt;mirrorId&lt;/id&gt;
  &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;
  &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
  &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;
&lt;/mirror&gt;</code></pre><p>由于默认镜像属于国外，下载jar很慢；所以需要配置国内的镜像</p>
<p><a href="https://maven.aliyun.com/mvn/guide" target="_blank" rel="noopener">阿里云仓库</a>（推荐）：</p>
<pre><code>&lt;mirror&gt;
  &lt;id&gt;aliyunmaven&lt;/id&gt;
  &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
  &lt;name&gt;阿里云公共仓库&lt;/name&gt;
  &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;
&lt;/mirror&gt;</code></pre><p><a href="https://repo.spring.io/libs-snapshot/" target="_blank" rel="noopener">spring.io仓库</a>:</p>
<pre><code>&lt;mirror&gt;
    &lt;id&gt;sprintio&lt;/id&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
    &lt;url&gt;https://repo.spring.io/libs-snapshot/&lt;/url&gt;
&lt;/mirror&gt;</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven的pom</title>
    <url>/2020/09/1600931110662/1600931110662/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>pom文件定于了一个maven项目的maven配置，一般pom文件的放在项目或者模块的根目录下。</p>
<p>maven的遵循约定大于配置，约定了如下的目录结构：</p>
<pre><code>${basedir}：存放pom.xml和所有的子目录
${basedir}/src/main/java：项目的java源代码
${basedir}/src/main/resources：项目的资源文件，比如说properties文件、xml文件、application.yml等
${basedir}/src/test/java：项目的测试类，比如说Junit代码
${basedir}/src/test/resources：测试用的资源
${basedir}/src/main/webapp/WEB-INF：web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面，在springboot中无此目录
${basedir}/target：打包输出目录，在IDEA中需要设置
${basedir}/target/classes：编译输出目录
${basedir}/target/test-classes：测试编译输出目录</code></pre><p>以下的内容属于根元素和必要配置</p>
<pre><code>&lt;!-- 模型版本 --&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;!-- 公司或者组织的唯一标志，也是打包成jar包路径的依据 --&gt;
&lt;!-- 例如com.demon.project，maven打包jar包的路径：/com/demon/project --&gt;
&lt;groupId&gt;com.demon.project&lt;/groupId&gt;

&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;
&lt;artifactId&gt;demo&lt;/artifactId&gt;

&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;
&lt;version&gt;1.0.0&lt;/version&gt;

&lt;!--项目产生的构件类型，包括jar、war、pom等 --&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>pom</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson 的 使用</title>
    <url>/2020/09/1601024145664/1601024145664/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>jackson-databind 依赖 jackson-core 和 jackson-annotations，当添加 jackson-databind 之后， jackson-core 和 jackson-annotations 也随之添加到 Java 项目工程中。<br>在添加相关依赖包之后，就可以使用 Jackson。</p>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><pre><code>//在反序列化时忽略在 json 中存在但 Java 对象不存在的属性 
mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false); 

//在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ 
mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false) 

//在序列化时忽略值为 null 的属性 
mapper.setSerializationInclusion(Include.NON_NULL); 

//忽略值为默认值的属性 
mapper.setDefaultPropertyInclusion(Include.NON_DEFAULT);</code></pre><p>更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。</p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Jackson 根据它的默认方式序列化和反序列化 java 对象，若根据实际需要，灵活的调整它的默认方式，可以使用 Jackson 的注解。<br>常用的注解及用法如下：</p>
<p>@JsonProperty：用于属性，把属性的名称序列化时转换为另外一个名称。</p>
<pre><code>@JsonProperty("birth_date")
 private Date birthDate;</code></pre><p>@JsonFormat：用于属性或者方法，把属性的格式序列化时转换成指定的格式。</p>
<pre><code>@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")
 public Date birthDate;</code></pre><p>@JsonPropertyOrder：用于类，指定属性在序列化时 json 中的顺序。</p>
<pre><code>@JsonPropertyOrder({ "birth_date", "name" })
 public class Person{}</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Jackson 最常用的 API 就是基于”对象绑定” 的 ObjectMapper。<br>writeValue：将 java 对 象序列化 为 json，并 将 json 存 储成不同的格式，String（writeValueAsString），Byte Array（writeValueAsString），Writer， File，OutStream 和 DataOutput。<br>readValue：将不同的数据源像 String ， Byte Array， Reader，File，URL， InputStream 将 json 反序列化为 java 对象。</p>
<h4 id="实体对象转化字符串"><a href="#实体对象转化字符串" class="headerlink" title="实体对象转化字符串"></a>实体对象转化字符串</h4><p><img src="/2020/09/1601024145664/1601024145664/20200925172117.png" alt="20200925172117"></p>
<h4 id="字符串转化键值对象"><a href="#字符串转化键值对象" class="headerlink" title="字符串转化键值对象"></a>字符串转化键值对象</h4><p><img src="/2020/09/1601024145664/1601024145664/20200925174105.png" alt="20200925174105"></p>
<h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>map：<br><img src="/2020/09/1601024145664/1601024145664/20200925175422.png" alt="20200925175422"></p>
<p>list：<br><img src="/2020/09/1601024145664/1601024145664/20200925175955.png" alt="20200925175955"></p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>代码</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">try {</span><br><span class="line">    ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">    // 在反序列化时忽略在 json 中存在但 Java 对象不存在的属性</span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">    //在序列化时忽略值为 null 的属性 </span><br><span class="line">    mapper.setSerializationInclusion(Include.NON_NULL); </span><br><span class="line">    Person person = new Person();</span><br><span class="line">    person.setName("demo");</span><br><span class="line">    person.setAge(30);</span><br><span class="line">    // 将实体对象转化Json字符串</span><br><span class="line">    String jsonString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(person);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">    // 将Json字符串转化成实体对象</span><br><span class="line">    String jsonStringTemp = "{\"name\" : \"demo\",\"age\" : 30 ,\"sex\":\"男\"}";</span><br><span class="line">    System.out.println(jsonStringTemp);</span><br><span class="line">    Person deserializedPerson = mapper.readValue(jsonStringTemp, Person.class);</span><br><span class="line">    System.out.println(deserializedPerson);</span><br><span class="line">    // 将Json字符串转化成键值对象</span><br><span class="line">    ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">    Map&lt;String, Object&gt; jsonMap = objectMapper.readValue(jsonStringTemp, new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {});</span><br><span class="line">    System.out.println(jsonMap);</span><br><span class="line">    System.out.println(jsonMap.get("sex"));</span><br><span class="line">} catch (JsonProcessingException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "name" : "demo",</span><br><span class="line">  "age" : 30</span><br><span class="line">}</span><br><span class="line">{"name" : "demo","age" : 30 ,"sex":"男"}</span><br><span class="line">Person [name=demo, sex=男, age=30]</span><br><span class="line">{name=demo, age=30, sex=男}</span><br><span class="line">男</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>代码</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">ObjectNode objectNode = objectMapper.createObjectNode();</span><br><span class="line">objectNode.put("name", "张三");</span><br><span class="line">objectNode.put("age", 30);</span><br><span class="line">ArrayNode arrayNode = objectMapper.createArrayNode();</span><br><span class="line">arrayNode.add("Java");</span><br><span class="line">arrayNode.add("Python");</span><br><span class="line">objectNode.set("job", arrayNode);</span><br><span class="line">System.out.println(objectNode.toString());</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">{"name":"张三","age":30,"job":["Java","Python"]}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Jackson</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven在项目下的pom配置</title>
    <url>/2020/09/1600933059831/1600933059831/</url>
    <content><![CDATA[<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>版本信息    </p>
<pre><code> &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;skipTests&gt;true&lt;/skipTests&gt;
&lt;/properties&gt;</code></pre><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>引入依赖</p>
<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
        &lt;version&gt;1.2.68&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><h3 id="finalName"><a href="#finalName" class="headerlink" title="finalName"></a>finalName</h3><p> 打包项目名称</p>
<pre><code>&lt;finalName&gt;demon&lt;/finalName&gt;</code></pre><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>使用插件</p>
<p>打包JDK版本:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可能需要版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>打出jar包源码sources：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>打出无/有依赖的jar,jar-with-dependencies结尾的表示含有jar的文件:<br>打包命令：clean assembly:assembly</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这部分可有可无,加上的话则直接生成可运行jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.demon.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>assembly<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>安装第三方的jar，即无法远程仓库下载的jar，安装在本地，然后就正常引入即可：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>install-external<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>clean<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span>${basedir}/src/lib/demon-0.0.1.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repositoryLayout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">repositoryLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">generatePom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generatePom</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="代理仓库配置"><a href="#代理仓库配置" class="headerlink" title="代理仓库配置"></a>代理仓库配置</h3><p>开启项目本身的代理仓库配置</p>
<pre><code>&lt;repository&gt;
  &lt;id&gt;spring&lt;/id&gt;
  &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt;
  &lt;releases&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/releases&gt;
  &lt;snapshots&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/snapshots&gt;
&lt;/repository&gt;</code></pre><p>但有时，跟着上面的设置方法并不奏效，仍然还是从之前的镜像站中去下载。<br>此时，我们需要去检查下 Maven 安装目录下的settings.xml：</p>
<pre><code>&lt;mirror&gt;
    &lt;id&gt;nexus-aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
    &lt;name&gt;Nexus aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
&lt;/mirror&gt;</code></pre><p>可以看到，在设置镜像时，mirrorOf设置为了“*”，意味所有的依赖都是从这个镜像上下载。完全不给Spring Snapshots机会了。</p>
<p>解决方法也简单，改为下面的方式：</p>
<pre><code>&lt;mirror&gt;
    &lt;id&gt;nexus-aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;*,!spring-snapshots&lt;/mirrorOf&gt;
    &lt;name&gt;Nexus aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
&lt;/mirror&gt;</code></pre><p>mirrorOf设置为了“*,!spring-snapshots”，表示除了Spring Snapshots外，所有的依赖都将从这个镜像上下载。</p>
<p>mirrorOf的配置支持如下场景：</p>
<pre><code>*：所有依赖；
external:*：所有不再本地和不是基于文件的依赖；
repo,repo1：所有来自repo或者repo1仓库的依赖；
*,!repo1：除了repo1外的所有依赖。即上面示例中的场景。</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>pom</tag>
      </tags>
  </entry>
  <entry>
    <title>Window10安装 Redis - 安装版</title>
    <url>/2020/09/1601194890597/1601194890597/</url>
    <content><![CDATA[<p>Redis中文官方网站：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a><br>传送门：<a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi</a></p>
<p><img src="/2020/09/1601194890597/1601194890597/20200927163042.png" alt="20200927163042"></p>
<p>对文件进行一个说明：<br>Redis-x64-3.2.100.msi ：图形化安装文件<br>Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装<br>Redis-x64-3.2.100.zip ：.zip压缩格式源码<br>Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的msi文件，点击next;</p>
<p>1.勾选 I accept the terms in the License Agreement，点击next;<br><img src="/2020/09/1601194890597/1601194890597/20200927164140.png" alt="20200927164140"></p>
<p>2.更换安装目录，以及添加到环境变量path,以便开机启动，命名执行<br><img src="/2020/09/1601194890597/1601194890597/20200927164718.png" alt="20200927164718"></p>
<p>3.redis默认是 6379 端口，如果你不想用 6379 或者 6379 已经被其他程序占用，可以修改成其他端口。<br>添加到windows防火墙的选项保持默认就好。<br><img src="/2020/09/1601194890597/1601194890597/20200927165702.png" alt="20200927165702"></p>
<p>4.设置redis最大内存限制。默认100MB内存，但是可能是不够用的，所以改大一点，我这里修改成了1024MB。<br>可以根据自己的实际情况来更改设置。<br><img src="/2020/09/1601194890597/1601194890597/20200927170049.png" alt="20200927170049"></p>
<p>5.点击install即可<br><img src="/2020/09/1601194890597/1601194890597/20200927170251.png" alt="20200927170251"></p>
<p>至此安装结束。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开任务管理器，点击服务，查看服务列表中是否有一个名字叫做Redis的服务正在运行，如果有，说明安装并启动成功，<br><img src="/2020/09/1601194890597/1601194890597/20200927171019.png" alt="20200927171019"></p>
<p>进入安装目录下，执行 redis-cli命令：<br><img src="/2020/09/1601194890597/1601194890597/20200927170726.png" alt="20200927170726"></p>
<p>如果没有或者未成功启动，请删除服务之后对照如上步骤重新安装。<br>删除redis服务命令为 sc delete 服务名 ，需要注意删除服务需要使用管理员身份打开命令行窗口执行命令。</p>
<pre><code>sc delete Redis</code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>使用的时候提示连不上，可以关闭保护模式：在redis安装目录找到“redis.windows-service.conf”：<br>查找protected-mode yes 改为 protected-mode no</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Window10安装 Redis - 绿色版</title>
    <url>/2020/09/1601194986992/1601194986992/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Redis下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a><br>传送门：<a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip</a></p>
<p><img src="/2020/09/1601194986992/1601194986992/20200927163042.png" alt="20200927163042"></p>
<p>对文件进行一个说明：<br>Redis-x64-3.2.100.msi ：图形化安装文件<br>Redis-x64-3.2.100.zip ：压缩文件安装包，需要解压安装<br>Redis-x64-3.2.100.zip ：.zip压缩格式源码<br>Redis-x64-3.2.100.tar.gz ：.gz压缩格式源码</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>点击下载后，需要先进行解压，解压文件如下：<br><img src="/2020/09/1601194986992/1601194986992/20200928150337.png" alt="20200928150337"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>双击运行目录下的 redis-server.exe，会加载自身存在的 conf 文件配置，采取默认的配置运行；出现以下画面即成功：</p>
<p><img src="/2020/09/1601194986992/1601194986992/20200928151238.png" alt="20200928151238"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改为加载目录下的 redis.windows.conf 文件配置，由于我修改了配置文件端口为 6377，<br>故执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下：</p>
<pre><code>D:\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf</code></pre><p><img src="/2020/09/1601194986992/1601194986992/20200928151952.png" alt="20200928151952"></p>
<h3 id="bat启动"><a href="#bat启动" class="headerlink" title="bat启动"></a>bat启动</h3><p>创建快捷启动，在根目录下，新建txt文件，填写以下内容，保存后修改txt的文件后缀为bat，双击即可启动；</p>
<pre><code>@echo off
redis-server.exe redis.windows.conf
@pause</code></pre><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><p>创建服务启动，可保存跟随系统启动自运行；执行：Win+R –&gt; 运行cmd –&gt; 进入Redis的根目录下：</p>
<pre><code>redis-server.exe --service-install redis.windows.conf</code></pre><p><img src="/2020/09/1601194986992/1601194986992/20200928152934.png" alt="20200928152934"><br>出现 #Redis successfully installed as a service.即完成；可在服务列表中查看名称为【Rides】的服务；</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>常用的redis服务命令，需在进入Redis的根目录下执行；<br>安装服务：redis-server.exe –service-install redis.windows.conf<br>开启服务：redis-server –service-start<br>停止服务：redis-server –service-stop<br>卸载服务：redis-server –service-uninstall</p>
<p><img src="/2020/09/1601194986992/1601194986992/20200928153643.png" alt="20200928153643"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis配置 之  设置密码</title>
    <url>/2020/09/1601271269577/1601271269577/</url>
    <content><![CDATA[<p>默认安装后的redis是没有密码的，这明显有很大的安全隐患，所以需要设置密码。这里提供2中方式</p>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p><span style="color:red">注：使用第二种，不知道怎么回滚为空密码</span></p>
<p>1.第一种方式（推荐）：<br>修改配置文件“redis.windows-service.conf”，大约在 443 行：<br><img src="/2020/09/1601271269577/1601271269577/20200927172058.png" alt="20200927172058"><br>添加一下内容：</p>
<pre><code>requirepass 123456</code></pre><p>然后重启Redis服务，即可生效。如若去掉此行代码即属于设置密码为空。</p>
<p>2.第二种方式：<br>使用命令方式进入链接后，输入 config set requirepass “你的密码”，本例为 123456，进行回车；<br><img src="/2020/09/1601271269577/1601271269577/20200927172450.png" alt="20200927172450"></p>
<p>当显示为OK后，需要进行auth认证，当输入 auth后会出现 auth password，不用管password的出现，敲一下空格再输入密码(123456)回车即可；<br><img src="/2020/09/1601271269577/1601271269577/20200927172545.png" alt="20200927172545"></p>
<p>更换密码输入命令：config set requirepass “” ；当密码为空时不用auth认证；且密码任意输入都可连接；</p>
<h3 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h3><p>输入命令：config get requirepass<br><img src="/2020/09/1601271269577/1601271269577/20200927173752.png" alt="20200927173752"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx一个server配置多个location</title>
    <url>/2020/10/1602671313615/1602671313615/</url>
    <content><![CDATA[<p>nginx作为代理服务器，可以配置多个location，通过访问不同路径来访问不同目录。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen       80;  #端口号</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    location /video { </span><br><span class="line">        #alias末尾必须要用/结束</span><br><span class="line">        alias  html/video/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line">    location /music { </span><br><span class="line">        #alias末尾必须要用/结束</span><br><span class="line">        alias  html/music/;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    location / {</span><br><span class="line">        #root末尾可以不用/结束</span><br><span class="line">        root   html;</span><br><span class="line">        index  	index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html {</span><br><span class="line">        root   html;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="/2020/10/1602671313615/1602671313615/20201014184210.png" alt="20201014184210"><br>在music内放置文件 111.mp3<br>在video内放置文件 222.mp4</p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a><br><a href="http://localhost/music/111.mp3" target="_blank" rel="noopener">http://localhost/music/111.mp3</a><br><a href="http://localhost/video/222.mp4" target="_blank" rel="noopener">http://localhost/video/222.mp4</a></p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>alias与root的区别：alias与root指定的url意义不同</p>
<br>

<p>root和alias都可以定义在location模块中，都是用来指定请求资源的真实路径，比如：</p>
<pre><code>location /music/ {
    root /data/file;
}
请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/music/111.mp3，</code></pre><p>注意：root真实路径是root指定的值加上location指定的值。</p>
<br>

<p>而 alias 正如其名，alias指定的路径是location的别名，不管location的值怎么写，资源的真实路径都是 alias 指定的路径，比如：</p>
<pre><code>location /music/ {
    alias /data/file/;
}
请求 http://localhost/music/111.mp3 时，那么在服务器里面对应的真正的资源是：/opt/data/file/111.mp3，</code></pre><p>注意：alias真实路径是alias指定的值，不包含location指定的值了。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在一个location中，alias可以存在多个，但是root只能有一个，<br>alias只能存在与location中，但是root可以用在server、http和location中，<br>alias后面必须要“/”结束，否则会找不到文件，而root的“/”可有可无，</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>发布Java程序为Windows服务 - Windows Service Wrapper 四</title>
    <url>/2020/11/1604299054941/1604299054941/</url>
    <content><![CDATA[<h3 id="Windows-Service-Wrapper"><a href="#Windows-Service-Wrapper" class="headerlink" title="Windows Service Wrapper"></a>Windows Service Wrapper</h3><p>Windows Service Wrapper 可以将 Java 的 jar 包注册为 windows 服务。<br>项目：<a href="https://github.com/winsw/winsw" target="_blank" rel="noopener">https://github.com/winsw/winsw</a><br>地址：<a href="https://github.com/winsw/winsw/releases" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官方 GitHub下载 WinSW.NET4.exe 和 sample-minimal.xml<br>选择 WinSW <a href="https://github.com/winsw/winsw/releases/tag/v2.10.3" target="_blank" rel="noopener">v2.10.3</a> 版本下载<br>WinSW.NET4.exe ：<a href="https://github.com/winsw/winsw/releases/download/v2.10.3/WinSW.NET4.exe" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases/download/v2.10.3/WinSW.NET4.exe</a><br>sample-minimal.xml ：<a href="https://github.com/winsw/winsw/releases/download/v2.10.3/sample-minimal.xml" target="_blank" rel="noopener">https://github.com/winsw/winsw/releases/download/v2.10.3/sample-minimal.xml</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建目录，例如： MyApp<br><img src="/2020/11/1604299054941/1604299054941/20201102145318.png" alt="20201102145318"></p>
<p>文件内容：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">bin: 属于服务的命名以及配置</span><br><span class="line">    - MyApp.exe</span><br><span class="line">    - MyApp.xml</span><br><span class="line"></span><br><span class="line">conf：一些需要的文件配置</span><br><span class="line">    </span><br><span class="line">jre：属于Java的运行环境</span><br><span class="line"></span><br><span class="line">lib：属于程序的执行包</span><br><span class="line"></span><br><span class="line">log：输出日志文件夹</span><br></pre></td></tr></tbody></table></figure></div>

<p>MyApp.xml<br>配置过程中注意目录情况，%BASE% 是以exe所在的目录为根目录</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 服务名称 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>MyApp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 服务显示名称 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>My App Service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 服务描述 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>通过wapper注册成Windows服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- java环境变量 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：C:\jdk1.8\jre\bin\java--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">executable</span>&gt;</span>%BASE%\..\jre\bin\java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--启动参数--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-jar %BASE%\..\lib\MyApp.jar"<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 开机启动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">startmode</span>&gt;</span>Automatic<span class="tag">&lt;/<span class="name">startmode</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 日志配置 &lt;logmode&gt;rotate&lt;/logmode&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logpath</span>&gt;</span>%BASE%\..\log<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">"roll-by-time"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>以管理员身份运行 bat文件，进行 windows 服务操作</p>
<h3 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h3><p>注册服务 service install.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe install</span><br></pre></td></tr></tbody></table></figure></div>

<p>卸载服务 service uninstall.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe uninstall</span><br></pre></td></tr></tbody></table></figure></div>

<p>启动服务 service start.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe start</span><br></pre></td></tr></tbody></table></figure></div>

<p>停止服务 service stop.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe stop</span><br></pre></td></tr></tbody></table></figure></div>

<p>重启服务 service restart.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe restart</span><br></pre></td></tr></tbody></table></figure></div>

<p>服务状态 service status.bat</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start bin\MyApp.exe status</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/06/1592889892770/1592889892770/">发布Java程序为Windows服务 （含有Java环境）一</a><br><a href="/2020/06/1592898236483/1592898236483/">发布Java程序为Windows服务 （不含有Java环境）二</a><br><a href="/2020/06/1592899073321/1592899073321/">发布Java程序为Windows服务 （修改配置参数，新增对 jvm 的配置）三</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决IE浏览器  @ResponseBody 返回json的时候提示下载问题</title>
    <url>/2020/11/1605076219103/1605076219103/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: WebMvcConfig.java</span><br><span class="line"> * @description:  WebMvc配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {</span><br><span class="line">        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();</span><br><span class="line">        List<span class="tag">&lt;<span class="name">MediaType</span>&gt;</span> supportedMediaTypes = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        MediaType media = new MediaType(MediaType.TEXT_HTML, Charset.forName("UTF-8"));</span><br><span class="line">        supportedMediaTypes.add(media);</span><br><span class="line">        jsonConverter.setSupportedMediaTypes(supportedMediaTypes);</span><br><span class="line">        converters.add(jsonConverter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 静态资源处理</title>
    <url>/2020/11/1605076979058/1605076979058/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.util.ResourceUtils;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: WebMvcConfig.java</span><br><span class="line"> * @description:  WebMvc配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) {</span><br><span class="line">        // 配置模板资源路径</span><br><span class="line">        registry.addResourceHandler("/templates/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/templates/");</span><br><span class="line">        registry.addResourceHandler("/static/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/static/");</span><br><span class="line">        registry.addResourceHandler("/public/**").addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX+"/public/");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>实体对象与Map之间的转换工具类</title>
    <url>/2020/11/1605077732135/1605077732135/</url>
    <content><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: EntityUtil</span><br><span class="line"> * @Description: 实体对象与Map之间的转换工具类</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class EntityUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实体类转Map</span><br><span class="line">     * @param object 对象</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    public static Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> entityToMap(Object object) {</span><br><span class="line">        if (object == null) {</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        for (Field field : object.getClass().getDeclaredFields()){</span><br><span class="line">            try {</span><br><span class="line">                boolean flag = field.isAccessible();</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                Object o = field.get(object);</span><br><span class="line">                map.put(field.getName(), o);</span><br><span class="line">                field.setAccessible(flag);</span><br><span class="line">            } catch (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Map转实体类</span><br><span class="line">     * @param map 需要初始化的数据，key字段必须与实体类的成员名字一样，否则赋值为空</span><br><span class="line">     * @param entity  需要转化成的实体类</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T mapToEntity(Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map, Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> entity) {</span><br><span class="line">        T t = null;</span><br><span class="line">        try {</span><br><span class="line">            t = entity.newInstance();</span><br><span class="line">            for(Field field : entity.getDeclaredFields()) {</span><br><span class="line">                if (map.containsKey(field.getName())) {</span><br><span class="line">                    boolean flag = field.isAccessible();</span><br><span class="line">                    field.setAccessible(true);</span><br><span class="line">                    Object object = map.get(field.getName());</span><br><span class="line">                    if (object!= null &amp;&amp; field.getType().isAssignableFrom(object.getClass())) {</span><br><span class="line">                        field.set(t, object);</span><br><span class="line">                    }</span><br><span class="line">                    field.setAccessible(flag);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            return t;</span><br><span class="line">        } catch (InstantiationException | IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        return t;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>获取当前登录用户IP</title>
    <url>/2020/11/1605078705487/1605078705487/</url>
    <content><![CDATA[<p>此方法采用的 HttpServletRequest 获取，故使用web项目，<br>说明，当存在使用 虚拟机 的情况，会导致获取的IP为 以太网适配器 的IP</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: IpUtil</span><br><span class="line"> * @Description: 获取当前登录用户IP</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class IpUtil {</span><br><span class="line"></span><br><span class="line">    private static final String[] LOCAL_IP = {"127.0.0.1","localhost","0:0:0:0:0:0:0:1"};</span><br><span class="line">    private static final String UNKNOWN = "unknown";</span><br><span class="line"></span><br><span class="line">    public static String getIpAddr(HttpServletRequest request) {</span><br><span class="line">        String ipAddress;</span><br><span class="line">        try {</span><br><span class="line">            ipAddress = request.getHeader("x-forwarded-for");</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getHeader("Proxy-Client-IP");</span><br><span class="line">            }</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getHeader("WL-Proxy-Client-IP");</span><br><span class="line">            }</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || UNKNOWN.equalsIgnoreCase(ipAddress)) {</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">                if (Arrays.asList(LOCAL_IP).contains(ipAddress)) {</span><br><span class="line">                    // 根据网卡取本机配置的IP</span><br><span class="line">                    InetAddress inet = null;</span><br><span class="line">                    try {</span><br><span class="line">                        inet = InetAddress.getLocalHost();</span><br><span class="line">                    } catch (UnknownHostException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    assert inet != null;</span><br><span class="line">                    ipAddress = inet.getHostAddress();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span><br><span class="line">            // "***.***.***.***".length()</span><br><span class="line">            if (ipAddress != null &amp;&amp; ipAddress.length() &gt; 15) {</span><br><span class="line">                // = 15</span><br><span class="line">                if (ipAddress.indexOf(",") &gt; 0) {</span><br><span class="line">                    ipAddress = ipAddress.substring(0, ipAddress.indexOf(","));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            ipAddress = "";</span><br><span class="line">        }</span><br><span class="line">        return ipAddress;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断IP地址的合法性，这里采用了正则表达式的方法来判断</span><br><span class="line">     * return true，合法</span><br><span class="line">     * */</span><br><span class="line">    public static boolean ipCheck(String text) {</span><br><span class="line">        if (text != null &amp;&amp; !text.isEmpty()) {</span><br><span class="line">            // 定义正则表达式</span><br><span class="line">            String regex = "^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."+</span><br><span class="line">            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$";</span><br><span class="line">            // 判断ip地址是否与正则表达式匹配</span><br><span class="line">            // 返回判断信息</span><br><span class="line">            // 返回判断信息</span><br><span class="line">            return text.matches(regex);</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密工具</title>
    <url>/2020/11/1605078934677/1605078934677/</url>
    <content><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import java.security.MessageDigest;</span><br><span class="line">/**</span><br><span class="line"> * @ClassName: MD5Util</span><br><span class="line"> * @Description: MD5加密工具</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class MD5Util {</span><br><span class="line"></span><br><span class="line">    private static final String SALT = "demon";</span><br><span class="line"></span><br><span class="line">    public static String encode(String password) {</span><br><span class="line">        password = password + SALT;</span><br><span class="line">        MessageDigest md5;</span><br><span class="line">        try {</span><br><span class="line">            md5 = MessageDigest.getInstance("MD5");</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        }</span><br><span class="line">        char[] charArray = password.toCharArray();</span><br><span class="line">        byte[] byteArray = new byte[charArray.length];</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">charArray.length</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">byteArray</span>[<span class="attr">i</span>] = <span class="string">(byte)</span> <span class="attr">charArray</span>[<span class="attr">i</span>];</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">byte</span>[] <span class="attr">md5Bytes</span> = <span class="string">md5.digest(byteArray);</span></span></span><br><span class="line"><span class="tag">        <span class="attr">StringBuilder</span> <span class="attr">hexValue</span> = <span class="string">new</span> <span class="attr">StringBuilder</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">for</span> (<span class="attr">byte</span> <span class="attr">md5Byte</span> <span class="attr">:</span> <span class="attr">md5Bytes</span>) {</span></span><br><span class="line"><span class="tag">            <span class="attr">int</span> <span class="attr">val</span> = <span class="string">((int)</span> <span class="attr">md5Byte</span>) &amp; <span class="attr">0xff</span>;</span></span><br><span class="line">            if (val &lt; 16) {</span><br><span class="line">                hexValue.append("0");</span><br><span class="line">            }</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        }</span><br><span class="line">        return hexValue.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的普通类获取注册的bean</title>
    <url>/2020/11/1605079105126/1605079105126/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ApplicationContextHelper.java</span><br><span class="line"> * @description:  获取 ApplicationContext</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ApplicationContextHelper implements ApplicationContextAware {</span><br><span class="line"></span><br><span class="line">	private static ApplicationContext appCtx;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {</span><br><span class="line">		System.out.println("初始化applicationContext："+applicationContext.getBeanDefinitionNames().length);</span><br><span class="line">		appCtx = applicationContext;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 通过name获取 Bean.</span><br><span class="line">	 * @param name bean名</span><br><span class="line">	 * @return 返回</span><br><span class="line">	 */</span><br><span class="line">	public static Object getBean(String name) {</span><br><span class="line">		return appCtx.getBean(name);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 通过class获取Bean.</span><br><span class="line">	 * @param clazz bean类</span><br><span class="line">	 * @return 返回</span><br><span class="line">	 */</span><br><span class="line">	public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T getBean(Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> clazz) {</span><br><span class="line">		return appCtx.getBean(clazz);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 通过name,以及Clazz返回指定的Bean</span><br><span class="line">	 * @param name bean名</span><br><span class="line">	 * @param clazz bean类</span><br><span class="line">	 * @return 返回</span><br><span class="line">	 */</span><br><span class="line">	public static <span class="tag">&lt;<span class="name">T</span>&gt;</span> T getBean(String name, Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> clazz) {</span><br><span class="line">		return appCtx.getBean(name, clazz);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>获取 RestTemplate 的 bean</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">RestTemplate  restTemplate = ApplicationContextHelper.getBean(RestTemplate.class);</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>对响应值Response的封装使用(可格式化Json格式数据)</title>
    <url>/2020/11/1605079334142/1605079334142/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>返回的json中忽略null属性值，不传递<br>pom引入:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>第一种，在yml中写入（全局）：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    default-property-inclusion: non_null</span><br></pre></td></tr></tbody></table></figure></div>
<p>第二种，在应用类上写入（局部）：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ResponseBean：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line">import com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.SneakyThrows;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2021/3/8 13:27</span><br><span class="line"> * @description: 返回的JSON数据结构标准</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">public class ResponseBean implements Serializable {</span><br><span class="line"></span><br><span class="line">    private boolean success = false;</span><br><span class="line">    private Object data;</span><br><span class="line">    private String msg;</span><br><span class="line">    private String errCode;</span><br><span class="line">    private String errMsg;</span><br><span class="line"></span><br><span class="line">    @JsonIgnore</span><br><span class="line">    private boolean dataFormat = false;</span><br><span class="line"></span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        ResponseBeanVo responseBeanVo = new ResponseBeanVo()</span><br><span class="line">                .setSuccess(this.isSuccess()).setData(this.getData()).setMsg(this.getMsg())</span><br><span class="line">                .setErrCode(this.getErrCode()).setErrMsg(this.getErrMsg());</span><br><span class="line">        if (this.isDataFormat()) {</span><br><span class="line">            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(responseBeanVo);</span><br><span class="line">        } else {</span><br><span class="line">            return objectMapper.writer().writeValueAsString(responseBeanVo);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">class ResponseBeanVo implements Serializable {</span><br><span class="line">    private boolean success;</span><br><span class="line">    private Object data;</span><br><span class="line">    private String msg;</span><br><span class="line">    private String errCode;</span><br><span class="line">    private String errMsg;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @className: BaseController.java</span><br><span class="line"> * @description:  基本</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseController {</span><br><span class="line">  /**</span><br><span class="line">    * 使用response输出JSON</span><br><span class="line">    * @param response response</span><br><span class="line">    * @param str 响应对应</span><br><span class="line">    */</span><br><span class="line">   protected void out(HttpServletResponse response, Object str) {</span><br><span class="line">       PrintWriter out = null;</span><br><span class="line">       try {</span><br><span class="line">           response.setCharacterEncoding("UTF-8");</span><br><span class="line">           response.setContentType("application/json");</span><br><span class="line">           out = response.getWriter();</span><br><span class="line">           out.print(str);</span><br><span class="line">       } catch (Exception e) {</span><br><span class="line">           log.error("输出JSON出错",e.getMessage());</span><br><span class="line">       } finally {</span><br><span class="line">           if (out != null) {</span><br><span class="line">               out.flush();</span><br><span class="line">               out.close();</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: IndexController</span><br><span class="line"> * @Description: 控制层测试</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class TestController extends BaseController {</span><br><span class="line"></span><br><span class="line">   @RequestMapping(method = {RequestMethod.GET,RequestMethod.POST})</span><br><span class="line">   public @ResponseBody void getIndex(HttpServletResponse response) {</span><br><span class="line">       ResponseBean responseBean = new ResponseBean();</span><br><span class="line">       responseBean.setSuccess(true);</span><br><span class="line">       responseBean.setDataFormat(true);</span><br><span class="line">       this.out(response,responseBean);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>结果：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "success" : true</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>poi(3.17)解析excel - 2007</title>
    <url>/2020/11/1605159781717/1605159781717/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据读取，文件流解析Excel文件</span><br><span class="line">     * @param input 文件流</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws IOException 异常</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;Map&lt;String,String&gt;&gt; getDataToInput(FileInputStream input) throws IOException {</span><br><span class="line">        return getData(input);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据文件绝对路径，解析Excel文件</span><br><span class="line">     * @param filePath 文件路径</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws IOException 异常</span><br><span class="line">     */</span><br><span class="line">	public static List&lt;Map&lt;String,String&gt;&gt; getDataToFilePath(String filePath) throws IOException {</span><br><span class="line">		return getData(new FileInputStream(filePath));</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析数据</span><br><span class="line">     */</span><br><span class="line">	private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException {</span><br><span class="line">        List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;();</span><br><span class="line">        Workbook wb = null;</span><br><span class="line">        try {</span><br><span class="line">            wb = new XSSFWorkbook(input);</span><br><span class="line">            // 获得第一个表单</span><br><span class="line">            Sheet sheet = wb.getSheetAt(0);</span><br><span class="line">            // 获得第一个表单的迭代器</span><br><span class="line">            Iterator<span class="tag">&lt;<span class="name">Row</span>&gt;</span> rows = sheet.rowIterator();</span><br><span class="line">            while (rows.hasNext()) {</span><br><span class="line">                // 获得行数据</span><br><span class="line">                Row row = rows.next();</span><br><span class="line">                // 获得第一行的迭代器</span><br><span class="line">                Iterator<span class="tag">&lt;<span class="name">Cell</span>&gt;</span> cells = row.cellIterator();</span><br><span class="line">                Map<span class="tag">&lt;<span class="name">String,String</span>&gt;</span> jsonMap = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">                StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">                while (cells.hasNext()) {</span><br><span class="line">                    Cell cell = cells.next();</span><br><span class="line">                    String val = "";</span><br><span class="line">                    // 根据cell中的类型来输出数据</span><br><span class="line">                    switch (cell.getCellTypeEnum()) {</span><br><span class="line">                        case NUMERIC:</span><br><span class="line">                            val = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case STRING:</span><br><span class="line">                            val = String.valueOf(cell.getStringCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case BOOLEAN:</span><br><span class="line">                            val = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                            break;</span><br><span class="line">                        case FORMULA:</span><br><span class="line">                            val = String.valueOf(cell.getCellFormula());</span><br><span class="line">                            break;</span><br><span class="line">                        default:</span><br><span class="line">                            break;</span><br><span class="line">                    }</span><br><span class="line">                    stringBuilder.append(val).append("#");</span><br><span class="line">                    jsonMap.put(String.valueOf(cell.getColumnIndex()), val);</span><br><span class="line">                }</span><br><span class="line">                System.out.println(stringBuilder.toString());</span><br><span class="line">                if (!jsonMap.isEmpty()) {</span><br><span class="line">                    mapList.add(jsonMap);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } catch (FileNotFoundException e) {</span><br><span class="line">            System.out.println("找不到xlsx文件");</span><br><span class="line">            throw new IOException(e);</span><br><span class="line">        } catch (IOException e) {</span><br><span class="line">            System.out.println("解析xlsx文件错误");</span><br><span class="line">            throw new IOException(e);</span><br><span class="line">        } finally {</span><br><span class="line">            if (wb != null) {</span><br><span class="line">                try {</span><br><span class="line">                    wb.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            if (input != null) {</span><br><span class="line">                try {</span><br><span class="line">                    input.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return mapList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>第一种：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">try {</span><br><span class="line">    String filePath = "D:\\test\\test.xlsx";</span><br><span class="line">    FileInputStream fileInputStream = new FileInputStream(new File(filePath));</span><br><span class="line">    List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToInput(fileInputStream);</span><br><span class="line">    System.out.println(mapList.size());</span><br><span class="line">} catch (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>第二种：    </p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">try {</span><br><span class="line">    String filePath = "D:\\test\\test.xlsx";</span><br><span class="line">    List&lt;Map&lt;String,String&gt;&gt; mapList = ExcelUtil.getDataToFilePath(filePath);</span><br><span class="line">    System.out.println(mapList.size());</span><br><span class="line">} catch (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/11/1606102218582/1606102218582/">poi(3.17)解析excel - 2007 续.1</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>poi(3.17)生成excel - 2007</title>
    <url>/2020/11/1605601181571/1605601181571/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.72<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成文件</span><br><span class="line">     * @param saveFilePath 输出文件路径</span><br><span class="line">     * @param jsonArray 数据集合</span><br><span class="line">     */</span><br><span class="line">    public static void createFile(String saveFilePath,JSONArray jsonArray) throws IOException {</span><br><span class="line">        OutputStream outputStream = null;</span><br><span class="line">        Workbook workbook = null;</span><br><span class="line">        try {</span><br><span class="line">            workbook = new XSSFWorkbook();</span><br><span class="line">            Sheet sheet = workbook.createSheet("Sheet1");</span><br><span class="line">            for (int i = 0; i <span class="tag">&lt; <span class="attr">jsonArray.size</span>(); <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">                // 行号</span></span><br><span class="line"><span class="tag">                <span class="attr">Row</span> <span class="attr">row</span> = <span class="string">sheet.createRow(i);</span></span></span><br><span class="line"><span class="tag">                <span class="attr">JSONObject</span> <span class="attr">jsonObject</span> = <span class="string">jsonArray.getJSONObject(i);</span></span></span><br><span class="line"><span class="tag">                //列号</span></span><br><span class="line">                for (int j = 0; j &lt; jsonObject.size(); j++) {</span><br><span class="line">                    Cell cell = row.createCell(j);</span><br><span class="line">                    if(i == 0){</span><br><span class="line">                        sheet.setColumnWidth(j, 15*256);</span><br><span class="line">                    }</span><br><span class="line">                    if(jsonObject.get(String.valueOf(j)) != null){</span><br><span class="line">                        cell.setCellValue(String.valueOf(jsonObject.get(String.valueOf(j))));</span><br><span class="line">                    }else{</span><br><span class="line">                        cell.setCellValue("");</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            FileUtils.forceMkdirParent(new File(saveFilePath));</span><br><span class="line">            outputStream = new FileOutputStream(saveFilePath);</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        } catch(Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println("生成xlsx文件错误："+e);</span><br><span class="line">        } finally {</span><br><span class="line">            if (outputStream != null) {</span><br><span class="line">                outputStream.close();</span><br><span class="line">            }</span><br><span class="line">            if (workbook != null) {</span><br><span class="line">                workbook.close();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">String fileName = "输出文件绝对路径";</span><br><span class="line">JSONArray jsonArray = new JSONArray();</span><br><span class="line">···添加数据 </span><br><span class="line">JSONObject jsonObject = new JSONObject(true);</span><br><span class="line">jsonArray.add(jsonObject);</span><br><span class="line"> </span><br><span class="line">ExcelUtil.createFile(fileName,jsonArray);</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的几种批量操作 - MySql</title>
    <url>/2020/11/1605601494695/1605601494695/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>此处针对MySql的数据库操作,<br>datasource.url：jdbc:mysql://127.0.0.1:3306/data?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</p>
<h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><h4 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量新增</span><br><span class="line"> * @param params  参数1</span><br><span class="line"> * @param list 参数2</span><br><span class="line"> */</span><br><span class="line">void saveBatchData(@Param("params")Map&lt;String, Object&gt; map, @Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><p>此处的 “list” 为 dao里面的 @Param(“list”) 的 list</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveBatchData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span><br><span class="line">    insert into user_table</span><br><span class="line">    ( USER_NAME,USER_STATUS,CREATE_TIME,UPDATE_TIME ) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        ( #{item.userName},#{item.userStatus},#{item.createDate},#{item.updateDate} )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h4><p>数组:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="name">String</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">list.add("1");</span><br><span class="line">String[] stringArray = new String[list.size()];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量删除</span><br><span class="line"> * @param stringArray 参数</span><br><span class="line"> */</span><br><span class="line">void deleteBatchDataByArray(String[] stringArray);</span><br></pre></td></tr></tbody></table></figure></div>

<p>集合:</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量删除</span><br><span class="line"> * @param list 参数</span><br><span class="line"> */</span><br><span class="line">void deleteBatchDataByList(@Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><p>数组:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatchDataByArray"</span>&gt;</span></span><br><span class="line">    delete from user_table  where USER_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #{item}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>集合:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatchDataByList"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">    delete from user_table where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span>  <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">        ( USER_ID = #{item.userId} )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><h4 id="dao-2"><a href="#dao-2" class="headerlink" title="dao"></a>dao</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listData = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 批量更新 - mat未进件</span><br><span class="line"> * @param params  参数1</span><br><span class="line"> * @param list 参数2</span><br><span class="line"> */</span><br><span class="line">void updateBatchData(@Param("params")Map&lt;String, Object&gt; params, @Param("list")List&lt;Map&lt;String, Object&gt;&gt; list);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatchData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">        update user_table</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            USER_NAME = #{item.userName},</span><br><span class="line">            USER_STATUS = #{item.userStatus},</span><br><span class="line">            UPDATE_TIME = #{item.updateDate}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where</span><br><span class="line">            USER_ID = #{item.userId}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis遍历map</title>
    <url>/2020/11/1605605257925/1605605257925/</url>
    <content><![CDATA[<p>MyBatis是可以遍历map的，</p>
<h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><p>注意：要加@Param注解，否则不行</p>
<p>Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();<br>map.put(“USER_NAME”,”张三”);<br>map.put(“USER_STATUS”,”0”);<br>map.put(“UPDATE_TIME”,new Date());</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">int insertData(@Param("params") Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map);</span><br></pre></td></tr></tbody></table></figure></div>
<p>Map&lt;String,Object&gt; map = new LinkedHashMap&lt;&gt;();<br>map.put(“1”,”张三”);<br>map.put(“2”,”李四”);</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">int deleteBatch(@Param("params") Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map);</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>注意：collection=”params.entrySet()” 或者 collection=”params” 都行</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertData"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    insert into user_table</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span>  <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #{key}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     values </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span>  <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">           #{value}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    delete from user_table where USER_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #{key}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Redis配置</title>
    <url>/2020/11/1605606341401/1605606341401/</url>
    <content><![CDATA[<p>修改原生的yml配置，采取自定义模式，<br>配置文件仅为动态值，如不需要则可删除，代码设有默认值，</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis end --&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置文件：redis-config.properties</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">#  redis set</span><br><span class="line">spring.redis.database=1</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.password=</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cache.CacheManager;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.RedisPassword;</span><br><span class="line">import org.springframework.data.redis.connection.RedisStandaloneConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: RedisConfig.java</span><br><span class="line"> * @description: Redis配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@EnableCaching</span><br><span class="line">@PropertySource(value = {"classpath:redis-config.properties"},encoding = "UTF-8")</span><br><span class="line">public class RedisConfig{</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.database:0}")</span><br><span class="line">    private int database;</span><br><span class="line">    @Value("${spring.redis.host:localhost}")</span><br><span class="line">    private String host;</span><br><span class="line">    @Value("${spring.redis.port:6379}")</span><br><span class="line">    private int port;</span><br><span class="line">    @Value("${spring.redis.password:}")</span><br><span class="line">    private String password;</span><br><span class="line">    @Value("${spring.redis.timeout:10000}")</span><br><span class="line">    private long timeout;</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.pool.maxTotal:30}")</span><br><span class="line">    private int maxTotal;</span><br><span class="line">    @Value("${spring.redis.pool.maxIdle:30}")</span><br><span class="line">    private int maxIdle;</span><br><span class="line">    @Value("${spring.redis.pool.minIdle:10}")</span><br><span class="line">    private int minIdle;</span><br><span class="line">    @Value("${spring.redis.pool.maxWaitMillis:10000}")</span><br><span class="line">    private int maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    @Value("${spring.redis.testOnBorrow:true}")</span><br><span class="line">    private boolean testOnBorrow;</span><br><span class="line">    @Value("${spring.redis.testOnReturn:false}")</span><br><span class="line">    private boolean testOnReturn;</span><br><span class="line">    @Value("${spring.redis.testWhileIdle:true}")</span><br><span class="line">    private boolean testWhileIdle;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisConnectionFactory lettuceConnectionFactory() {</span><br><span class="line">        GenericObjectPoolConfig genericObjectPoolConfig = new GenericObjectPoolConfig();</span><br><span class="line">        genericObjectPoolConfig.setMaxTotal(maxTotal);</span><br><span class="line">        genericObjectPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">        genericObjectPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        genericObjectPoolConfig.setMinIdle(minIdle);</span><br><span class="line">        genericObjectPoolConfig.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        genericObjectPoolConfig.setTestOnReturn(testOnReturn);</span><br><span class="line">        genericObjectPoolConfig.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        // 单点redis</span><br><span class="line">        RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration();</span><br><span class="line">        redisConfig.setDatabase(database);</span><br><span class="line">        redisConfig.setHostName(host);</span><br><span class="line">        redisConfig.setPort(port);</span><br><span class="line">        if (password != null &amp;&amp; !"".equals(password)) {</span><br><span class="line">            redisConfig.setPassword(RedisPassword.of(password));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder()</span><br><span class="line">                .poolConfig(genericObjectPoolConfig)</span><br><span class="line">                .commandTimeout(Duration.ofMillis(timeout))</span><br><span class="line">                .shutdownTimeout(Duration.ZERO)</span><br><span class="line">                .build();</span><br><span class="line">        return new LettuceConnectionFactory(redisConfig,clientConfig);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置自定义redisTemplate</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> redisTemplate(RedisConnectionFactory redisConnectionFactory) {</span><br><span class="line">        System.out.println("★★★★★加载 bean - RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> ★★★★★");</span><br><span class="line">        RedisTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> redisTemplate = new RedisTemplate<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值 替换默认序列化</span><br><span class="line">        Jackson2JsonRedisSerializer<span class="tag">&lt;<span class="name">Object</span>&gt;</span> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<span class="tag">&lt;&gt;</span>(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        //使用StringRedisSerializer来序列化和反序列化redis的key值</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        //事务支持</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存配置管理器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {</span><br><span class="line">        System.out.println("★★★★★加载 bean - cacheManager ★★★★★");</span><br><span class="line">        //以锁写入的方式创建RedisCacheWriter对象</span><br><span class="line">        RedisCacheWriter writer = RedisCacheWriter.lockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        //创建默认缓存配置对象</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        return new RedisCacheManager(writer, config);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private RedisTemplate<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ValueOperations<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> valueOperations = redisTemplate.opsForValue();</span><br><span class="line">valueOperations.set("admin","");</span><br></pre></td></tr></tbody></table></figure></div>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>poi(3.17)解析excel - 2007 续.1</title>
    <url>/2020/11/1606102218582/1606102218582/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: ExcelUtil.java</span><br><span class="line"> * @description: excel 工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> */</span><br><span class="line">public class ExcelUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析数据</span><br><span class="line">     */</span><br><span class="line">	private static List&lt;Map&lt;String, String&gt;&gt; getData(FileInputStream input) throws IOException {</span><br><span class="line">            List&lt;Map&lt;String,String&gt;&gt; mapList = new ArrayList&lt;&gt;();</span><br><span class="line">            Workbook wb = null;</span><br><span class="line">            try {</span><br><span class="line">                wb = new XSSFWorkbook(input);</span><br><span class="line">                // 获得第一个Sheet1</span><br><span class="line">                Sheet sheet = wb.getSheetAt(0);</span><br><span class="line">                // 获得第一行表头，计算列数</span><br><span class="line">                int columnNum = sheet.getRow(0).getPhysicalNumberOfCells();</span><br><span class="line">                // 遍历数据</span><br><span class="line">                sheet.rowIterator().forEachRemaining(row -&gt;{</span><br><span class="line">                    Map<span class="tag">&lt;<span class="name">String,String</span>&gt;</span> jsonMap = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">                    for (int i = 0; i <span class="tag">&lt; <span class="attr">columnNum</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">Cell</span> <span class="attr">cell</span> = <span class="string">row.getCell(i);</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">String</span> <span class="attr">val</span> = <span class="string">""</span>;</span></span><br><span class="line"><span class="tag">                        <span class="attr">if</span> (<span class="attr">cell</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                            // 首先强制设置成<span class="attr">string</span>类型</span></span><br><span class="line"><span class="tag">                            <span class="attr">cell.setCellType</span>(<span class="attr">CellType.STRING</span>);</span></span><br><span class="line"><span class="tag">                            // 再读取值</span></span><br><span class="line"><span class="tag">                            <span class="attr">val</span> = <span class="string">getXCellFormatValue(cell);</span></span></span><br><span class="line"><span class="tag">                        }</span></span><br><span class="line"><span class="tag">                        <span class="attr">jsonMap.put</span>(<span class="attr">String.valueOf</span>(<span class="attr">i</span>), <span class="attr">val</span>);</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                    <span class="attr">mapList.add</span>(<span class="attr">jsonMap</span>);</span></span><br><span class="line"><span class="tag">                });</span></span><br><span class="line"><span class="tag">            } <span class="attr">catch</span> (<span class="attr">FileNotFoundException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                <span class="attr">log.error</span>("找不到<span class="attr">xlsx</span>文件",<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">throw</span> <span class="attr">new</span> <span class="attr">IOException</span>(<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">            } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                <span class="attr">log.error</span>("解析<span class="attr">xlsx</span>文件错误",<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">throw</span> <span class="attr">new</span> <span class="attr">IOException</span>(<span class="attr">e</span>);</span></span><br><span class="line"><span class="tag">            } <span class="attr">finally</span> {</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span> (<span class="attr">wb</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                    <span class="attr">try</span> {</span></span><br><span class="line"><span class="tag">                        <span class="attr">wb.close</span>();</span></span><br><span class="line"><span class="tag">                    } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                }</span></span><br><span class="line"><span class="tag">                <span class="attr">if</span> (<span class="attr">input</span> != <span class="string">null)</span> {</span></span><br><span class="line"><span class="tag">                    <span class="attr">try</span> {</span></span><br><span class="line"><span class="tag">                        <span class="attr">input.close</span>();</span></span><br><span class="line"><span class="tag">                    } <span class="attr">catch</span> (<span class="attr">IOException</span> <span class="attr">e</span>) {</span></span><br><span class="line"><span class="tag">                        <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                }</span></span><br><span class="line"><span class="tag">            }</span></span><br><span class="line"><span class="tag">            <span class="attr">return</span> <span class="attr">mapList</span>;</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="/2020/11/1605159781717/1605159781717/">poi(3.17)解析excel - 2007</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java发送邮件</title>
    <url>/2021/01/1611916009068/1611916009068/</url>
    <content><![CDATA[<p>本文以 Java 发送邮件功能，采用commons-email模式执行</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发送邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.mail.EmailException;</span><br><span class="line">import org.apache.commons.mail.HtmlEmail;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: MailUtil.java</span><br><span class="line"> * @description: 邮件工具类</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2020/10/27 17:09</span><br><span class="line"> */</span><br><span class="line">public class MailUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构建器</span><br><span class="line">     */</span><br><span class="line">    public static class EmailInfo {</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * SMTP 服务器 端口</span><br><span class="line">         */</span><br><span class="line">        private String mailServer;</span><br><span class="line">        private Integer mailPort;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发件人 账号</span><br><span class="line">         */</span><br><span class="line">        private String mailNick;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发件人 账号</span><br><span class="line">         */</span><br><span class="line">        private String mailUsername;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发件人 密码</span><br><span class="line">         */</span><br><span class="line">        private String mailPassword;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 邮件标题</span><br><span class="line">         */</span><br><span class="line">        private String title;</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 邮件内容</span><br><span class="line">         */</span><br><span class="line">        private String content;</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 收件人</span><br><span class="line">         */</span><br><span class="line">        private List<span class="tag">&lt;<span class="name">String</span>&gt;</span> receivers;</span><br><span class="line"></span><br><span class="line">        boolean ssl;</span><br><span class="line"></span><br><span class="line">        public EmailInfo(String mailServer,Integer mailPort,String mailNick,String mailUsername,</span><br><span class="line">            String mailPassword,String title,String content,List<span class="tag">&lt;<span class="name">String</span>&gt;</span> receivers,boolean ssl) {</span><br><span class="line">            this.mailServer = mailServer;</span><br><span class="line">            this.mailPort = mailPort;</span><br><span class="line">            this.mailNick = mailNick;</span><br><span class="line">            this.mailUsername = mailUsername;</span><br><span class="line">            this.mailPassword = mailPassword;</span><br><span class="line">            this.title = title;</span><br><span class="line">            this.content = content;</span><br><span class="line">            this.receivers = receivers;</span><br><span class="line">            this.ssl = ssl;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        public MailUtil send() throws Exception {</span><br><span class="line">            return new MailUtil(this);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private MailUtil(EmailInfo emailInfo) throws Exception {</span><br><span class="line">        HtmlEmail email = new HtmlEmail();</span><br><span class="line">        // 通过Server 发送邮件</span><br><span class="line">        email.setHostName(emailInfo.mailServer);</span><br><span class="line">        email.setSmtpPort(emailInfo.mailPort);</span><br><span class="line">        //设定smtp服务器的认证资料信息</span><br><span class="line">        email.setAuthentication(emailInfo.mailUsername, emailInfo.mailPassword);</span><br><span class="line">        email.setStartTLSEnabled(false);</span><br><span class="line">        email.setSSLOnConnect(emailInfo.ssl);</span><br><span class="line">        try {</span><br><span class="line">            // 设定发件人</span><br><span class="line">            email.setFrom(emailInfo.mailUsername,emailInfo.mailNick);</span><br><span class="line">            // 设定收件人 （多人）</span><br><span class="line">            int size = emailInfo.receivers.size();</span><br><span class="line">            email.addTo(emailInfo.receivers.toArray(new String[size]));</span><br><span class="line">            // 设定内容的语言集</span><br><span class="line">            email.setCharset("UTF-8");</span><br><span class="line">            email.setDebug(false);</span><br><span class="line">            // 设定主题</span><br><span class="line">            email.setSubject(emailInfo.title);</span><br><span class="line">            // 设定邮件内容</span><br><span class="line">            email.setHtmlMsg(emailInfo.content);</span><br><span class="line">            // 发送邮件</span><br><span class="line">            email.send();</span><br><span class="line">            System.out.println("邮件发送成功！");</span><br><span class="line">        } catch (EmailException e) {</span><br><span class="line">            System.out.println("邮件发送失败！");</span><br><span class="line">            throw new Exception(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h4 id="新浪"><a href="#新浪" class="headerlink" title="新浪"></a>新浪</h4><p><img src="/2021/01/1611916009068/1611916009068/20210129184031.png" alt="20210129184031"><br>String mailServer = smtp.sinanet.com<br>Integer mailPort = 25<br>boolean ssl = false</p>
<h4 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h4><p><img src="/2021/01/1611916009068/1611916009068/20210129184347.png" alt="20210129184347"><br><img src="/2021/01/1611916009068/1611916009068/20210129184412.png" alt="20210129184412"><br>如若开启了授权密码，请以授权密码当做用户密码使用<br>String mailServer = smtp.163.com<br>Integer mailPort = 25<br>boolean ssl = false</p>
<h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h4><p><img src="/2021/01/1611916009068/1611916009068/20210129190030.png" alt="20210129190030"><br>如若开启了授权密码，请以授权密码当做用户密码使用<br>String mailServer = smtp.qq.com<br>Integer mailPort = 465<br>boolean ssl = true</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void 测试邮件() {</span><br><span class="line">    try {</span><br><span class="line">        String content = "<span class="meta">&lt;!doctypehtml&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">en</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">UTF-8</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>";</span><br><span class="line">        // 发送邮件信息</span><br><span class="line">        String mailServer = "smtp.sinanet.com";</span><br><span class="line">        Integer mailPort = 25;</span><br><span class="line">        String mailNick = "demon";</span><br><span class="line">        String mailUsername = "demon@xxxxxxxxx";</span><br><span class="line">        String mailPassword = "123456789";</span><br><span class="line">        String title = "本地测试";</span><br><span class="line">        List<span class="tag">&lt;<span class="name">String</span>&gt;</span> receivers = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        receivers.add("1097305826@qq.com");</span><br><span class="line">        MailUtil.EmailInfo emailInfo = new MailUtil.EmailInfo(mailServer,mailPort,</span><br><span class="line">                mailNick,mailUsername,mailPassword,title, content,receivers,false);</span><br><span class="line">        // 发送邮件</span><br><span class="line">        emailInfo.send();</span><br><span class="line">    } catch (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java查询上海公交实时到站</title>
    <url>/2021/02/1612343895210/1612343895210/</url>
    <content><![CDATA[<p>数据由查询《上海发布》获取：<br>上海发布地址：<a href="https://shanghaicity.openservice.kankanews.com/" target="_blank" rel="noopener">https://shanghaicity.openservice.kankanews.com/</a><br>上海发布-实时公交：<a href="https://shanghaicity.openservice.kankanews.com/public/bus" target="_blank" rel="noopener">https://shanghaicity.openservice.kankanews.com/public/bus</a></p>
<h3 id="获取公交页面"><a href="#获取公交页面" class="headerlink" title="获取公交页面"></a>获取公交页面</h3><p>返回的是一个HTML页面</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">String doGet = HttpClientUtil.doGet("https://shanghaicity.openservice.kankanews.com/public/bus/mes/sid/edf7aec0b3543b5abd876f5c545cb1e8");</span><br><span class="line">System.out.println(doGet);</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="获取公交路线sid"><a href="#获取公交路线sid" class="headerlink" title="获取公交路线sid"></a>获取公交路线sid</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">参数字段描述：</span><br><span class="line">idnum：公交路线；如：浦东2路，636路 等，</span><br><span class="line"></span><br><span class="line">结果字段描述：</span><br><span class="line">sid：公交节站ID</span><br></pre></td></tr></tbody></table></figure></div>

<p>//查询 浦东2路 的sid</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">String param = "";</span><br><span class="line">String httpUrl = "https://shanghaicity.openservice.kankanews.com/public/bus/get?idnum=浦东2路";</span><br><span class="line">String result = HttpClientUtil.doPost(httpUrl, param);</span><br><span class="line">System.out.println(result);</span><br><span class="line">//返回结果（公交路线是否存在都会返回）</span><br><span class="line">{"mes": "","sid": "edf7aec0b3543b5abd876f5c545cb1e8"}</span><br></pre></td></tr></tbody></table></figure></div>
<p>RestClient模拟请求：<br><img src="/2021/02/1612343895210/1612343895210/20210204135903.png" alt="20210204135903"></p>
<h3 id="获取公交实时信息"><a href="#获取公交实时信息" class="headerlink" title="获取公交实时信息"></a>获取公交实时信息</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">参数字段描述：</span><br><span class="line">stoptype：公交节站方向(0-正向；1-反向)</span><br><span class="line">stopid：公交节站节点</span><br><span class="line">sid：公交节站ID</span><br><span class="line"></span><br><span class="line">结果字段描述：</span><br><span class="line">terminal：车牌</span><br><span class="line">stopdis：距离当前站还有多少站</span><br><span class="line">time：距离当前站还有多少时间(秒)</span><br></pre></td></tr></tbody></table></figure></div>

<p>//查询 浦东2路(胜利路川沙路 -&gt; 南曹路唐陆公路) 的车辆到达唐镇地址站</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">String httpUrl = "https://shanghaicity.openservice.kankanews.com/public/bus/Getstop";</span><br><span class="line">String param = "stoptype=0&amp;stopid=23&amp;sid=edf7aec0b3543b5abd876f5c545cb1e8";</span><br><span class="line">String result = HttpClientUtil.doPost(httpUrl, param);</span><br><span class="line">System.out.println(result);</span><br><span class="line">//返回结果(当有车辆时)</span><br><span class="line">[{"@attributes":{"cod":"浦东2路"},"terminal":"沪D-61543无障碍","stopdis":"2","distance":"1007","time":"158"}]</span><br><span class="line">//返回结果(当无车辆时)</span><br><span class="line">{"error":"-2"}</span><br><span class="line">//返回结果(当sid不存在时)</span><br><span class="line">{"error":"0"}</span><br></pre></td></tr></tbody></table></figure></div>
<p>RestClient模拟请求：<br><img src="/2021/02/1612343895210/1612343895210/20210204135818.png" alt="20210204135818"></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>工具类：<a href="/2021/02/1612419197069/1612419197069/">HttpClientUtil</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java原生URL模拟请求</title>
    <url>/2021/02/1612419197069/1612419197069/</url>
    <content><![CDATA[<p>采用原始URL进行模拟请求</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: HttpClientUtil</span><br><span class="line"> * @Description: Java原生URL模拟请求</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2021/2/4 10:45</span><br><span class="line"> */</span><br><span class="line">public class HttpClientUtil {</span><br><span class="line"></span><br><span class="line">    public static String doGet(String httpUrl) {</span><br><span class="line">        HttpURLConnection connection;</span><br><span class="line">        try {</span><br><span class="line">            // 创建远程url连接对象</span><br><span class="line">            URL url = new URL(httpUrl);</span><br><span class="line">            // 通过远程url连接对象打开一个连接，强转成httpURLConnection类</span><br><span class="line">            connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            // 设置连接方式：get</span><br><span class="line">            connection.setRequestMethod("GET");</span><br><span class="line">            // 设置连接主机服务器的超时时间：15000毫秒</span><br><span class="line">            connection.setConnectTimeout(15000);</span><br><span class="line">            // 设置读取远程返回的数据时间：60000毫秒</span><br><span class="line">            connection.setReadTimeout(60000);</span><br><span class="line">            // 发送请求</span><br><span class="line">            connection.connect();</span><br><span class="line">            return getResult(null,connection);</span><br><span class="line">        } catch (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static String doPost(String httpUrl, String param) {</span><br><span class="line">        HttpURLConnection connection;</span><br><span class="line">        OutputStream os;</span><br><span class="line">        try {</span><br><span class="line">            URL url = new URL(httpUrl);</span><br><span class="line">            // 通过远程url连接对象打开连接</span><br><span class="line">            connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            // 设置连接请求方式</span><br><span class="line">            connection.setRequestMethod("POST");</span><br><span class="line">            // 设置连接主机服务器超时时间：15000毫秒</span><br><span class="line">            connection.setConnectTimeout(15000);</span><br><span class="line">            // 设置读取主机服务器返回数据超时时间：60000毫秒</span><br><span class="line">            connection.setReadTimeout(60000);</span><br><span class="line">            // 默认值为：false，当向远程服务器传送数据/写数据时，需要设置为true</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">            // 默认值为：true，当前向远程服务读取数据时，设置为true，该参数可有可无</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            // 设置传入参数的格式:请求参数应该是 name1=value1&amp;name2=value2 的形式。</span><br><span class="line">            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");</span><br><span class="line">            // 通过连接对象获取一个输出流</span><br><span class="line">            os = connection.getOutputStream();</span><br><span class="line">            // 通过输出流对象将参数写出去/传输出去,它是通过字节数组写出的</span><br><span class="line">            os.write(param.getBytes());</span><br><span class="line">            return getResult(os,connection);</span><br><span class="line">        } catch (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private static String getResult(OutputStream os,HttpURLConnection connection){</span><br><span class="line">        int responseCode = 200;</span><br><span class="line">        InputStream is = null;</span><br><span class="line">        BufferedReader br = null;</span><br><span class="line">        try {</span><br><span class="line">            String result = null;</span><br><span class="line">            if (connection.getResponseCode() == responseCode) {</span><br><span class="line">                is = connection.getInputStream();</span><br><span class="line">                br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));</span><br><span class="line">                StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">                String temp;</span><br><span class="line">                while ((temp = br.readLine()) != null) {</span><br><span class="line">                    stringBuilder.append(temp);</span><br><span class="line">                }</span><br><span class="line">                result = stringBuilder.toString();</span><br><span class="line">            }</span><br><span class="line">            return result;</span><br><span class="line">        } catch (Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        } finally {</span><br><span class="line">            getClose(br,os,is,connection);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private static void getClose(BufferedReader br,OutputStream os, InputStream is,HttpURLConnection connection ){</span><br><span class="line">        // 关闭资源</span><br><span class="line">        if (null != br) {</span><br><span class="line">            try {</span><br><span class="line">                br.close();</span><br><span class="line">            } catch (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if (null != os) {</span><br><span class="line">            try {</span><br><span class="line">                os.close();</span><br><span class="line">            } catch (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if (null != is) {</span><br><span class="line">            try {</span><br><span class="line">                is.close();</span><br><span class="line">            } catch (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if(connection != null){</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">String doGet = HttpClientUtil.doGet("https://www.baidu.com/");</span><br><span class="line">System.out.println(doGet);</span><br></pre></td></tr></tbody></table></figure></div>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>一款现代化的博客 - Halo</title>
    <url>/2021/02/1614323515573/1614323515573/</url>
    <content><![CDATA[<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>Halo：<a href="https://halo.run/" target="_blank" rel="noopener">https://halo.run/</a><br>下载资源：<a href="https://dl.halo.run/" target="_blank" rel="noopener">https://dl.halo.run/</a><br>说明：从 1.4.3 起，版本要求为 11 以上的版本。1.4.3 以下需要 1.8 以上的版本。<br>所以下载 1.4.2 版本即可：Windows 点击下载 , Linux wget下载</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>Windows：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">java -jar halo-1.4.2.jar</span><br></pre></td></tr></tbody></table></figure></div>
<p>Linux：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">java -jar halo-1.4.2.jar</span><br><span class="line">或</span><br><span class="line">nohup java -jar halo-1.4.2.jar &amp;</span><br><span class="line">或</span><br><span class="line">nohup java -jar halo-1.4.2.jar --server.port=8083 &amp;</span><br><span class="line"></span><br><span class="line">关闭：</span><br><span class="line">lsof -i:8090 或 lsof -i:8083</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>访问路径：/<br>默认端口：8090</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">Halo：</span><br><span class="line">    http://127.0.0.1:8090</span><br><span class="line">Halo admin：</span><br><span class="line">    http://127.0.0.1:8090/admin</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>第一次访问会进行初始化信息信息存在<br>在系统当前用户目录下产生一个 .halo 的文件夹，绝对路径为 ~/.halo、/root/.halo/<br><img src="/2021/02/1614323515573/1614323515573/20210226155924.png" alt="20210226155924"><br>填写内容，一路下一步即可，直至到登录页面。<br><img src="/2021/02/1614323515573/1614323515573/20210226165723.png" alt="20210226165723"></p>
<p><a href="http://www.zhuqiaolun.com:8090">我的Halo博客</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>halo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaFx之TreeView的事件</title>
    <url>/2021/03/1614672011404/1614672011404/</url>
    <content><![CDATA[<p>判断TreeView是否点击到节点上</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">Node node = event.getPickResult().getIntersectedNode();</span><br><span class="line">boolean flag = node instanceof TreeCell &amp;&amp; ((TreeCell) node).getText() != null;</span><br><span class="line">if (node instanceof Text || flag) {</span><br><span class="line">    String name = (String) ((TreeItem)tree.getSelectionModel().getSelectedItem()).getValue();</span><br><span class="line">    System.out.println("Node click: " + name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>给TreeView 添加 鼠标点击事件<br>MouseButton.NONE 无判断<br>左键：event.getButton().compareTo(MouseButton.PRIMARY)  == 1<br>滚轮：event.getButton().compareTo(MouseButton.MIDDLE)  == 1<br>右键：event.getButton().compareTo(MouseButton.SECONDARY)  == 1</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">tree.addEventFilter(MouseEvent.MOUSE_CLICKED, event -&gt; {</span><br><span class="line">   switch (event.getButton().compareTo(MouseButton.NONE)){</span><br><span class="line">       case 1:</span><br><span class="line">           System.out.println("【左键】Node click: " + name);</span><br><span class="line">           break;</span><br><span class="line">       case 2:</span><br><span class="line">           System.out.println("【滚轮】Node click: " + name);</span><br><span class="line">           break;</span><br><span class="line">       case 3:</span><br><span class="line">           System.out.println("【右键】Node click: " + name);</span><br><span class="line">           break;</span><br><span class="line">       default:</span><br><span class="line">           break;</span><br><span class="line">   }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div>


<p>完成代码如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package sample;</span><br><span class="line"></span><br><span class="line">import javafx.application.Application;</span><br><span class="line">import javafx.scene.Node;</span><br><span class="line">import javafx.scene.Scene;</span><br><span class="line">import javafx.scene.control.TreeCell;</span><br><span class="line">import javafx.scene.control.TreeItem;</span><br><span class="line">import javafx.scene.control.TreeView;</span><br><span class="line">import javafx.scene.input.MouseButton;</span><br><span class="line">import javafx.scene.input.MouseEvent;</span><br><span class="line">import javafx.scene.layout.StackPane;</span><br><span class="line">import javafx.scene.text.Text;</span><br><span class="line">import javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: TreeViewMouseEvent</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2021/3/1 11:16</span><br><span class="line"> */</span><br><span class="line">public class TreeViewMouseEvent extends Application {</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        launch(args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start(Stage primaryStage) {</span><br><span class="line">        TreeItem<span class="tag">&lt;<span class="name">String</span>&gt;</span> rootItem = new TreeItem<span class="tag">&lt;&gt;</span>("Root");</span><br><span class="line">        rootItem.setExpanded(true);</span><br><span class="line"></span><br><span class="line">        TreeItem<span class="tag">&lt;<span class="name">String</span>&gt;</span> itemA = new TreeItem<span class="tag">&lt;&gt;</span>("A");</span><br><span class="line">        TreeItem<span class="tag">&lt;<span class="name">String</span>&gt;</span> itemB = new TreeItem<span class="tag">&lt;&gt;</span>("B");</span><br><span class="line">        rootItem.getChildren().add(itemA);</span><br><span class="line">        rootItem.getChildren().add(itemB);</span><br><span class="line"></span><br><span class="line">        TreeView<span class="tag">&lt;<span class="name">String</span>&gt;</span> tree = new TreeView<span class="tag">&lt;&gt;</span>(rootItem);</span><br><span class="line">        // 给TreeView 添加 鼠标点击事件</span><br><span class="line">        tree.addEventFilter(MouseEvent.MOUSE_CLICKED, event -&gt; {</span><br><span class="line">            Node node = event.getPickResult().getIntersectedNode();</span><br><span class="line">            boolean flag = node instanceof TreeCell &amp;&amp; ((TreeCell) node).getText() != null;</span><br><span class="line">            if (node instanceof Text || flag) {</span><br><span class="line">                String name = (String) ((TreeItem)tree.getSelectionModel().getSelectedItem()).getValue();</span><br><span class="line">                switch (event.getButton().compareTo(MouseButton.NONE)){</span><br><span class="line">                    case 1:</span><br><span class="line">                        System.out.println("【左键】Node click: " + name);</span><br><span class="line">                        break;</span><br><span class="line">                    case 2:</span><br><span class="line">                        System.out.println("【滚轮】Node click: " + name);</span><br><span class="line">                        break;</span><br><span class="line">                    case 3:</span><br><span class="line">                        System.out.println("【右键】Node click: " + name);</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        break;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        StackPane root = new StackPane();</span><br><span class="line">        root.getChildren().add(tree);</span><br><span class="line">        primaryStage.setScene(new Scene(root, 600, 400));</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaFx</category>
      </categories>
      <tags>
        <tag>TreeView</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaFx之CheckBox变成单选模式</title>
    <url>/2021/03/1614740320445/1614740320445/</url>
    <content><![CDATA[<p>CheckBox：复选框模式</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">CheckBox checkBox = new CheckBox();</span><br><span class="line">checkBox.setId("checkBox");</span><br><span class="line">checkBox.setUserData("1234");</span><br><span class="line">checkBox.setMaxWidth(30);</span><br><span class="line">checkBox.setOnAction(event -&gt; {</span><br><span class="line">    if (checkBox.isSelected()) {</span><br><span class="line">        checkBox.setSelected(true);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div>
<p>CheckBox：单选框模式，将其他选中的情况变成false</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">CheckBox checkBox = new CheckBox();</span><br><span class="line">checkBox.setId("checkBox");</span><br><span class="line">checkBox.setUserData("1234");</span><br><span class="line">checkBox.setMaxWidth(30);</span><br><span class="line">checkBox.setOnAction(event -&gt; {</span><br><span class="line">    if (checkBox.isSelected()) {</span><br><span class="line">        ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> contentChildren = content.getChildren();</span><br><span class="line">        if (contentChildren != null &amp;&amp; contentChildren.size() &gt; 0) {</span><br><span class="line">            for (Node node : contentChildren) {</span><br><span class="line">                CheckBox checkBox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">                checkBox.setSelected(false);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        checkBox.setSelected(true);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div>
<p><a href="/2021/03/1614738290477/1614738290477/">示例应用</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaFx</category>
      </categories>
      <tags>
        <tag>CheckBox</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的restTemplate的使用</title>
    <url>/2021/03/1614741214844/1614741214844/</url>
    <content><![CDATA[<p><a href="/2020/06/1592881660483/1592881660483/">RestTemplate配置</a></p>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><ul>
<li>设置<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">// Text</span><br><span class="line">headers.set("Content-Type", "application/json;charset=UTF-8");</span><br><span class="line">// File</span><br><span class="line">headers.set("Content-Type", "multipart/form-data");</span><br><span class="line">// Form</span><br><span class="line">headers.set("Content-Type", "application/x-www-form-urlencoded");</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><ul>
<li>query<br>eg：<br><a href="https://www.zhuqiaolun.com/weixinz/api/test/get?username=demon&amp;password=123456">https://www.zhuqiaolun.com/weixinz/api/test/get?username=demon&amp;password=123456</a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">//将请求头部和参数合成一个请求</span><br><span class="line">UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);</span><br><span class="line">builder.queryParam("username",username);</span><br><span class="line">builder.queryParam("password",password);</span><br><span class="line">//将请求头部和参数合成一个请求</span><br><span class="line">HttpEntity<span class="php"><span class="meta">&lt;?</span>&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(headers);</span></span><br><span class="line"><span class="php">restTemplate.exchange(builder.build().encode().toUri(), HttpMethod.GET, httpEntity, String<span class="class">.<span class="keyword">class</span>);</span></span></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><p>eg：<br><a href="https://www.zhuqiaolun.com/weixinz/api/test/post?username=demon&amp;password=123456">https://www.zhuqiaolun.com/weixinz/api/test/post?username=demon&amp;password=123456</a><br>body：{“username”:”demon”}</p>
<ul>
<li><p>application/json</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">JsonNodeFactory jsonNodeFactory = JsonNodeFactory.instance;</span><br><span class="line">ObjectNode params = jsonNodeFactory.objectNode();</span><br><span class="line">{</span><br><span class="line">    params.put("username", username);</span><br><span class="line">    params.put("password", password);</span><br><span class="line">}</span><br><span class="line">//将请求头部和参数合成一个请求</span><br><span class="line">System.out.println(params.toString());</span><br><span class="line">HttpEntity<span class="tag">&lt;<span class="name">String</span>&gt;</span> httpEntity = new HttpEntity<span class="tag">&lt;&gt;</span>(params.toString(), headers);</span><br><span class="line">restTemplate.postForEntity(url, httpEntity, String.class);</span><br></pre></td></tr></tbody></table></figure></div></li>
<li><p>application/x-www-form-urlencoded</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">MultiValueMap<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params = new LinkedMultiValueMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">params.add("username", username);</span><br><span class="line">params.add("password", password);</span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; httpEntity = new HttpEntity&lt;&gt;(params, headers);</span><br><span class="line">return restTemplate.postForEntity(url, httpEntity, String.class);</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>multipart/form-data</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">MultiValueMap<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params = new LinkedMultiValueMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">params.add("file", new org.springframework.core.io.FileSystemResource(new java.io.File("AAA")));</span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; httpEntity = new HttpEntity&lt;&gt;(params, headers);</span><br><span class="line">restTemplate.postForEntity(url, httpEntity, String.class);</span><br></pre></td></tr></tbody></table></figure></div>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 MultipartFile[] 做多文件上传的功能</title>
    <url>/2021/03/1614764345833/1614764345833/</url>
    <content><![CDATA[<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>文件属性名： name = file<br>参数非必传：required = false</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@PostMapping(value = "/upload",consumes="multipart/form-data")</span><br><span class="line">public String fileUpload(@RequestParam(value = "file",required = false) MultipartFile[] multipartFiles,</span><br><span class="line">                         @RequestParam(value = "username",required = false)String username,</span><br><span class="line">                         @RequestParam(value = "password",required = false)String password) throws IOException{</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; fileList = new ArrayList&lt;&gt;();</span><br><span class="line">    for (MultipartFile multipartFile : multipartFiles) {</span><br><span class="line">        String fileName = multipartFile.getOriginalFilename();</span><br><span class="line">        assert fileName != null;</span><br><span class="line">        byte[] bytes = multipartFile.getBytes();</span><br><span class="line">        String fileExt = FilenameUtils.getExtension(fileName);</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> map = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        map.put("fileName",fileName);</span><br><span class="line">        map.put("fileExt",fileExt);</span><br><span class="line">        map.put("fileSize",bytes.length);</span><br><span class="line">        map.put("username",username);</span><br><span class="line">        map.put("password",password);</span><br><span class="line">        //转存，不需要进行IO流关闭处理</span><br><span class="line">        multipartFile.transferTo(new File("D:/dest.txt"));</span><br><span class="line">        fileList.add(map);</span><br><span class="line">    }</span><br><span class="line">    return JSON.toJSONString(fileList);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><ul>
<li><p>Java模拟请求</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void 多文件上传() {</span><br><span class="line">    File file1 = new File("D:\\test\\1234.xlsx");</span><br><span class="line">    File file2 = new File("D:\\test\\5678.xlsx");</span><br><span class="line">    String url = "https://www.zhuqiaolun.com/weixinz/api/test/upload";</span><br><span class="line">    HttpHeaders headers = new HttpHeaders();</span><br><span class="line">    headers.set("Content-Type", "multipart/form-data");</span><br><span class="line">    MultiValueMap<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> params = new LinkedMultiValueMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    params.add("file", new FileSystemResource(file1));</span><br><span class="line">    params.add("file", new FileSystemResource(file2));</span><br><span class="line">    params.add("username","admin");</span><br><span class="line">    params.add("password","123456");</span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; httpEntity = new HttpEntity&lt;&gt;(params, headers);</span><br><span class="line">    ResponseEntity<span class="tag">&lt;<span class="name">String</span>&gt;</span> responseEntity = restTemplate.postForEntity(url, httpEntity, String.class);</span><br><span class="line">    System.out.println(responseEntity.getStatusCodeValue());</span><br><span class="line">    System.out.println(responseEntity.getBody());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>Form表单提交</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>多文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.zhuqiaolun.com/weixinz/api/test/upload"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"moreFile"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>Ajax表单提交</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>多文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"moreFileForm"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"moreFileSub()"</span>&gt;</span>ajax上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://libs.baidu.com/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moreFileSub</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData($(<span class="string">"#moreFileForm"</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">    $.ajax({</span></span><br><span class="line"><span class="actionscript">        url : <span class="string">"https://www.zhuqiaolun.com/weixinz/api/test/upload"</span>,</span></span><br><span class="line"><span class="actionscript">        type : <span class="string">'POST'</span>,</span></span><br><span class="line">        data : formData,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 告诉jQuery不要去处理发送的数据</span></span></span><br><span class="line"><span class="actionscript">        processData : <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span></span><br><span class="line"><span class="actionscript">        contentType : <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> : <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        dataType : <span class="string">"json"</span>,</span></span><br><span class="line"><span class="actionscript">        success : <span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#result"</span>).text(<span class="built_in">JSON</span>.stringify(result))</span></span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决SpringBoot2.x的跨域请求问题,开启跨域</title>
    <url>/2021/03/1614825070134/1614825070134/</url>
    <content><![CDATA[<p>请求错误描述：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">When allowCredentials is true, allowedOrigins cannot contain the special value "*“since </span><br><span class="line">that cannot be set on the “Access-Control-Allow-Origin” response header. </span><br><span class="line">To allow credentials to a set of origins, list them explicitly or consider using"allowedOriginPatterns” instead.</span><br></pre></td></tr></tbody></table></figure></div>

<p>SpringBoot2.3.x</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) {</span><br><span class="line">        registry</span><br><span class="line">                // 设置允许跨域的路由</span><br><span class="line">                .addMapping("/**")</span><br><span class="line">                // 设置允许跨域请求的域名</span><br><span class="line">                .allowedOrigins("*")</span><br><span class="line">                // 是否允许证书（cookies）</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                // 设置允许的方法</span><br><span class="line">                .allowedMethods("GET", "POST", "DELETE", "PUT")</span><br><span class="line">                // 跨域允许时间</span><br><span class="line">                .maxAge(3600);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>SpringBoot2.4.x</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) {</span><br><span class="line">        registry</span><br><span class="line">                // 设置允许跨域的路由</span><br><span class="line">                .addMapping("/**")</span><br><span class="line">                // 设置允许跨域请求的域名</span><br><span class="line">                .allowedOriginPatterns("*")</span><br><span class="line">                // 是否允许证书（cookies）</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                // 设置允许的方法</span><br><span class="line">                .allowedMethods("GET", "POST", "DELETE", "PUT")</span><br><span class="line">                // 跨域允许时间</span><br><span class="line">                .maxAge(3600);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>查看jar包的JDK版本</title>
    <url>/2021/03/1615358998628/1615358998628/</url>
    <content><![CDATA[<h3 id="通过版本"><a href="#通过版本" class="headerlink" title="通过版本"></a>通过版本</h3><p>通常在使用Java程序时，需要对JDK版本进行核对，JDK构建版本不等于执行的运行版本，需要通过执行类来辨别</p>
<ul>
<li><p>通过反编译工具jd-gui查看清单文件<br><img src="/2021/03/1615358998628/1615358998628/20210310150822.png" alt="20210310150822"></p>
</li>
<li><p>通过编译的class文件来查看文件信息<br><img src="/2021/03/1615358998628/1615358998628/20210310151415.png" alt="20210310151415"></p>
</li>
</ul>
<h3 id="通过十六进制"><a href="#通过十六进制" class="headerlink" title="通过十六进制"></a>通过十六进制</h3><ul>
<li>Notepad++<br>在 Notepad++ 中添加插件：HEX-Editor，点击安装后自动重启<br>需要以十六进制显示时，点击菜单的：【插件】－【Hex-Editor】－【View in Hex】即可<br><img src="/2021/03/1615358998628/1615358998628/20210310154106.png" alt="20210310154106"><br>只看第一行数据，前面8个字节 CA FE BA BE 是固定的，<br>后4个字节 00 00 是次版本号，次版本号后面的4个字节 00 33  是jdk的版本号，如我这里使用的是jdk1.8</li>
</ul>
<h3 id="版本查看"><a href="#版本查看" class="headerlink" title="版本查看"></a>版本查看</h3><p>以下为各个JDK版本对应的数值</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">J2SE 8.0 = 52(0x33 hex)</span><br><span class="line">J2SE 7.0 = 51(0x32 hex)</span><br><span class="line">J2SE 6.0 = 50 (0x32 hex)</span><br><span class="line">J2SE 5.0 = 49 (0x31 hex)</span><br><span class="line">JDK 1.4 = 48 (0x30 hex)</span><br><span class="line">JDK 1.3 = 47 (0x2F hex)</span><br><span class="line">JDK 1.2 = 46 (0x2E hex)</span><br><span class="line">JDK 1.1 = 45 (0x2D hex)</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器：下载，插件安装</title>
    <url>/2021/03/1615363585427/1615363585427/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">谷歌浏览器</a><br><img src="/2021/03/1615363585427/1615363585427/20210310161717.png" alt="20210310161717"></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://chrome.zzzmh.cn/#ext" target="_blank" rel="noopener">极简插件</a><br><img src="/2021/03/1615363585427/1615363585427/20210310161745.png" alt="20210310161745"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>世界</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>删除没用的本地Jar</title>
    <url>/2021/03/1615374410736/1615374410736/</url>
    <content><![CDATA[<p>有时候maven下载的jar不完整或者是错误，则此时需要删除多余的jar</p>
<p>引入依赖</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>完整代码</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Collection;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class="line">import org.apache.commons.io.filefilter.RegexFileFilter;</span><br><span class="line">import org.apache.commons.io.filefilter.TrueFileFilter;</span><br><span class="line"></span><br><span class="line">public class 删除没用的Jar {</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) {</span><br><span class="line"></span><br><span class="line">		System.out.println("执行开始···");</span><br><span class="line">		String filePath = "D:\\apache\\Repositories\\Maven";</span><br><span class="line">		deleteFile(filePath,true);</span><br><span class="line">		System.out.println();</span><br><span class="line">		deleteDir(filePath,true);</span><br><span class="line">		System.out.println("执行完成！！！");</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	private static void deleteFile(String filePath,boolean flag){</span><br><span class="line">		RegexFileFilter regexFileFilter = new RegexFileFilter(".*(lastUpdated).*");</span><br><span class="line">		Collection<span class="tag">&lt;<span class="name">File</span>&gt;</span> listFiles1 = FileUtils.listFiles(new File(filePath),regexFileFilter, DirectoryFileFilter.INSTANCE);</span><br><span class="line">		for (File file : listFiles1) {</span><br><span class="line">			try {</span><br><span class="line">				System.out.println(file.getCanonicalPath());</span><br><span class="line">				if(flag){</span><br><span class="line">					FileUtils.forceDelete(file);</span><br><span class="line">				}</span><br><span class="line">			} catch (IOException e) {</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	private static void deleteDir(String filePath,boolean flag){</span><br><span class="line">		Collection<span class="tag">&lt;<span class="name">File</span>&gt;</span> listFiles1 = FileUtils.listFilesAndDirs(new File(filePath), TrueFileFilter.INSTANCE,DirectoryFileFilter.DIRECTORY);</span><br><span class="line">		for (File file : listFiles1) {</span><br><span class="line">			try {</span><br><span class="line">				if(file.isDirectory()){</span><br><span class="line">					if(file.getName().startsWith("$") || file.getName().startsWith("unknown") || file.getName().startsWith("error")){</span><br><span class="line">						System.out.println(file.getCanonicalPath());</span><br><span class="line">						if(flag){</span><br><span class="line">							FileUtils.forceDelete(file);</span><br><span class="line">						}</span><br><span class="line">					}</span><br><span class="line">				}</span><br><span class="line">			} catch (IOException e) {</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java自定义异常</title>
    <url>/2021/03/1615440974493/1615440974493/</url>
    <content><![CDATA[<p>作用：定义异常来生声明异常，保证程序可以准确捕获异常。</p>
<p>自定义异常继承类有3中：RuntimeException、Exception、Throwable<br>一般会选择继承Exception和RuntimeException，如果调用者一定要处理抛出的异常且没有要求，就继承RuntimeException。</p>
<p>定义异常</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2021/3/5 14:44</span><br><span class="line"> * @description: 空异常</span><br><span class="line"> */</span><br><span class="line">public class EmptyException extends RuntimeException {</span><br><span class="line"></span><br><span class="line">    private String code;</span><br><span class="line">    </span><br><span class="line">    public EmptyException(String code, String message) {</span><br><span class="line">        super(message);</span><br><span class="line">        this.code = code;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    public String getCode() {</span><br><span class="line">        return code;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    public void setCode(String code) {</span><br><span class="line">        this.code = code;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>使用异常</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">throw new EmptyException("40004", "参数不能为空");</span><br></pre></td></tr></tbody></table></figure></div>

<p>捕获异常</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">try {</span><br><span class="line">    System.out.println("业务处理···");</span><br><span class="line">}catch (EmptyException e){</span><br><span class="line">    System.out.println("捕获自定义异常···");</span><br><span class="line">    e.getCode();</span><br><span class="line">    e.getMessage();</span><br><span class="line">}catch (Exception e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println("捕获抛出的异常···");</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>对MyBatis-Plus3.x的插件配置使用</title>
    <url>/2021/03/1615799438937/1615799438937/</url>
    <content><![CDATA[<p>MyBatis-Plus 是自带分页插件的Page，可用查询SQL并列使用<br><img src="/2021/03/1615799438937/1615799438937/20210315171503.png" alt="20210315171503"></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>添加依赖</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 连接数据库 start --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库 连接 、事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库 mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库 mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接数据库 end --&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置bean使用插件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @className: MybatisPlusConfig.java</span><br><span class="line"> * @description:  MyBatis-Plus的插件配置</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2020/8/25 11:24</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class MybatisPlusConfig {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分页插件</span><br><span class="line">     * paginationInterceptor.setLimit(你的最大单页限制数量，默认 500 条，小于 0 如 -1 不受限制);</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInterceptor paginationInterceptor() {</span><br><span class="line">        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();</span><br><span class="line">        paginationInterceptor.setLimit(-1);</span><br><span class="line">        // 设置数据库需要根据mp版本使用set方法,以下为3.3.2</span><br><span class="line">        paginationInterceptor.setDbType(DbType.MYSQL);</span><br><span class="line">        // 设置数据库需要根据mp版本使用set方法,以下为3.2.0</span><br><span class="line">        paginationInterceptor.setDialectType(DbType.MYSQL.getDb());</span><br><span class="line">        return paginationInterceptor;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>xxMapper.xml：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getList"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"map"</span> &gt;</span></span><br><span class="line">    SELECT * FROM system_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>xxMapper.java：</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询列表信息(分页)</span><br><span class="line"> * @param page   分页标志</span><br><span class="line"> * @param params 参数</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; getListPage(IPage&lt;Map&lt;String, Object&gt;&gt; page, @Param("params") Map&lt;String, Object&gt; params);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查询列表信息</span><br><span class="line"> * @param params 参数</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; getList(@Param("params") Map&lt;String,Object&gt; params);</span><br></pre></td></tr></tbody></table></figure>

<p>xxService.java:</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询列表信息(分页)</span><br><span class="line"> * @param current 每页数</span><br><span class="line"> * @param size 当前页</span><br><span class="line"> * @param map 参数</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; getListPage(long current, long size, Map&lt;String, Object&gt; map);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查询列表信息</span><br><span class="line"> * @param map 参数</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; getList(Map&lt;String, Object&gt; map);</span><br></pre></td></tr></tbody></table></figure>

<p>xxServiceImpl.java:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Page&lt;Map&lt;String, Object&gt;&gt; getListPage(long current, long size, Map&lt;String, Object&gt; map) {</span><br><span class="line">    IPage&lt;Map&lt;String, Object&gt;&gt; page = new Page&lt;&gt;(current, size);</span><br><span class="line">    return this.baseMapper.getListPage(page, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Map&lt;String,Object&gt;&gt; getList(Map&lt;String,Object&gt; map) {</span><br><span class="line">    return this.baseMapper.getList(map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>xxController.java:</p>
<ul>
<li>已分页查询<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">long current = Long.parseLong(jsonParam.getString("current"));</span><br><span class="line">long size = Long.parseLong(jsonParam.getString("size"));</span><br><span class="line">Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; serviceListPage = systemService.getListPage(current,size,map);</span><br><span class="line">JSONObject jsonObject = ListUtil.getData(serviceListPage);</span><br><span class="line">System.out.println(jsonObject);</span><br></pre></td></tr></tbody></table></figure></div></li>
<li>不分页查询<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map = new LinkedHashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; serviceList = systemService.getJobList(map);</span><br><span class="line">System.out.println(serviceList);</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<p>ListUtil：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line">import java.util.Map;</span><br><span class="line">/**</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2021/2/25 17:08</span><br><span class="line"> * @description: 分页列表数据</span><br><span class="line"> */</span><br><span class="line">public class ListUtil {</span><br><span class="line"></span><br><span class="line">    public static JSONObject getData(Page&lt;Map&lt;String, Object&gt;&gt; listPage) {</span><br><span class="line">        JSONObject responseBean = new JSONObject(true);</span><br><span class="line">        //当前页码</span><br><span class="line">        responseBean.put("current", listPage.getCurrent());</span><br><span class="line">        //当前页条数</span><br><span class="line">        responseBean.put("size", listPage.getSize());</span><br><span class="line">        //总共条数</span><br><span class="line">        responseBean.put("total", listPage.getTotal());</span><br><span class="line">        //总共页数</span><br><span class="line">        responseBean.put("page", listPage.getPages());</span><br><span class="line">        //当前页数据</span><br><span class="line">        responseBean.put("data", listPage.getRecords());</span><br><span class="line">        //是否有上一页</span><br><span class="line">        responseBean.put("hasPrevious", listPage.hasPrevious());</span><br><span class="line">        //是否有下一页</span><br><span class="line">        responseBean.put("hasNext", listPage.hasNext());</span><br><span class="line">        return responseBean;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的一些内置写法</title>
    <url>/2021/03/1615800535123/1615800535123/</url>
    <content><![CDATA[<p>在hexo中发表文章时需要相互引用，以下为一些内置写法，有些需要先安装modiles</p>
<p>1.引用内部图片</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">在根目录下执行如下命令</span><br><span class="line">  npm install hexo-asset-image</span><br><span class="line">  </span><br><span class="line">此时再执行命令 </span><br><span class="line">  hexo new article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,</span><br><span class="line"></span><br><span class="line">我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</span><br><span class="line">[img_name](img_name.jpg) #文章中的图片资源路径格式</span><br><span class="line">如：[20210315171503](1615799438937/20210315171503.png)</span><br></pre></td></tr></tbody></table></figure></div>

<p>2.引用内部链接</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">[标题]({% post_path %}/访问路径)</span><br><span class="line">如：[标题]({% post_path %}/2021/03/1615800535123/1615800535123/)</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis返回多个结果集</title>
    <url>/2021/03/1615802317183/1615802317183/</url>
    <content><![CDATA[<p>MyBatis在查询时可以将单一的结果集并列查询组成多结果集；<br>如：多重List&lt;Map&lt;String,Object&gt;&gt;格式，Object可再次为 List&lt;Map&lt;String,Object&gt;&gt;结构</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span>,</span><br><span class="line">        <span class="attr">"userRole"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test1"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test2"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>xxMapper.xml：<br>xml中以userCode为连接，collection的property属性值为二级key</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"testResultMap"</span> <span class="attr">type</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userCode"</span> <span class="attr">column</span>=<span class="string">"user_Code"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"user_Name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userRemark"</span> <span class="attr">column</span>=<span class="string">"user_Remark"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"userRole"</span> <span class="attr">javaType</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleCode"</span> <span class="attr">column</span>=<span class="string">"role_Code"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userCode"</span> <span class="attr">column</span>=<span class="string">"user_Code"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_Name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleRemark"</span> <span class="attr">column</span>=<span class="string">"role_Remark"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTestListResultMap"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"testResultMap"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    	test_user.user_Code,</span><br><span class="line">    	test_user.user_Name,</span><br><span class="line">    	test_user.user_Remark,</span><br><span class="line">    	test_role.role_Code,</span><br><span class="line">    	test_role.role_Name,</span><br><span class="line">    	test_role.role_Remark,</span><br><span class="line">    	test_role.user_Code</span><br><span class="line">    FROM</span><br><span class="line">    	test_user</span><br><span class="line">    LEFT JOIN test_role ON test_role.user_Code = test_user.user_Code</span><br><span class="line">    WHERE</span><br><span class="line">    	test_user.user_Code IN (</span><br><span class="line">    		SELECT</span><br><span class="line">    			test_role.user_Code</span><br><span class="line">    		FROM</span><br><span class="line">    			test_role</span><br><span class="line">    		WHERE</span><br><span class="line">    			test_role.user_Code = test_user.user_Code</span><br><span class="line">    		GROUP BY</span><br><span class="line">    			test_role.user_Code</span><br><span class="line">    	)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>xxMapper.java：</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询列表信息</span><br><span class="line"> * @param params 参数</span><br><span class="line"> * @return 返回</span><br><span class="line"> */</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectTestListResultMap(@Param("params") Map&lt;String, Object&gt; params);</span><br></pre></td></tr></tbody></table></figure>

<p>结果集：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"userRemark"</span>: <span class="string">"备注用户"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="attr">"userRole"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test1"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"a"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test2"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"b"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"userCode"</span>: <span class="string">"RBXLWCzGcqDncROd90Jd"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"userRemark"</span>: <span class="string">"备注用户"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"李四"</span>,</span><br><span class="line">        <span class="attr">"userRole"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test3"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"c"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"TALKA0I56vYUp2cVaczZ"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test4"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"d"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"TALKA0I56vYUp2cVaczZ"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test5"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"e"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"TALKA0I56vYUp2cVaczZ"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"userCode"</span>: <span class="string">"TALKA0I56vYUp2cVaczZ"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"userRemark"</span>: <span class="string">"备注用户"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"王五"</span>,</span><br><span class="line">        <span class="attr">"userRole"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test6"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"f"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"EMbvTsuedRjItaD0aZzq"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"roleRemark"</span>: <span class="string">"备注权限"</span>,</span><br><span class="line">                <span class="attr">"roleCode"</span>: <span class="string">"test7"</span>,</span><br><span class="line">                <span class="attr">"roleName"</span>: <span class="string">"g"</span>,</span><br><span class="line">                <span class="attr">"userCode"</span>: <span class="string">"EMbvTsuedRjItaD0aZzq"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"userCode"</span>: <span class="string">"EMbvTsuedRjItaD0aZzq"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>

<p>表：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for test_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `test_role`;</span><br><span class="line">CREATE TABLE `test_role` (</span><br><span class="line">  `tr_PKeyId` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',</span><br><span class="line">  `role_Code` varchar(32) DEFAULT NULL COMMENT '角色代码',</span><br><span class="line">  `role_Name` varchar(32) DEFAULT NULL COMMENT '角色名称',</span><br><span class="line">  `user_Code` varchar(32) DEFAULT NULL COMMENT '用户代码',</span><br><span class="line">  `role_Remark` varchar(100) DEFAULT NULL COMMENT '备注',</span><br><span class="line">  PRIMARY KEY (`tr_PKeyId`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COMMENT='角色表';</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of test_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `test_role` VALUES ('16', 'test1', 'a', 'RBXLWCzGcqDncROd90Jd', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('19', 'test2', 'b', 'RBXLWCzGcqDncROd90Jd', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('20', 'test3', 'c', 'TALKA0I56vYUp2cVaczZ', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('21', 'test4', 'd', 'TALKA0I56vYUp2cVaczZ', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('22', 'test5', 'e', 'TALKA0I56vYUp2cVaczZ', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('23', 'test6', 'f', 'EMbvTsuedRjItaD0aZzq', '备注权限');</span><br><span class="line">INSERT INTO `test_role` VALUES ('24', 'test7', 'g', 'EMbvTsuedRjItaD0aZzq', '备注权限');</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for test_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `test_user`;</span><br><span class="line">CREATE TABLE `test_user` (</span><br><span class="line">  `tu_PKeyId` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',</span><br><span class="line">  `user_Name` varchar(32) DEFAULT NULL COMMENT '用户名称',</span><br><span class="line">  `user_Code` varchar(32) DEFAULT NULL COMMENT '用户代码',</span><br><span class="line">  `user_Remark` varchar(100) DEFAULT NULL COMMENT '备注',</span><br><span class="line">  PRIMARY KEY (`tu_PKeyId`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='用户表';</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of test_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `test_user` VALUES ('10', '张三', 'RBXLWCzGcqDncROd90Jd', '备注用户');</span><br><span class="line">INSERT INTO `test_user` VALUES ('11', '李四', 'TALKA0I56vYUp2cVaczZ', '备注用户');</span><br><span class="line">INSERT INTO `test_user` VALUES ('12', '王五', 'EMbvTsuedRjItaD0aZzq', '备注用户');</span><br><span class="line">INSERT INTO `test_user` VALUES ('13', '赵六', 'GosZVJuSCA70TmeRnBJO', '备注用户');</span><br></pre></td></tr></tbody></table></figure></div>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat开启APR运行模式，优化并发性能 - Linux</title>
    <url>/2020/09/1599545396773/1599545396773/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Tomcat支持三种接收请求的处理方式：BIO、NIO、APR </p>
<p>BIO模式：阻塞式I/O操作，表示Tomcat使用的是传统Java I/O操作(即java.io包及其子包)。<br>Tomcat7以下版本默认情况下是以bio模式运行的，由于每个请求都要创建一个线程来处理，线程开销较大，不能处理高并发的场景，在三种模式中性能也最低。</p>
<p>NIO模式：是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。<br>是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，它拥有比传统I/O操作(bio)更好的并发运行性能。<br>Tomcat8以上版本，默认使用的就是NIO模式，不需要额外修改。</p>
<p>APR模式：简单理解，就是从操作系统级别解决异步IO问题，大幅度的提高服务器的处理和响应性能， 也是Tomcat运行高并发应用的首选模式。 </p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code>yum install -y apr-devel openssl-devel gcc make expat-devel libtool</code></pre><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>所需软件的下载地址：<br><a href="https://mirrors.cnnic.cn/apache/apr/" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/</a><br><a href="https://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-native.cgi</a></p>
<p>点击下载：<br><a href="https://mirrors.cnnic.cn/apache/apr/apr-1.7.0.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-1.7.0.tar.gz</a><br><a href="https://mirrors.cnnic.cn/apache/apr/apr-iconv-1.2.2.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-iconv-1.2.2.tar.gz</a><br><a href="https://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.gz" target="_blank" rel="noopener">https://mirrors.cnnic.cn/apache/apr/apr-util-1.6.1.tar.gz</a><br><a href="https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/source/tomcat-native-1.2.25-src.tar.gz" target="_blank" rel="noopener">https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.25/source/tomcat-native-1.2.25-src.tar.gz</a></p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p><img src="/2020/09/1599545396773/1599545396773/20200908153142.png" alt="20200908153142"></p>
<p>apr</p>
<pre><code>cd /usr/local/tomcat/src/apr-1.7.0
./configure --prefix=/usr/local/tomcat/src/apr
make &amp;&amp; make install</code></pre><p>apr-iconv</p>
<pre><code>cd /usr/local/tomcat/src/apr-iconv-1.2.2
./configure --with-apr=/usr/local/tomcat/src/apr --prefix=/usr/local/tomcat/src/apr-iconv
make &amp;&amp; make install</code></pre><p>apr-util</p>
<pre><code>cd apr-util-1.6.1/
./configure --with-apr=/usr/local/tomcat/src/apr --with-apr-iconv=/usr/local/tomcat/src/apr-iconv/bin/apriconv --prefix=/usr/local/tomcat/src/apr-util
make &amp;&amp; make install</code></pre><p>tomcat-native</p>
<pre><code>cd /usr/local/tomcat/src/tomcat-native-1.2.25-src/native
./configure --with-apr=/usr/local/tomcat/src/apr --with-java-home=/usr/local/java/jdk1.8.0_231
make &amp;&amp; make install</code></pre><p>profile</p>
<pre><code>echo -e 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/tomcat/src/apr/lib\nexport LD_RUN_PATH=$LD_RUN_PATH:/usr/local/tomcat/src/apr/lib' &gt;&gt; /etc/profile
source /etc/profile</code></pre><h3 id="配置APR"><a href="#配置APR" class="headerlink" title="配置APR"></a>配置APR</h3><p>打开 server.xml</p>
<pre><code>vim /usr/local/tomcat/apache-tomcat-9.0.27/conf/server.xml</code></pre><p>修改内容如下：</p>
<pre><code>&lt;Executor name="tomcatThreadPool" 
         namePrefix="catalina-exec-"
         maxThreads="300" 
         minSpareThreads="30"/&gt;
​
&lt;Connector executor="tomcatThreadPool" 
              port="8080" 
              protocol="org.apache.coyote.http11.Http11AprProtocol"
              connectionTimeout="20000"
              redirectPort="8443"
              acceptCount="900"
              disableUploadTimeout="true"
              URIEncoding="UTF-8"
              enableLookups="false"
              compression="on"
              compressionMinSize="1024"
              /&gt;
​
&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; ##注释掉下面那行，如果不用apache
&lt;!-- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt; --&gt;</code></pre><p>结果：<br><img src="/2020/09/1599545396773/1599545396773/20200908160528.png" alt="20200908160528"><br>注：如果非root用户启动失败，把apr环境变量在当前用户的.bash_profile中写一份</p>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>Executor参数说明</p>
<pre><code>name：共享线程池的名字。这是Connector为了共享线程池要引用的名字，该名字必须唯一。默认值：None；

namePrefix:在JVM上，每个运行线程都可以有一个name 字符串。这一属性为线程池中每个线程的name字符串设置了一个前缀，
            Tomcat将把线程号追加到这一前缀的后面。默认值：catalina-exec-；

maxThreads：该线程池可以容纳的最大线程数。默认值：150；

maxIdleTime：在Tomcat关闭一个空闲线程之前，允许空闲线程持续的时间(以毫秒为单位)。

            只有当前活跃的线程数大于minSpareThread的值，才会关闭空闲线程。默认值：60000(一分钟)。

minSpareThreads：Tomcat应该始终打开的最小不活跃线程数。默认值：4。

threadPriority：线程的等级。默认是Thread.NORM_PRIORITY</code></pre><p>Connector参数说明</p>
<pre><code>maxThreads :Tomcat 使用线程来处理接收的每个请求，这个值表示 Tomcat 可创建的最大的线程数，默认值是 200

minSpareThreads：最小空闲线程数，Tomcat 启动时的初始化的线程数，表示即使没有人使用也开这么多空线程等待，默认值是 10。

maxSpareThreads：最大备用线程数，一旦创建的线程超过这个值，Tomcat 就会关闭不再需要的 socket 线程。
​
上边配置的参数，最大线程 500（一般服务器足以），要根据自己的实际情况合理设置，设置越大会耗费内存和 CPU，
因为 CPU 疲于线程上下文切换，没有精力提供请求服务了，最小空闲线程数 20，线程最大空闲时间 60 秒，
当然允许的最大线程连接数还受制于操作系统的内核参数设置，设置多大要根据自己的需求与环境。
当然线程可以配置在“tomcatThreadPool”中，也可以直接配置在“Connector”中，但不可以重复配置。
​
URIEncoding：指定 Tomcat 容器的 URL 编码格式，语言编码格式这块倒不如其它 WEB 服务器软件配置方便，需要分别指定。

connnectionTimeout： 网络连接超时，单位：毫秒，设置为 0 表示永不超时，这样设置有隐患的。通常可设置为 30000 毫秒，可根据检测实际情况，适当修改。

enableLookups： 是否反查域名，以返回远程主机的主机名，取值为：true 或 false，如果设置为false，则直接返回IP地址，为了提高处理能力，应设置为 false。

disableUploadTimeout：上传时是否使用超时机制。

connectionUploadTimeout：上传超时时间，毕竟文件上传可能需要消耗更多的时间，这个根据你自己的业务需要自己调，
            以使Servlet有较长的时间来完成它的执行，需要与上一个参数一起配合使用才会生效。

acceptCount：指定当所有可以使用的处理请求的线程数都被使用时，可传入连接请求的最大队列长度，超过这个数的请求将不予处理，默认为100个。

keepAliveTimeout：长连接最大保持时间（毫秒），表示在下次请求过来之前，Tomcat 保持该连接多久，默认是使用 connectionTimeout 时间，-1 为不限制超时。

maxKeepAliveRequests：表示在服务器关闭之前，该连接最大支持的请求数。
            超过该请求数的连接也将被关闭，1表示禁用，-1表示不限制个数，默认100个，一般设置在100~200之间。

compression：是否对响应的数据进行 GZIP 压缩，off：表示禁止压缩；on：表示允许压缩（文本将被压缩）、force：表示所有情况下都进行压缩，默认值为off，
            压缩数据后可以有效的减少页面的大小，一般可以减小1/3左右，节省带宽。

compressionMinSize：表示压缩响应的最小值，只有当响应报文大小大于这个值的时候才会对报文进行压缩，如果开启了压缩功能，默认值就是2048。

compressableMimeType：压缩类型，指定对哪些类型的文件进行数据压缩。

noCompressionUserAgents="gozilla, traviata"： 对于以下的浏览器，不启用压缩。

如果已经对代码进行了动静分离，静态页面和图片等数据就不需要 Tomcat 处理了，那么也就不需要配置在 Tomcat 中配置压缩了。</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Zip4j - 压缩/解压（可设置密码）</title>
    <url>/2020/11/1605683417659/1605683417659/</url>
    <content><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.lingala.zip4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zip4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import net.lingala.zip4j.ZipFile;</span><br><span class="line">import net.lingala.zip4j.exception.ZipException;</span><br><span class="line">import net.lingala.zip4j.model.FileHeader;</span><br><span class="line">import net.lingala.zip4j.model.ZipParameters;</span><br><span class="line">import net.lingala.zip4j.model.enums.CompressionLevel;</span><br><span class="line">import net.lingala.zip4j.model.enums.CompressionMethod;</span><br><span class="line">import net.lingala.zip4j.model.enums.EncryptionMethod;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: Zip4jUtil</span><br><span class="line"> * @Description: zip 工具</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> */</span><br><span class="line">public class Zip4jUtil {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据给定密码压缩文件(s)到指定目录</span><br><span class="line">     *</span><br><span class="line">     * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @param files 单个文件或文件数组</span><br><span class="line">     * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败.</span><br><span class="line">     */</span><br><span class="line">    public static boolean compress(String destFileName, String password, File... files) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            ZipParameters parameters = new ZipParameters();</span><br><span class="line">            // 压缩方式 8</span><br><span class="line">            parameters.setCompressionMethod(CompressionMethod.DEFLATE);</span><br><span class="line">            // 压缩级别 5</span><br><span class="line">            parameters.setCompressionLevel(CompressionLevel.NORMAL);</span><br><span class="line">            if (!(password == null || "".equals(password))) {</span><br><span class="line">                parameters.setEncryptFiles(true);</span><br><span class="line">                // 加密方式 0</span><br><span class="line">                parameters.setEncryptionMethod(EncryptionMethod.ZIP_STANDARD);</span><br><span class="line">            }</span><br><span class="line">            ZipFile zipFile = new ZipFile(destFileName);</span><br><span class="line">            if (!(password == null || "".equals(password))) {</span><br><span class="line">                zipFile.setPassword(password.toCharArray());</span><br><span class="line">            }</span><br><span class="line">            for (File file : files) {</span><br><span class="line">                zipFile.addFile(file, parameters);</span><br><span class="line">            }</span><br><span class="line">            return true;</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据给定密码压缩文件(s)到指定位置</span><br><span class="line">     *</span><br><span class="line">     * @param destFileName 压缩文件存放绝对路径 e.g.:D:/upload/zip/demo.zip</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @param filePaths 单个文件路径或文件路径数组</span><br><span class="line">     * @return 最终的压缩文件存放的绝对路径,如果为false则说明压缩失败.</span><br><span class="line">     */</span><br><span class="line">    public static boolean compress(String destFileName, String password, String... filePaths) throws ZipException {</span><br><span class="line">        int size = filePaths.length;</span><br><span class="line">        File[] files = new File[size];</span><br><span class="line">        for (int i = 0; i <span class="tag">&lt; <span class="attr">size</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">            <span class="attr">files</span>[<span class="attr">i</span>] = <span class="string">new</span> <span class="attr">File</span>(<span class="attr">filePaths</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">return</span> <span class="attr">compress</span>(<span class="attr">destFileName</span>, <span class="attr">password</span>, <span class="attr">files</span>);</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /**</span></span><br><span class="line"><span class="tag">     * 根据给定密码压缩文件(<span class="attr">s</span>)到指定位置</span></span><br><span class="line"><span class="tag">     *</span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">destFileName</span> 压缩文件存放绝对路径 <span class="attr">e.g.:D:</span>/<span class="attr">upload</span>/<span class="attr">zip</span>/<span class="attr">demo.zip</span></span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">password</span> 密码(可为<span class="attr">null</span>)</span></span><br><span class="line"><span class="tag">     * @<span class="attr">param</span> <span class="attr">folder</span> 文件夹路径</span></span><br><span class="line"><span class="tag">     * @<span class="attr">return</span> 最终的压缩文件存放的绝对路径,如果为<span class="attr">false</span>则说明压缩失败<span class="attr">.</span></span></span><br><span class="line"><span class="tag">     */</span></span><br><span class="line"><span class="tag">    <span class="attr">public</span> <span class="attr">static</span> <span class="attr">boolean</span> <span class="attr">compressFolder</span>(<span class="attr">String</span> <span class="attr">destFileName</span>, <span class="attr">String</span> <span class="attr">password</span>, <span class="attr">String</span> <span class="attr">folder</span>) <span class="attr">throws</span> <span class="attr">ZipException</span> {</span></span><br><span class="line"><span class="tag">        <span class="attr">File</span> <span class="attr">folderParam</span> = <span class="string">new</span> <span class="attr">File</span>(<span class="attr">folder</span>);</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">folderParam.isDirectory</span>()) {</span></span><br><span class="line"><span class="tag">            <span class="attr">File</span>[] <span class="attr">files</span> = <span class="string">folderParam.listFiles();</span></span></span><br><span class="line"><span class="tag">            <span class="attr">return</span> <span class="attr">compress</span>(<span class="attr">destFileName</span>, <span class="attr">password</span>, <span class="attr">files</span>);</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">        <span class="attr">return</span> <span class="attr">false</span>;</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /**</span></span><br><span class="line"><span class="tag">     * 根据所给密码解压<span class="attr">zip</span>压缩包到指定目录</span></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 如果指定目录不存在,可以自动创建,不合法的路径将导致异常被抛出</span><br><span class="line">     *</span><br><span class="line">     * @param zipFile zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @param password 密码(可为null)</span><br><span class="line">     * @return 解压后的文件数组</span><br><span class="line">     * @throws ZipException 异常</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(File zipFile, String dest, String password) throws ZipException {</span><br><span class="line">        //1.判断指定目录是否存在</span><br><span class="line">        File destDir = new File(dest);</span><br><span class="line">        if (destDir.isDirectory() &amp;&amp; !destDir.exists()) {</span><br><span class="line">            boolean mkdir = destDir.mkdir();</span><br><span class="line">            System.out.println(mkdir);</span><br><span class="line">        }</span><br><span class="line">        //2.初始化zip工具</span><br><span class="line">        ZipFile zFile = new ZipFile(zipFile);</span><br><span class="line">        zFile.setCharset(Charset.forName("UTF-8"));</span><br><span class="line">        if (!zFile.isValidZipFile()) {</span><br><span class="line">            throw new ZipException("压缩文件不合法,可能被损坏.");</span><br><span class="line">        }</span><br><span class="line">        //3.判断是否已加密</span><br><span class="line">        if (zFile.isEncrypted()) {</span><br><span class="line">            zFile.setPassword(password.toCharArray());</span><br><span class="line">        }</span><br><span class="line">        //4.解压所有文件</span><br><span class="line">        zFile.extractAll(dest);</span><br><span class="line">        List headerList = zFile.getFileHeaders();</span><br><span class="line">        List<span class="tag">&lt;<span class="name">File</span>&gt;</span> extractedFileList = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        for(Object object : headerList) {</span><br><span class="line">            FileHeader fileHeader = (FileHeader)object;</span><br><span class="line">            if (!fileHeader.isDirectory()) {</span><br><span class="line">                extractedFileList.add(new File(destDir,fileHeader.getFileName()));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        File [] extractedFiles = new File[extractedFileList.size()];</span><br><span class="line">        extractedFileList.toArray(extractedFiles);</span><br><span class="line">        return extractedFiles;</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 解压无密码的zip压缩包到指定目录</span><br><span class="line">     * @param zipFile zip压缩包</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @return 解压后的文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(File zipFile, String dest) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(zipFile, dest, null);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 根据所给密码解压zip压缩包到指定目录</span><br><span class="line">     * @param zipFilePath zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @param password 压缩包密码</span><br><span class="line">     * @return 解压后的所有文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(String zipFilePath, String dest, String password) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(new File(zipFilePath), dest, password);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    /**</span><br><span class="line">     * 无密码解压压缩包到指定目录</span><br><span class="line">     * @param zipFilePath zip压缩包绝对路径</span><br><span class="line">     * @param dest 指定解压文件夹位置</span><br><span class="line">     * @return 解压后的所有文件数组</span><br><span class="line">     */</span><br><span class="line">    public static File[] deCompress(String zipFilePath, String dest) throws ZipException {</span><br><span class="line">        try {</span><br><span class="line">            return deCompress(new File(zipFilePath), dest, null);</span><br><span class="line">        } catch (ZipException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ZipException(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>压缩无密码：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 压缩无密码() {</span><br><span class="line">    String file1 = "D:\\test\\unzip\\333\\123.txt";</span><br><span class="line">    String file2 = "D:\\test\\unzip\\333\\456.txt";</span><br><span class="line">    String file3 = "D:\\test\\unzip\\333\\789.txt";</span><br><span class="line">    String file4 = "D:\\test\\unzip\\333\\789 - 副本.txt";</span><br><span class="line">    //压缩后的zip文件路径</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\5555.zip";</span><br><span class="line">    try {</span><br><span class="line">        System.out.println(Zip4jUtil.compress(zipFilePath1,null,file1,file2,file3,file4));</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>压缩有密码：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 压缩有密码() {</span><br><span class="line">    String file1 = "D:\\test\\unzip\\333\\123.txt";</span><br><span class="line">    String file2 = "D:\\test\\unzip\\333\\456.txt";</span><br><span class="line">    String file3 = "D:\\test\\unzip\\333\\789.txt";</span><br><span class="line">    //压缩后的zip文件路径</span><br><span class="line">    String zipFilePath2 = "D:\\test\\unzip\\6666.zip";</span><br><span class="line">    try {</span><br><span class="line">        System.out.println(Zip4jUtil.compress(zipFilePath2,"123",file1,file2,file3));</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>解压无密码：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 解压无密码() {</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\5555.zip";</span><br><span class="line">    File[] files = new File[0];</span><br><span class="line">    try {</span><br><span class="line">        files = Zip4jUtil.deCompress(zipFilePath1, "D:\\test\\unzip\\5555");</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    if(files != null){</span><br><span class="line">        System.out.println(files.length);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>解压有密码：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void 解压有密码() {</span><br><span class="line">    String zipFilePath1 = "D:\\test\\unzip\\6666.zip";</span><br><span class="line">    File[] files = new File[0];</span><br><span class="line">    try {</span><br><span class="line">        files = Zip4jUtil.deCompress(zipFilePath1, "D:\\test\\unzip\\6666", "123");</span><br><span class="line">    } catch (ZipException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    if(files != null){</span><br><span class="line">        System.out.println(files.length);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>J-Tools</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaFx之动态添加组件</title>
    <url>/2021/03/1614738290477/1614738290477/</url>
    <content><![CDATA[<p>本例主要是构建动态模板，采用VBox模式，<br>效果如下：<br><img src="/2021/03/1614738290477/1614738290477/20210303103350.png" alt="20210303103350"><br>按钮操作 - 添加栏位<br><img src="/2021/03/1614738290477/1614738290477/20210303103536.png" alt="20210303103536"><br>按钮操作 - 上移<br><img src="/2021/03/1614738290477/1614738290477/20210303103643.png" alt="20210303103643"><br>按钮操作 - 下移<br><img src="/2021/03/1614738290477/1614738290477/20210303103713.png" alt="20210303103713"></p>
<p>按钮添加鼠标事件setOnMouseClicked</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">Button addBtn = new Button("添加栏位");</span><br><span class="line">addBtn.setOnMouseClicked(addBtnMouseClicked());</span><br><span class="line">Button upBtn = new Button("上移");</span><br><span class="line">upBtn.setOnMouseClicked(upBtnMouseClicked());</span><br><span class="line">Button downBtn = new Button("下移");</span><br><span class="line">downBtn.setOnMouseClicked(downBtnMouseClicked());</span><br></pre></td></tr></tbody></table></figure></div>

<p>将内容面板content添加到滚动面板</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">ScrollPane scrollPane = new ScrollPane(content);</span><br><span class="line">scrollPane.setPannable(true);</span><br><span class="line">scrollPane.setStyle("-fx-background-color: #FFF;");</span><br><span class="line">BorderPane.setAlignment(scrollPane,Pos.CENTER);</span><br></pre></td></tr></tbody></table></figure></div>

<p>寻找面板上的组件，只有类型对应，强转也无报错</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> templateAttrChildren = content.getChildren();</span><br><span class="line">if (templateAttrChildren != null &amp;&amp; templateAttrChildren.size() &gt; 0) {</span><br><span class="line">    for (Node node : templateAttrChildren) {</span><br><span class="line">        CheckBox attrFieldCheckbox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">        System.out.println(attrFieldCheckbox.getUserData());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>移动操作：先获取当前组件对象，通过原始位置index进行remove，在进行位置add</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">上移：当移到最上层时index=1</span><br><span class="line">HBox hBox = (HBox) content.lookup("#" + checkBox.getParent().getId());</span><br><span class="line">int index = content.getChildren().indexOf(hBox);</span><br><span class="line">if (index &gt; 0) {</span><br><span class="line">    content.getChildren().remove(index);</span><br><span class="line">    content.getChildren().add(index - 1, hBox);</span><br><span class="line">}</span><br><span class="line">下移：当移到最下层时index=最大值</span><br><span class="line">HBox hBox = (HBox) content.lookup("#" + checkBox.getParent().getId());</span><br><span class="line">int index = content.getChildren().indexOf(hBox);</span><br><span class="line">if (index <span class="tag">&lt; <span class="attr">content.getChildren</span>()<span class="attr">.size</span>() <span class="attr">-</span> <span class="attr">1</span>) {</span></span><br><span class="line"><span class="tag">    <span class="attr">content.getChildren</span>()<span class="attr">.remove</span>(<span class="attr">index</span>);</span></span><br><span class="line"><span class="tag">    <span class="attr">content.getChildren</span>()<span class="attr">.add</span>(<span class="attr">index</span> + <span class="attr">1</span>, <span class="attr">hBox</span>);</span></span><br><span class="line"><span class="tag">}</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>事件EventHandler</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">private EventHandler<span class="tag">&lt;<span class="name">MouseEvent</span>&gt;</span> btnMouseClicked(){</span><br><span class="line">    return event -&gt; {</span><br><span class="line">        System.out.println("事件执行");</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>完整代码</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package sample;</span><br><span class="line"></span><br><span class="line">import javafx.application.Application;</span><br><span class="line">import javafx.collections.FXCollections;</span><br><span class="line">import javafx.collections.ObservableList;</span><br><span class="line">import javafx.event.EventHandler;</span><br><span class="line">import javafx.geometry.Insets;</span><br><span class="line">import javafx.geometry.Pos;</span><br><span class="line">import javafx.scene.Node;</span><br><span class="line">import javafx.scene.Scene;</span><br><span class="line">import javafx.scene.control.*;</span><br><span class="line">import javafx.scene.input.MouseEvent;</span><br><span class="line">import javafx.scene.layout.BorderPane;</span><br><span class="line">import javafx.scene.layout.HBox;</span><br><span class="line">import javafx.scene.layout.StackPane;</span><br><span class="line">import javafx.scene.layout.VBox;</span><br><span class="line">import javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: VBox动态添加组件</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2021/3/2 16:16</span><br><span class="line"> */</span><br><span class="line">public class 动态添加组件 extends Application {</span><br><span class="line"></span><br><span class="line">    private static VBox content = new VBox();</span><br><span class="line">    private static String[] attrType = new String[]{"常量", "变量"};</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        launch(args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start(Stage primaryStage) {</span><br><span class="line">        // Center - 动态内容</span><br><span class="line">        content.setAlignment(Pos.TOP_CENTER);</span><br><span class="line">        content.setSpacing(3);</span><br><span class="line">        // 加载初始数据</span><br><span class="line">        getContentHbox(new AttributeVo().setAttrId("123456").setAttrName("测试1").setAttrType(0).setAttrValue("123"));</span><br><span class="line">        getContentHbox(new AttributeVo().setAttrId("345678").setAttrName("测试2").setAttrType(1).setAttrValue("321"));</span><br><span class="line"></span><br><span class="line">        // 初始化</span><br><span class="line">        BorderPane borderPane = new BorderPane();</span><br><span class="line">        borderPane.setPadding(new Insets(15,8,15,8));</span><br><span class="line">        // Top</span><br><span class="line">        VBox topVbox = new VBox();</span><br><span class="line">        Label title = new Label("栏位列表");</span><br><span class="line">        topVbox.getChildren().add(title);</span><br><span class="line">        borderPane.setTop(topVbox);</span><br><span class="line">        // Center</span><br><span class="line">        borderPane.setCenter(getCenterPane());</span><br><span class="line">        // Bottom</span><br><span class="line">        HBox bottomHbox = new HBox();</span><br><span class="line">        bottomHbox.setAlignment(Pos.CENTER);</span><br><span class="line">        Button saveBtn = new Button("保存");</span><br><span class="line">        saveBtn.setOnMouseClicked(saveBtnMouseClicked());</span><br><span class="line">        bottomHbox.getChildren().add(saveBtn);</span><br><span class="line">        borderPane.setBottom(bottomHbox);</span><br><span class="line">        // 将内容添加到主面板</span><br><span class="line">        StackPane root = new StackPane();</span><br><span class="line">        root.getChildren().add(borderPane);</span><br><span class="line">        primaryStage.setScene(new Scene(root, 800, 600));</span><br><span class="line">        primaryStage.setResizable(false);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private BorderPane getCenterPane(){</span><br><span class="line">        BorderPane borderPane = new BorderPane();</span><br><span class="line">        // Top - 按钮</span><br><span class="line">        HBox topBox = new HBox();</span><br><span class="line">        topBox.setAlignment(Pos.CENTER_RIGHT);</span><br><span class="line">        topBox.setPadding(new Insets(0,5,5,0));</span><br><span class="line">        topBox.setSpacing(10);</span><br><span class="line">        Button addBtn = new Button("添加栏位");</span><br><span class="line">        addBtn.setOnMouseClicked(addBtnMouseClicked());</span><br><span class="line">        Button upBtn = new Button("上移");</span><br><span class="line">        upBtn.setOnMouseClicked(upBtnMouseClicked());</span><br><span class="line">        Button downBtn = new Button("下移");</span><br><span class="line">        downBtn.setOnMouseClicked(downBtnMouseClicked());</span><br><span class="line">        topBox.getChildren().addAll(addBtn,upBtn,downBtn);</span><br><span class="line">        borderPane.setTop(topBox);</span><br><span class="line">        // Center - 表格内容</span><br><span class="line">        borderPane.setCenter(getContent());</span><br><span class="line">        return borderPane;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private BorderPane getContent(){</span><br><span class="line">        System.out.println("添加初始化内容");</span><br><span class="line">        BorderPane borderPane = new BorderPane();</span><br><span class="line">        // Top - 栏位列表</span><br><span class="line">        HBox hBox = new HBox();</span><br><span class="line">        hBox.setAlignment(Pos.CENTER_LEFT);</span><br><span class="line">        hBox.setPrefHeight(30.0);</span><br><span class="line">        hBox.setSpacing(5);</span><br><span class="line">        Label label1 = new Label("栏位名称");</span><br><span class="line">        label1.setPrefWidth(220);</span><br><span class="line">        label1.setAlignment(Pos.CENTER);</span><br><span class="line">        Label label2 = new Label("栏位类型");</span><br><span class="line">        label2.setPrefWidth(100);</span><br><span class="line">        label2.setAlignment(Pos.CENTER);</span><br><span class="line">        Label label3 = new Label("栏位数值");</span><br><span class="line">        label3.setPrefWidth(350);</span><br><span class="line">        label3.setAlignment(Pos.CENTER);</span><br><span class="line">        hBox.getChildren().addAll(label1,label2,label3);</span><br><span class="line">        borderPane.setTop(hBox);</span><br><span class="line">        // 将内容添加到滚动面板</span><br><span class="line">        ScrollPane scrollPane = new ScrollPane(content);</span><br><span class="line">        scrollPane.setPannable(true);</span><br><span class="line">        scrollPane.setStyle("-fx-background-color: #FFF;");</span><br><span class="line">        BorderPane.setAlignment(scrollPane,Pos.CENTER);</span><br><span class="line"></span><br><span class="line">        borderPane.setCenter(scrollPane);</span><br><span class="line">        return borderPane;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 按钮事件 - 添加栏位</span><br><span class="line">     */</span><br><span class="line">    private EventHandler<span class="tag">&lt;<span class="name">MouseEvent</span>&gt;</span> addBtnMouseClicked(){</span><br><span class="line">        return event -&gt; {</span><br><span class="line">            //添加栏位</span><br><span class="line">            getContentHbox(new AttributeVo().setAttrId(UUID.randomUUID().toString()).setAttrType(0));</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态区域操作</span><br><span class="line">     * @param attributeVo 参数</span><br><span class="line">     */</span><br><span class="line">    private void getContentHbox(AttributeVo attributeVo){</span><br><span class="line">        System.out.println("添加ID:"+attributeVo.getAttrId());</span><br><span class="line">        HBox hBox = new HBox(5);</span><br><span class="line">        hBox.setId(UUID.randomUUID().toString());</span><br><span class="line">        hBox.setAlignment(Pos.CENTER_LEFT);</span><br><span class="line">        //栏位选取</span><br><span class="line">        CheckBox attrFieldCheckbox = new CheckBox();</span><br><span class="line">        attrFieldCheckbox.setId("attrFieldCheckbox");</span><br><span class="line">        attrFieldCheckbox.setUserData(attributeVo.getAttrId());</span><br><span class="line">        attrFieldCheckbox.setMaxWidth(30);</span><br><span class="line">        attrFieldCheckbox.setOnAction(event -&gt; {</span><br><span class="line">            if (attrFieldCheckbox.isSelected()) {</span><br><span class="line">                ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> contentChildren = content.getChildren();</span><br><span class="line">                if (contentChildren != null &amp;&amp; contentChildren.size() &gt; 0) {</span><br><span class="line">                    for (Node node : contentChildren) {</span><br><span class="line">                        CheckBox checkBox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">                        checkBox.setSelected(false);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                attrFieldCheckbox.setSelected(true);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        //栏位名称</span><br><span class="line">        TextField attrName = new TextField(attributeVo.getAttrName());</span><br><span class="line">        attrName.setId("attrName");</span><br><span class="line">        attrName.setPrefWidth(200);</span><br><span class="line">        //栏位类型</span><br><span class="line">        ComboBox attrTypeComboBox = new ComboBox();</span><br><span class="line">        attrTypeComboBox.setId("attrTypeComboBox");</span><br><span class="line">        attrTypeComboBox.setPrefWidth(100);</span><br><span class="line">        attrTypeComboBox.setItems(FXCollections.observableArrayList(attrType));</span><br><span class="line">        attrTypeComboBox.getSelectionModel().select(attributeVo.getAttrType());</span><br><span class="line">        //栏位数组</span><br><span class="line">        TextField attrValue = new TextField(attributeVo.getAttrValue());</span><br><span class="line">        attrValue.setId("attrValue");</span><br><span class="line">        attrValue.setPrefWidth(350);</span><br><span class="line">        //操作按钮</span><br><span class="line">        Button delBtn = new Button("删除");</span><br><span class="line">        delBtn.setMaxWidth(50);</span><br><span class="line">        delBtn.setOnMouseClicked(event1 -&gt; content.getChildren().removeAll(hBox));</span><br><span class="line">        // 添加组件到hBox</span><br><span class="line">        hBox.getChildren().addAll(attrFieldCheckbox,attrName,attrTypeComboBox,attrValue,delBtn);</span><br><span class="line">        // 将hBox添加到内容面板</span><br><span class="line">        content.getChildren().add(content.getChildren().size(), hBox);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 按钮事件 - 上移栏位</span><br><span class="line">     */</span><br><span class="line">    private EventHandler<span class="tag">&lt;<span class="name">MouseEvent</span>&gt;</span> upBtnMouseClicked(){</span><br><span class="line">        return event -&gt; {</span><br><span class="line">            ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> contentChildren = content.getChildren();</span><br><span class="line">            if (contentChildren != null &amp;&amp; contentChildren.size() &gt; 0) {</span><br><span class="line">                for (Node node : contentChildren) {</span><br><span class="line">                    CheckBox checkBox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">                    if (checkBox.isSelected()) {</span><br><span class="line">                        HBox hBox = (HBox) content.lookup("#" + checkBox.getParent().getId());</span><br><span class="line">                        int index = content.getChildren().indexOf(hBox);</span><br><span class="line">                        if (index &gt; 0) {</span><br><span class="line">                            content.getChildren().remove(index);</span><br><span class="line">                            content.getChildren().add(index - 1, hBox);</span><br><span class="line">                        }</span><br><span class="line">                        break;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 按钮事件 - 下移栏位</span><br><span class="line">     */</span><br><span class="line">    private EventHandler<span class="tag">&lt;<span class="name">MouseEvent</span>&gt;</span> downBtnMouseClicked(){</span><br><span class="line">        return event -&gt; {</span><br><span class="line">            ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> contentChildren = content.getChildren();</span><br><span class="line">            if (contentChildren != null &amp;&amp; contentChildren.size() &gt; 0) {</span><br><span class="line">                for (Node node : contentChildren) {</span><br><span class="line">                    CheckBox checkBox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">                    if (checkBox.isSelected()) {</span><br><span class="line">                        HBox hBox = (HBox) content.lookup("#" + checkBox.getParent().getId());</span><br><span class="line">                        int index = content.getChildren().indexOf(hBox);</span><br><span class="line">                        if (index <span class="tag">&lt; <span class="attr">content.getChildren</span>()<span class="attr">.size</span>() <span class="attr">-</span> <span class="attr">1</span>) {</span></span><br><span class="line"><span class="tag">                            <span class="attr">content.getChildren</span>()<span class="attr">.remove</span>(<span class="attr">index</span>);</span></span><br><span class="line"><span class="tag">                            <span class="attr">content.getChildren</span>()<span class="attr">.add</span>(<span class="attr">index</span> + <span class="attr">1</span>, <span class="attr">hBox</span>);</span></span><br><span class="line"><span class="tag">                        }</span></span><br><span class="line"><span class="tag">                        <span class="attr">break</span>;</span></span><br><span class="line"><span class="tag">                    }</span></span><br><span class="line"><span class="tag">                }</span></span><br><span class="line"><span class="tag">            }</span></span><br><span class="line"><span class="tag">        };</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /**</span></span><br><span class="line"><span class="tag">     * 按钮事件 <span class="attr">-</span> 保存栏位</span></span><br><span class="line"><span class="tag">     */</span></span><br><span class="line">    private EventHandler&lt;MouseEvent&gt; saveBtnMouseClicked(){</span><br><span class="line">        return event -&gt; {</span><br><span class="line">            List<span class="tag">&lt;<span class="name">AttributeVo</span>&gt;</span> attributeVoList = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">            //模板栏位</span><br><span class="line">            ObservableList<span class="tag">&lt;<span class="name">Node</span>&gt;</span> contentChildren = content.getChildren();</span><br><span class="line">            if (contentChildren != null &amp;&amp; contentChildren.size() &gt; 0) {</span><br><span class="line">                for (Node node : contentChildren) {</span><br><span class="line">                    // 获取值</span><br><span class="line">                    CheckBox attrFieldCheckbox = (CheckBox) node.lookup("#attrFieldCheckbox");</span><br><span class="line">                    TextField attrName = (TextField) node.lookup("#attrName");</span><br><span class="line">                    ComboBox attrTypeComboBox = (ComboBox) node.lookup("#attrTypeComboBox");</span><br><span class="line">                    TextField attrValue = (TextField) node.lookup("#attrValue");</span><br><span class="line">                    // 赋值</span><br><span class="line">                    AttributeVo attributeVo = new AttributeVo();</span><br><span class="line">                    attributeVo.setAttrId(String.valueOf(attrFieldCheckbox.getUserData()));</span><br><span class="line">                    attributeVo.setAttrName(attrName.getText());</span><br><span class="line">                    attributeVo.setAttrType(attrTypeComboBox.getSelectionModel().getSelectedIndex());</span><br><span class="line">                    attributeVo.setAttrValue(attrValue.getText());</span><br><span class="line">                    attributeVoList.add(attributeVo);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            System.out.println(attributeVoList);</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 虚拟实体类</span><br><span class="line"> */</span><br><span class="line">class AttributeVo {</span><br><span class="line">    private String attrId;</span><br><span class="line">    private String attrName;</span><br><span class="line">    private int attrType;</span><br><span class="line">    private String attrValue;</span><br><span class="line"></span><br><span class="line">    public String getAttrId() {</span><br><span class="line">        return attrId;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public AttributeVo setAttrId(String attrId) {</span><br><span class="line">        this.attrId = attrId;</span><br><span class="line">        return this;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getAttrName() {</span><br><span class="line">        return attrName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public AttributeVo setAttrName(String attrName) {</span><br><span class="line">        this.attrName = attrName;</span><br><span class="line">        return this;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getAttrType() {</span><br><span class="line">        return attrType;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public AttributeVo setAttrType(int attrType) {</span><br><span class="line">        this.attrType = attrType;</span><br><span class="line">        return this;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getAttrValue() {</span><br><span class="line">        return attrValue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public AttributeVo setAttrValue(String attrValue) {</span><br><span class="line">        this.attrValue = attrValue;</span><br><span class="line">        return this;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "AttributeVo{" +</span><br><span class="line">                "attrId='" + attrId + '\'' +</span><br><span class="line">                ", attrName='" + attrName + '\'' +</span><br><span class="line">                ", attrType=" + attrType +</span><br><span class="line">                ", attrValue='" + attrValue + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaFx</category>
      </categories>
      <tags>
        <tag>VBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka使用 （SpringBoot调用）</title>
    <url>/2020/07/1595654393778/1595654393778/</url>
    <content><![CDATA[<h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- kafka end --&gt;</span>      </span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  #  基本配置</span><br><span class="line"> kafka:</span><br><span class="line">   # 以逗号分隔的地址列表，用于建立与 Kafka 集群的初始连接 (kafka 默认的端口号为 9092)</span><br><span class="line">   bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">   # 定义生产者</span><br><span class="line">   producer:</span><br><span class="line">     client-id: kafka.client.id</span><br><span class="line">     # 发生错误后，消息重发的次数。</span><br><span class="line">     retries: 0</span><br><span class="line">     #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。</span><br><span class="line">     batch-size: 16384</span><br><span class="line">     # 设置生产者内存缓冲区的大小。</span><br><span class="line">     buffer-memory: 33554432</span><br><span class="line">     # 键的序列化方式</span><br><span class="line">     key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # 值的序列化方式</span><br><span class="line">     value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">     # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。</span><br><span class="line">     # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。</span><br><span class="line">     # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。</span><br><span class="line">     acks: 1</span><br><span class="line">   # 定义消费者</span><br><span class="line">   consumer:</span><br><span class="line">     # 自动提交的时间间隔 在 spring boot 2.X 版本中这里采用的是值的类型为 Duration 需要符合特定的格式，如 1S,1M,2H,5D</span><br><span class="line">     auto-commit-interval: 3S</span><br><span class="line">     # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span><br><span class="line">     # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span><br><span class="line">     # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录</span><br><span class="line">     auto-offset-reset: earliest</span><br><span class="line">     # 是否自动提交偏移量，默认值是 true,为了避免出现重复数据和数据丢失，可以把它设置为 false,然后手动提交偏移量</span><br><span class="line">     enable-auto-commit: true</span><br><span class="line">     # 键的反序列化方式</span><br><span class="line">     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">     # 值的反序列化方式</span><br><span class="line">     value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">   listener:</span><br><span class="line">     # 在侦听器容器中运行的线程数(消费者个数即可)</span><br><span class="line">     concurrency: 5</span><br><span class="line">     </span><br><span class="line">demon:</span><br><span class="line">  #消费者配置</span><br><span class="line">  mqConfig: </span><br><span class="line">    # 监听的主题topic</span><br><span class="line">    topics: test,first,second,third   </span><br><span class="line">    topic:</span><br><span class="line">      # 监听的主题first的消息执行类</span><br><span class="line">      first: com.demon.springbootkafka.listener.consumer.message.FirstMessage</span><br><span class="line">      # 监听的主题second的消息执行类</span><br><span class="line">      second: com.demon.springbootkafka.listener.consumer.message.SecondMessage</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="类配置"><a href="#类配置" class="headerlink" title="类配置"></a>类配置</h3><p>mq的消费者配置类：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @className: MqProperties.java</span><br><span class="line"> * @description:  mq的消费者配置类，映射 配置文件里面的值</span><br><span class="line"> * @author: Demon</span><br><span class="line"> * @date 2020/6/16 18:00</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = "demon.mqConfig")</span><br><span class="line">@Data</span><br><span class="line">public class MqConsumerTopicConfig {</span><br><span class="line">    Map&lt;String,Class&lt;?&gt;&gt; topic;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>KafKaProducerService</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.service;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerService</span><br><span class="line"> * @Description: 生产者service</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">public interface KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息没有回执</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessage(String topic, String key, String data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息同步有阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     * @return 返回</span><br><span class="line">     * @throws InterruptedException 异常</span><br><span class="line">     * @throws ExecutionException 异常</span><br><span class="line">     * @throws TimeoutException 异常</span><br><span class="line">     */</span><br><span class="line">    Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送标准消息异步无阻塞</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data 内容</span><br><span class="line">     */</span><br><span class="line">    void sendStandardMessageAsync(String topic, String key, String data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>KafKaProducerServiceImpl:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.service.impl;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.kafka.support.SendResult;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafKaProducerServiceImpl</span><br><span class="line"> * @Description: 生产者service的实现，负责执行消息发送</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:38</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class KafKaProducerServiceImpl implements com.demon.springbootkafka.service.KafKaProducerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaTemplate<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  构建待发送的消息</span><br><span class="line">     * @param topic topic</span><br><span class="line">     * @param key key</span><br><span class="line">     * @param data data</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    private ProducerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> getRecord(String topic, String key, String data){</span><br><span class="line">        if(key == null){</span><br><span class="line">            return  new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,data);</span><br><span class="line">        }else{</span><br><span class="line">            return new ProducerRecord<span class="tag">&lt;&gt;</span>(topic,key,data);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessage(String topic, String key, String data){</span><br><span class="line">        kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long sendStandardMessageSync(String topic, String key, String data) throws InterruptedException, ExecutionException, TimeoutException {</span><br><span class="line">        SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> stringStringSendResult = kafkaTemplate.send(getRecord(topic, key, data)).get(1, TimeUnit.SECONDS);</span><br><span class="line">        System.out.println(stringStringSendResult.getProducerRecord().timestamp());</span><br><span class="line">        return stringStringSendResult.getProducerRecord().timestamp();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendStandardMessageAsync(String topic, String key, String data) {</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; sendResultListenableFuture = kafkaTemplate.send(getRecord(topic,key,data));</span><br><span class="line">        // 发送消息回调</span><br><span class="line">        //noinspection NullableProblems</span><br><span class="line">        sendResultListenableFuture.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() {</span><br><span class="line">            /** 发送成功回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(SendResult<span class="tag">&lt;<span class="name">String,</span> <span class="attr">String</span>&gt;</span> sendResultMap) {</span><br><span class="line">                log.debug("发送消息成功：" + sendResultMap);</span><br><span class="line">            }</span><br><span class="line">            /** 发送失败回调方法 */</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Throwable throwable) {</span><br><span class="line">                log.debug("发送消息失败："+ throwable.getMessage());</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生产者监听"><a href="#生产者监听" class="headerlink" title="生产者监听"></a>生产者监听</h3><p>KafkaSendResultHandler：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.producer;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line">import org.springframework.kafka.support.ProducerListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaSendResultHandler</span><br><span class="line"> * @Description: 发送消息结果回调</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 13:55</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaSendResultHandler implements ProducerListener {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSuccess(ProducerRecord producerRecord, RecordMetadata recordMetadata) {</span><br><span class="line">        log.info("发送消息监听成功 : " + producerRecord.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(ProducerRecord producerRecord, Exception exception) {</span><br><span class="line">        log.info("发送消息监听失败 : " + exception);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>KafkaConsumerService：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.config.MqConsumerTopicConfig;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConsumerService</span><br><span class="line"> * @Description: 消费者监听消息,通过类的反射执行topic消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 14:44</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaConsumerService {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private MqConsumerTopicConfig mqConsumerTopicConfig;</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = "#{'${demon.mqConfig.topics}'.split(',')}", groupId = "test-group")</span><br><span class="line">    public void receive(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        String topic = record.topic();</span><br><span class="line">        log.info("------ " + topic + " 消费者处理消息------");</span><br><span class="line">        try {</span><br><span class="line">            if (mqConsumerTopicConfig.getTopic().containsKey(topic)) {</span><br><span class="line">                String classPath = mqConsumerTopicConfig.getTopic().get(topic).getName();</span><br><span class="line">                try {</span><br><span class="line">                    Class<span class="php"><span class="meta">&lt;?</span>&gt; c1s = <span class="class"><span class="keyword">Class</span>.<span class="title">forName</span>(<span class="title">classPath</span>);</span></span></span><br><span class="line"><span class="php">                    <span class="comment">//判断是否有实现ConsumerMessageExecute消息处理接口，否则不予执行</span></span></span><br><span class="line"><span class="php">                    <span class="keyword">if</span> (c1s.getInterfaces().length &gt; <span class="number">0</span> &amp;&amp; c1s.getInterfaces()[<span class="number">0</span>].equals(ConsumerMessageExecute<span class="class">.<span class="keyword">class</span>)) </span>{</span></span><br><span class="line"><span class="php">                        <span class="comment">//获得Class的Method对象,参数为方法名,参数列表的类型Class对象</span></span></span><br><span class="line"><span class="php">                        Method method = c1s.getMethod(<span class="string">"execute"</span>, ConsumerRecord<span class="class">.<span class="keyword">class</span>);</span></span></span><br><span class="line"><span class="php">                        <span class="comment">//invoke方法，参数为cls实例对象，和想要调用的方法参数</span></span></span><br><span class="line"><span class="php">                        Boolean value = (Boolean) method.invoke(c1s.newInstance(), record);</span></span><br><span class="line"><span class="php">                        <span class="comment">//输出invoke方法的返回值</span></span></span><br><span class="line"><span class="php">                        System.out.println(<span class="string">"execute方法的返回值："</span> + value);</span></span><br><span class="line"><span class="php">                    } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                        log.error(<span class="string">"============ 调用class：{} 错误:{}"</span>, classPath, <span class="string">"此类没有实现 MessageExecute 接口！！！"</span>);</span></span><br><span class="line"><span class="php">                    }</span></span><br><span class="line"><span class="php">                } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">                    e.printStackTrace();</span></span><br><span class="line"><span class="php">                    log.error(<span class="string">"============ 调用class：{} 异常：{}"</span>, classPath, e);</span></span><br><span class="line"><span class="php">                }</span></span><br><span class="line"><span class="php">            } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="php">                log.error(<span class="string">"============ {}不存在"</span>, topic);</span></span><br><span class="line"><span class="php">            }</span></span><br><span class="line"><span class="php">        } <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) {</span></span><br><span class="line"><span class="php">            e.printStackTrace();</span></span><br><span class="line"><span class="php">        }</span></span><br><span class="line"><span class="php">    }</span></span><br><span class="line"><span class="php">}</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>ConsumerMessageExecute：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息执行统一接口</span><br><span class="line"> * @ClassName: MessageExecute</span><br><span class="line"> * @Description: 消息实现接口，必须实现此接口，否则无法执行消息处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/5/24 12:55</span><br><span class="line"> */</span><br><span class="line">public interface ConsumerMessageExecute {</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消费者 消息执行方法</span><br><span class="line">     * @param record 消息体</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>FirstMessage:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: FirstMessage</span><br><span class="line"> * @Description: 监听topic【first】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:14</span><br><span class="line"> */</span><br><span class="line">public class FirstMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>SecondMessage:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.listener.consumer.message;</span><br><span class="line"></span><br><span class="line">import com.demon.springbootkafka.listener.consumer.ConsumerMessageExecute;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: MessageUrgent</span><br><span class="line"> * @Description: 监听topic【second】的处理</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/6/17 19:15</span><br><span class="line"> */</span><br><span class="line">public class SecondMessage implements ConsumerMessageExecute {</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(ConsumerRecord<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> record) {</span><br><span class="line">        System.out.println(String.format("topic = %s, key = %s, value = %s ",record.topic(), record.key(), record.value()));</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>SpringBootKafkaApplicationTests：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.demon.springbootkafka.service.KafKaProducerService;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringBootKafkaApplicationTests {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafKaProducerService kafKaProducerService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessage() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessage(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageAsync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        String data = JSON.toJSONString(new JSONObject().put("time",System.currentTimeMillis()));</span><br><span class="line">        kafKaProducerService.sendStandardMessageAsync(topic,key,data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void sendStandardMessageSync() {</span><br><span class="line">        String topic = "test";</span><br><span class="line">        String key = UUID.randomUUID().toString();</span><br><span class="line">        JSONObject jsonObject = new JSONObject(true);</span><br><span class="line">        jsonObject.put("time",System.currentTimeMillis());</span><br><span class="line">        String data = jsonObject.toJSONString();</span><br><span class="line">        try {</span><br><span class="line">            kafKaProducerService.sendStandardMessageSync(topic, key, data);</span><br><span class="line">        } catch (InterruptedException | TimeoutException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>KafkaConfig:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka.config;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.admin.AdminClient;</span><br><span class="line">import org.apache.kafka.clients.admin.AdminClientConfig;</span><br><span class="line">import org.springframework.boot.autoconfigure.kafka.KafkaProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.core.KafkaAdmin;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName: KafkaConfig</span><br><span class="line"> * @Description: KafkaConfig 配置,操作topic</span><br><span class="line"> * @Author: Demon</span><br><span class="line"> * @Date: 2020/4/23 18:28</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaConfig {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private KafkaProperties kafkaProperties;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     创建一个kafka管理类，相当于rabbitMQ的管理类rabbitAdmin,</span><br><span class="line">     *     没有此bean无法自定义的使用adminClient创建topic</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public KafkaAdmin kafkaAdmin() {</span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> props = new HashMap<span class="tag">&lt;&gt;</span>(1);</span><br><span class="line">        //配置Kafka实例的连接地址</span><br><span class="line">        //kafka的地址，不是zookeeper</span><br><span class="line">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers().get(0));</span><br><span class="line">        return new KafkaAdmin(props);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *     kafka客户端，在spring中创建这个bean之后可以注入并且创建topic,</span><br><span class="line">     *     用于集群环境，创建对个副本</span><br><span class="line">     * @return 返回</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public AdminClient adminClient() {</span><br><span class="line">        return AdminClient.create(kafkaAdmin().getConfig());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>SpringBootKafkaApplicationTests_topic:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="code"><pre><span class="line">package com.demon.springbootkafka;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.apache.kafka.clients.admin.*;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">class SpringBootKafkaApplicationTests_topic {</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AdminClient adminClient;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() {</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void listTopics(){</span><br><span class="line">        try {</span><br><span class="line">            ListTopicsResult listTopics = adminClient.listTopics();</span><br><span class="line">            Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> topics = listTopics.names().get();</span><br><span class="line">            for (String topic : topics) {</span><br><span class="line">                System.out.println(topic);</span><br><span class="line">            }</span><br><span class="line">        } catch (InterruptedException | ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void createTopic() {</span><br><span class="line">        ArrayList<span class="tag">&lt;<span class="name">NewTopic</span>&gt;</span> topics = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        NewTopic newTopic = new NewTopic("test1", 2, (short) 1);</span><br><span class="line">        topics.add(newTopic);</span><br><span class="line">        CreateTopicsResult result = adminClient.createTopics(topics);</span><br><span class="line">        System.out.println( JSON.toJSONString(result));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void deleteTopics() {</span><br><span class="line">        DeleteTopicsResult deleteTopicsResult = adminClient.deleteTopics(Collections.singletonList("test1"));</span><br><span class="line">        System.out.println( JSON.toJSONString(deleteTopicsResult));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
</search>
